
Timing_driven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080095e0  080095e0  000195e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a50  08009a50  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009a50  08009a50  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a50  08009a50  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a54  08009a54  00019a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001e4  08009c3c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08009c3c  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f5e  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002996  00000000  00000000  000311ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00033b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db4  00000000  00000000  00034cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198d7  00000000  00000000  00035a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149fa  00000000  00000000  0004f34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f39a  00000000  00000000  00063d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e9c  00000000  00000000  000f30e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f8f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080095c4 	.word	0x080095c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080095c4 	.word	0x080095c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <DHT_DelayInit>:
#include "DHT.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DHT_DelayInit(DHT_Name* DHT)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DHT->Timer);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f97d 	bl	80013a0 <DELAY_TIM_Init>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <DHT_DelayUs>:
static int DHT_DelayUs(DHT_Name* DHT, uint16_t Time)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DHT->Timer, Time);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f977 	bl	80013b6 <DELAY_TIM_Us>
	return 1;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <DHT_SetPinOut>:

static void DHT_SetPinOut(DHT_Name* DHT)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	891b      	ldrh	r3, [r3, #8]
 80010ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f107 0208 	add.w	r2, r7, #8
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f001 f879 	bl	80021f8 <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <DHT_SetPinIn>:
static void DHT_SetPinIn(DHT_Name* DHT)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	891b      	ldrh	r3, [r3, #8]
 8001128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f107 0208 	add.w	r2, r7, #8
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f85b 	bl	80021f8 <HAL_GPIO_Init>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <DHT_WritePin>:
static void DHT_WritePin(DHT_Name* DHT, uint8_t Value)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->PORT, DHT->Pin, Value);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68d8      	ldr	r0, [r3, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	891b      	ldrh	r3, [r3, #8]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	4619      	mov	r1, r3
 8001162:	f001 f9e4 	bl	800252e <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <DHT_ReadPin>:
static uint8_t DHT_ReadPin(DHT_Name* DHT)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	uint8_t Value;
	Value =  HAL_GPIO_ReadPin(DHT->PORT, DHT->Pin);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	891b      	ldrh	r3, [r3, #8]
 800117e:	4619      	mov	r1, r3
 8001180:	4610      	mov	r0, r2
 8001182:	f001 f9bd 	bl	8002500 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
	return Value;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <DHT_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DHT_Start(DHT_Name* DHT)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinOut(DHT);  
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff96 	bl	80010d2 <DHT_SetPinOut>
	DHT_WritePin(DHT, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffce 	bl	800114a <DHT_WritePin>
	DHT_DelayUs(DHT, DHT->Type);   
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff7a 	bl	80010ae <DHT_DelayUs>
	DHT_SetPinIn(DHT);    
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa7 	bl	800110e <DHT_SetPinIn>
	DHT_DelayUs(DHT, 40); 
 80011c0:	2128      	movs	r1, #40	; 0x28
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff73 	bl	80010ae <DHT_DelayUs>
	if (!DHT_ReadPin(DHT))
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffd0 	bl	800116e <DHT_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10e      	bne.n	80011f2 <DHT_Start+0x5e>
	{
		DHT_DelayUs(DHT, 40); 
 80011d4:	2128      	movs	r1, #40	; 0x28
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff69 	bl	80010ae <DHT_DelayUs>
		if(DHT_ReadPin(DHT))
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffc6 	bl	800116e <DHT_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <DHT_Start+0x5a>
		{
			Response = 1;   
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <DHT_Start+0x5e>
		}
		else Response = 0;  
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
	}		
	//while(DHT_ReadPin(DHT));

	return Response;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <DHT_Read>:
static uint8_t DHT_Read(DHT_Name* DHT)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinIn(DHT);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff80 	bl	800110e <DHT_SetPinIn>
	for(int i = 0; i<8; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	e035      	b.n	8001280 <DHT_Read+0x84>
	{
		while(!DHT_ReadPin(DHT));
 8001214:	bf00      	nop
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa9 	bl	800116e <DHT_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f9      	beq.n	8001216 <DHT_Read+0x1a>
		DHT_DelayUs(DHT, 40);
 8001222:	2128      	movs	r1, #40	; 0x28
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff42 	bl	80010ae <DHT_DelayUs>
		if(!DHT_ReadPin(DHT)&& DHT_DelayUs(DHT, 80))
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff9f 	bl	800116e <DHT_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d115      	bne.n	8001262 <DHT_Read+0x66>
 8001236:	2150      	movs	r1, #80	; 0x50
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff38 	bl	80010ae <DHT_DelayUs>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00e      	beq.n	8001262 <DHT_Read+0x66>
		{
			Value &= ~(1<<(7-i));	
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2201      	movs	r2, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	b25b      	sxtb	r3, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	b25a      	sxtb	r2, r3
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4013      	ands	r3, r2
 800125c:	b25b      	sxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e00b      	b.n	800127a <DHT_Read+0x7e>
		}
		else {
			Value |= 1<<(7-i);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f1c3 0307 	rsb	r3, r3, #7
 8001268:	2201      	movs	r2, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<8; i++)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3301      	adds	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b07      	cmp	r3, #7
 8001284:	ddc6      	ble.n	8001214 <DHT_Read+0x18>
		}
		//while(DHT_ReadPin(DHT));
	}
	return Value;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_Name* DHT, uint8_t DHT_Type, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	460b      	mov	r3, r1
 800129e:	72fb      	strb	r3, [r7, #11]
	if(DHT_Type == DHT11)
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d104      	bne.n	80012b0 <DHT_Init+0x20>
	{
		DHT->Type = DHT11_STARTTIME;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f244 6250 	movw	r2, #18000	; 0x4650
 80012ac:	801a      	strh	r2, [r3, #0]
 80012ae:	e006      	b.n	80012be <DHT_Init+0x2e>
	}
	else if(DHT_Type == DHT22)
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d103      	bne.n	80012be <DHT_Init+0x2e>
	{
		DHT->Type = DHT22_STARTTIME;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80012bc:	801a      	strh	r2, [r3, #0]
	}
	DHT->PORT = DH_PORT;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	60da      	str	r2, [r3, #12]
	DHT->Pin = DH_Pin;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8b3a      	ldrh	r2, [r7, #24]
 80012c8:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
	DHT_DelayInit(DHT);
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff fedf 	bl	8001094 <DHT_DelayInit>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <DHT_ReadTempHum>:

uint8_t DHT_ReadTempHum(DHT_Name* DHT)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2, RH1, RH2;
	uint16_t  SUM = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	82fb      	strh	r3, [r7, #22]
	float Temp,Humi;
	DHT_Start(DHT);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff51 	bl	8001194 <DHT_Start>
	RH1 = DHT_Read(DHT);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff82 	bl	80011fc <DHT_Read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	757b      	strb	r3, [r7, #21]
	RH2 = DHT_Read(DHT);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff7d 	bl	80011fc <DHT_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	753b      	strb	r3, [r7, #20]
	Temp1 = DHT_Read(DHT);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff78 	bl	80011fc <DHT_Read>
 800130c:	4603      	mov	r3, r0
 800130e:	74fb      	strb	r3, [r7, #19]
	Temp2 = DHT_Read(DHT);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff73 	bl	80011fc <DHT_Read>
 8001316:	4603      	mov	r3, r0
 8001318:	74bb      	strb	r3, [r7, #18]
	SUM = DHT_Read(DHT);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff6e 	bl	80011fc <DHT_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	82fb      	strh	r3, [r7, #22]
	Temp = (Temp1<<8)|Temp2;
 8001324:	7cfb      	ldrb	r3, [r7, #19]
 8001326:	021a      	lsls	r2, r3, #8
 8001328:	7cbb      	ldrb	r3, [r7, #18]
 800132a:	4313      	orrs	r3, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fcd5 	bl	8000cdc <__aeabi_i2f>
 8001332:	4603      	mov	r3, r0
 8001334:	60fb      	str	r3, [r7, #12]
	Humi = (RH1<<8)|RH2;
 8001336:	7d7b      	ldrb	r3, [r7, #21]
 8001338:	021a      	lsls	r2, r3, #8
 800133a:	7d3b      	ldrb	r3, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fccc 	bl	8000cdc <__aeabi_i2f>
 8001344:	4603      	mov	r3, r0
 8001346:	60bb      	str	r3, [r7, #8]
	DHT->Temp = Temp/1000.0;
 8001348:	4912      	ldr	r1, [pc, #72]	; (8001394 <DHT_ReadTempHum+0xb4>)
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff fdce 	bl	8000eec <__aeabi_fdiv>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
	DHT->Humi = 100-Humi/1000.0;
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f7ff f865 	bl	8000428 <__aeabi_f2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <DHT_ReadTempHum+0xb8>)
 8001364:	f7ff f9e2 	bl	800072c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	490a      	ldr	r1, [pc, #40]	; (800139c <DHT_ReadTempHum+0xbc>)
 8001372:	f7fe fef9 	bl	8000168 <__aeabi_dsub>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fba3 	bl	8000ac8 <__aeabi_d2f>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	615a      	str	r2, [r3, #20]
	return SUM;
 8001388:	8afb      	ldrh	r3, [r7, #22]
 800138a:	b2db      	uxtb	r3, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	447a0000 	.word	0x447a0000
 8001398:	408f4000 	.word	0x408f4000
 800139c:	40590000 	.word	0x40590000

080013a0 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f002 fb1f 	bl	80039ec <HAL_TIM_Base_Start>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 80013ca:	bf00      	nop
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3f9      	bcc.n	80013cc <DELAY_TIM_Us+0x16>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <main>:

void (*execute_task[])(void) = {readSensor,displayLCD,transmitData};


int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af02      	add	r7, sp, #8

  HAL_Init();
 80013ea:	f000 fcbf 	bl	8001d6c <HAL_Init>


  SystemClock_Config();
 80013ee:	f000 f85d 	bl	80014ac <SystemClock_Config>

  MX_GPIO_Init();
 80013f2:	f000 f949 	bl	8001688 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013f6:	f000 f8cd 	bl	8001594 <MX_TIM1_Init>

  MX_USART1_UART_Init();
 80013fa:	f000 f91b 	bl	8001634 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80013fe:	f000 f89b 	bl	8001538 <MX_I2C1_Init>

	DHT_Init(&dht,DHT11,&htim1,DHT11_GPIO_Port,DHT11_Pin);
 8001402:	2302      	movs	r3, #2
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0xa8>)
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <main+0xac>)
 800140a:	2101      	movs	r1, #1
 800140c:	4821      	ldr	r0, [pc, #132]	; (8001494 <main+0xb0>)
 800140e:	f7ff ff3f 	bl	8001290 <DHT_Init>


	lcd1602_i2c_init(&hi2c1);
 8001412:	4821      	ldr	r0, [pc, #132]	; (8001498 <main+0xb4>)
 8001414:	f003 fc32 	bl	8004c7c <lcd1602_i2c_init>
	EventQueue_Init(&event);
 8001418:	4820      	ldr	r0, [pc, #128]	; (800149c <main+0xb8>)
 800141a:	f000 fa42 	bl	80018a2 <EventQueue_Init>
	initEventQueue();
 800141e:	f000 f9f1 	bl	8001804 <initEventQueue>
	//HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData, 1);

  while (1)
  {

		timeSytick=HAL_GetTick();
 8001422:	f000 fcfb 	bl	8001e1c <HAL_GetTick>
 8001426:	6078      	str	r0, [r7, #4]
		if(timeSytick%(cycle*1000))
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <main+0xbc>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	461a      	mov	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	fbb3 f1f2 	udiv	r1, r3, r2
 800143e:	fb01 f202 	mul.w	r2, r1, r2
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <main+0x6c>
		{
			EventQueue_Put(&event,EVENT01);
 8001448:	2100      	movs	r1, #0
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <main+0xb8>)
 800144c:	f000 fa4a 	bl	80018e4 <EventQueue_Put>

		}
			if(EventQueue_isEmpty(&event)){
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <main+0xb8>)
 8001452:	f000 fa35 	bl	80018c0 <EventQueue_isEmpty>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <main+0x8a>

				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800145c:	2101      	movs	r1, #1
 800145e:	2000      	movs	r0, #0
 8001460:	f001 fe48 	bl	80030f4 <HAL_PWR_EnterSLEEPMode>
				HAL_Delay(500);
 8001464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001468:	f000 fce2 	bl	8001e30 <HAL_Delay>
 800146c:	e7d9      	b.n	8001422 <main+0x3e>
			}
			else{
			currentEvent=EventQueue_Get(&event);
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <main+0xb8>)
 8001470:	f000 fa5a 	bl	8001928 <EventQueue_Get>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <main+0xc0>)
 800147a:	701a      	strb	r2, [r3, #0]
			(*execute_task[currentEvent])();
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <main+0xc0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <main+0xc4>)
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	4798      	blx	r3
		timeSytick=HAL_GetTick();
 800148a:	e7ca      	b.n	8001422 <main+0x3e>
 800148c:	40010800 	.word	0x40010800
 8001490:	20000254 	.word	0x20000254
 8001494:	200002e4 	.word	0x200002e4
 8001498:	20000200 	.word	0x20000200
 800149c:	20000320 	.word	0x20000320
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000334 	.word	0x20000334
 80014a8:	20000004 	.word	0x20000004

080014ac <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b090      	sub	sp, #64	; 0x40
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	2228      	movs	r2, #40	; 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 fc60 	bl	8005d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fe19 	bl	800312c <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001500:	f000 f9ca 	bl	8001898 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2102      	movs	r1, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f002 f886 	bl	8003630 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800152a:	f000 f9b5 	bl	8001898 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3740      	adds	r7, #64	; 0x40
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0


  hi2c1.Instance = I2C1;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C1_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C1_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C1_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C1_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C1_Init+0x50>)
 8001576:	f000 fff3 	bl	8002560 <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001580:	f000 f98a 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000200 	.word	0x20000200
 800158c:	40005400 	.word	0x40005400
 8001590:	000186a0 	.word	0x000186a0

08001594 <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_TIM1_Init+0x98>)
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <MX_TIM1_Init+0x9c>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_TIM1_Init+0x98>)
 80015b8:	2247      	movs	r2, #71	; 0x47
 80015ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_TIM1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_TIM1_Init+0x98>)
 80015c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_TIM1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_TIM1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_TIM1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <MX_TIM1_Init+0x98>)
 80015de:	f002 f9b5 	bl	800394c <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 f956 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM1_Init+0x98>)
 80015fa:	f002 fa41 	bl	8003a80 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001604:	f000 f948 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_TIM1_Init+0x98>)
 8001616:	f002 fbf3 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 f93a 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000254 	.word	0x20000254
 8001630:	40012c00 	.word	0x40012c00

08001634 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_USART1_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART1_UART_Init+0x4c>)
 800166c:	f002 fc26 	bl	8003ebc <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f90f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000029c 	.word	0x2000029c
 8001684:	40013800 	.word	0x40013800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_GPIO_Init+0x8c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016a2:	f043 0320 	orr.w	r3, r3, #32
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a10      	ldr	r2, [pc, #64]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_GPIO_Init+0x8c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2102      	movs	r1, #2
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <MX_GPIO_Init+0x90>)
 80016ea:	f000 ff20 	bl	800252e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80016ee:	2302      	movs	r3, #2
 80016f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_GPIO_Init+0x90>)
 8001706:	f000 fd77 	bl	80021f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40010800 	.word	0x40010800

0800171c <readSensor>:

/* USER CODE BEGIN 4 */
void readSensor(){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
		EventQueue_Put(&event, EVENT02);
 8001720:	2101      	movs	r1, #1
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <readSensor+0x44>)
 8001724:	f000 f8de 	bl	80018e4 <EventQueue_Put>
		DHT_ReadTempHum(&dht);
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <readSensor+0x48>)
 800172a:	f7ff fdd9 	bl	80012e0 <DHT_ReadTempHum>
		//readDHT11(&dht11);

		sprintf(temp,"TEMP=%.1f",(float)dht.Temp);
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <readSensor+0x48>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe78 	bl	8000428 <__aeabi_f2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	490a      	ldr	r1, [pc, #40]	; (8001768 <readSensor+0x4c>)
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <readSensor+0x50>)
 8001740:	f004 fa9a 	bl	8005c78 <siprintf>
		sprintf(humid,"Humid=%.1f",(float)dht.Humi);
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <readSensor+0x48>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe6d 	bl	8000428 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4907      	ldr	r1, [pc, #28]	; (8001770 <readSensor+0x54>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <readSensor+0x58>)
 8001756:	f004 fa8f 	bl	8005c78 <siprintf>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000320 	.word	0x20000320
 8001764:	200002e4 	.word	0x200002e4
 8001768:	080095e0 	.word	0x080095e0
 800176c:	200002fc 	.word	0x200002fc
 8001770:	080095ec 	.word	0x080095ec
 8001774:	2000030c 	.word	0x2000030c

08001778 <displayLCD>:

void displayLCD(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	EventQueue_Put(&event, EVENT03);
 800177c:	2102      	movs	r1, #2
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <displayLCD+0x24>)
 8001780:	f000 f8b0 	bl	80018e4 <EventQueue_Put>
	lcd1602_i2c_1stLine();
 8001784:	f003 fb0a 	bl	8004d9c <lcd1602_i2c_1stLine>
	lcd1602_i2c_printf(temp);
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <displayLCD+0x28>)
 800178a:	f003 fb17 	bl	8004dbc <lcd1602_i2c_printf>
	lcd1602_i2c_2ndLine();
 800178e:	f003 fb0d 	bl	8004dac <lcd1602_i2c_2ndLine>
	lcd1602_i2c_printf(humid);
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <displayLCD+0x2c>)
 8001794:	f003 fb12 	bl	8004dbc <lcd1602_i2c_printf>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000320 	.word	0x20000320
 80017a0:	200002fc 	.word	0x200002fc
 80017a4:	2000030c 	.word	0x2000030c

080017a8 <transmitData>:
void transmitData(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
		HAL_UART_Transmit(&huart1,(uint8_t*)temp,strlen(temp),1000);
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <transmitData+0x4c>)
 80017ae:	f7fe fccf 	bl	8000150 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	490e      	ldr	r1, [pc, #56]	; (80017f4 <transmitData+0x4c>)
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <transmitData+0x50>)
 80017be:	f002 fbcd 	bl	8003f5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\n",2,100);
 80017c2:	2364      	movs	r3, #100	; 0x64
 80017c4:	2202      	movs	r2, #2
 80017c6:	490d      	ldr	r1, [pc, #52]	; (80017fc <transmitData+0x54>)
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <transmitData+0x50>)
 80017ca:	f002 fbc7 	bl	8003f5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)humid,strlen(humid),1000);
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <transmitData+0x58>)
 80017d0:	f7fe fcbe 	bl	8000150 <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017dc:	4908      	ldr	r1, [pc, #32]	; (8001800 <transmitData+0x58>)
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <transmitData+0x50>)
 80017e0:	f002 fbbc 	bl	8003f5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t*)"\n",2,100);
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	2202      	movs	r2, #2
 80017e8:	4904      	ldr	r1, [pc, #16]	; (80017fc <transmitData+0x54>)
 80017ea:	4803      	ldr	r0, [pc, #12]	; (80017f8 <transmitData+0x50>)
 80017ec:	f002 fbb6 	bl	8003f5c <HAL_UART_Transmit>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200002fc 	.word	0x200002fc
 80017f8:	2000029c 	.word	0x2000029c
 80017fc:	080095f8 	.word	0x080095f8
 8001800:	2000030c 	.word	0x2000030c

08001804 <initEventQueue>:
void initEventQueue(){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	event.event[0]=EVENT01;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <initEventQueue+0x20>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	event.event[1]=EVENT02;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <initEventQueue+0x20>)
 8001810:	2201      	movs	r2, #1
 8001812:	705a      	strb	r2, [r3, #1]
	event.event[2]=EVENT03;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <initEventQueue+0x20>)
 8001816:	2202      	movs	r2, #2
 8001818:	709a      	strb	r2, [r3, #2]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000320 	.word	0x20000320

08001828 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_UART_RxCpltCallback+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d122      	bne.n	8001882 <HAL_UART_RxCpltCallback+0x5a>
		int i=0;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
		if(RxData[4]!='K'){
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_UART_RxCpltCallback+0x68>)
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	2b4b      	cmp	r3, #75	; 0x4b
 8001846:	d00b      	beq.n	8001860 <HAL_UART_RxCpltCallback+0x38>
			i++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData+i, 1);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_UART_RxCpltCallback+0x68>)
 8001852:	4413      	add	r3, r2
 8001854:	2201      	movs	r2, #1
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <HAL_UART_RxCpltCallback+0x64>)
 800185a:	f002 fc02 	bl	8004062 <HAL_UART_Receive_IT>
		}
		else{
			cycle= (RxData[0]-48)*10+(RxData[1]-48);
		}
	}
}
 800185e:	e010      	b.n	8001882 <HAL_UART_RxCpltCallback+0x5a>
			cycle= (RxData[0]-48)*10+(RxData[1]-48);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_UART_RxCpltCallback+0x68>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	3b30      	subs	r3, #48	; 0x30
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4413      	add	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_UART_RxCpltCallback+0x68>)
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	4413      	add	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3b30      	subs	r3, #48	; 0x30
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_UART_RxCpltCallback+0x6c>)
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000029c 	.word	0x2000029c
 8001890:	2000031c 	.word	0x2000031c
 8001894:	20000000 	.word	0x20000000

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <Error_Handler+0x8>

080018a2 <EventQueue_Init>:
	enum SystemEvent event[MAX_EVENTS];
	int head;
	int tail;

}EventQueue;
void EventQueue_Init(EventQueue *queue){
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	queue->head=0;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
	queue->tail=0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]


}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <EventQueue_isEmpty>:


int EventQueue_isEmpty(EventQueue *queue){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	return queue->head == queue->tail;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <EventQueue_Put>:
void EventQueue_Put(EventQueue* queue,enum SystemEvent event){
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
	queue->event[queue->tail]=event;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	78f9      	ldrb	r1, [r7, #3]
 80018f8:	54d1      	strb	r1, [r2, r3]
	queue->tail= (queue->tail+1)%MAX_EVENTS;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <EventQueue_Put+0x40>)
 8001902:	fb83 2301 	smull	r2, r3, r3, r1
 8001906:	109a      	asrs	r2, r3, #2
 8001908:	17cb      	asrs	r3, r1, #31
 800190a:	1ad2      	subs	r2, r2, r3
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	1aca      	subs	r2, r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	66666667 	.word	0x66666667

08001928 <EventQueue_Get>:
enum SystemEvent EventQueue_Get(EventQueue* queue){
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

	enum SystemEvent event=queue->event[queue->head];
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	73fb      	strb	r3, [r7, #15]
	queue->head=(queue->head+1)%MAX_EVENTS;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <EventQueue_Get+0x40>)
 8001942:	fb83 2301 	smull	r2, r3, r3, r1
 8001946:	109a      	asrs	r2, r3, #2
 8001948:	17cb      	asrs	r3, r1, #31
 800194a:	1ad2      	subs	r2, r2, r3
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	1aca      	subs	r2, r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60da      	str	r2, [r3, #12]
	return event;
 800195a:	7bfb      	ldrb	r3, [r7, #15]

}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	66666667 	.word	0x66666667

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_MspInit+0x5c>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <HAL_MspInit+0x5c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_MspInit+0x5c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_MspInit+0x5c>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_MspInit+0x5c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_MspInit+0x5c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_MspInit+0x60>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_MspInit+0x60>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000

080019d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_I2C_MspInit+0x70>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d123      	bne.n	8001a38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a08:	23c0      	movs	r3, #192	; 0xc0
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <HAL_I2C_MspInit+0x78>)
 8001a1c:	f000 fbec 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 8001a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2a:	61d3      	str	r3, [r2, #28]
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_I2C_MspInit+0x74>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40005400 	.word	0x40005400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010c00 	.word	0x40010c00

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_TIM_Base_MspInit+0x34>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10b      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x38>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_TIM_Base_MspInit+0x38>)
 8001a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_TIM_Base_MspInit+0x38>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_UART_MspInit+0x9c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d139      	bne.n	8001b1c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4619      	mov	r1, r3
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <HAL_UART_MspInit+0xa4>)
 8001aee:	f000 fb83 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <HAL_UART_MspInit+0xa4>)
 8001b08:	f000 fb76 	bl	80021f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2025      	movs	r0, #37	; 0x25
 8001b12:	f000 fa88 	bl	8002026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b16:	2025      	movs	r0, #37	; 0x25
 8001b18:	f000 faa1 	bl	800205e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40013800 	.word	0x40013800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010800 	.word	0x40010800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	e7fe      	b.n	8001b34 <NMI_Handler+0x4>

08001b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler+0x4>

08001b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 f93f 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART1_IRQHandler+0x10>)
 8001b86:	f002 fa91 	bl	80040ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000029c 	.word	0x2000029c

08001b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return 1;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <_kill>:

int _kill(int pid, int sig)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bac:	f004 f93a 	bl	8005e24 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2216      	movs	r2, #22
 8001bb4:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_exit>:

void _exit (int status)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bca:	f04f 31ff 	mov.w	r1, #4294967295
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffe7 	bl	8001ba2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd4:	e7fe      	b.n	8001bd4 <_exit+0x12>

08001bd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e00a      	b.n	8001bfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be8:	f3af 8000 	nop.w
 8001bec:	4601      	mov	r1, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	60ba      	str	r2, [r7, #8]
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf0      	blt.n	8001be8 <_read+0x12>
  }

  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e009      	b.n	8001c36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dbf1      	blt.n	8001c22 <_write+0x12>
  }
  return len;
 8001c3e:	687b      	ldr	r3, [r7, #4]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_close>:

int _close(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <_isatty>:

int _isatty(int file)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f004 f8a4 	bl	8005e24 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20005000 	.word	0x20005000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	20000338 	.word	0x20000338
 8001d10:	20000498 	.word	0x20000498

08001d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff fff8 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d26:	490c      	ldr	r1, [pc, #48]	; (8001d58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d3c:	4c09      	ldr	r4, [pc, #36]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f004 f871 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4e:	f7ff fb49 	bl	80013e4 <main>
  bx lr
 8001d52:	4770      	bx	lr
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001d5c:	08009a58 	.word	0x08009a58
  ldr r2, =_sbss
 8001d60:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001d64:	20000494 	.word	0x20000494

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f947 	bl	8002010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fdf0 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f95f 	bl	800207a <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f927 	bl	8002026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000010 	.word	0x20000010
 8001df0:	20000018 	.word	0x20000018
 8001df4:	20000014 	.word	0x20000014

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000018 	.word	0x20000018
 8001e18:	2000033c 	.word	0x2000033c

08001e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	2000033c 	.word	0x2000033c

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffe0 	bl	8001e1c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000018 	.word	0x20000018

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4906      	ldr	r1, [pc, #24]	; (8001f10 <__NVIC_EnableIRQ+0x34>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fdc:	d301      	bcc.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00f      	b.n	8002002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <SysTick_Config+0x40>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	210f      	movs	r1, #15
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f7ff ff90 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <SysTick_Config+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <SysTick_Config+0x40>)
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff2d 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002038:	f7ff ff42 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 800203c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff ff90 	bl	8001f68 <NVIC_EncodePriority>
 8002048:	4602      	mov	r2, r0
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff5f 	bl	8001f14 <__NVIC_SetPriority>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff35 	bl	8001edc <__NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffa2 	bl	8001fcc <SysTick_Config>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d008      	beq.n	80020bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2204      	movs	r2, #4
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e020      	b.n	80020fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d005      	beq.n	800212c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e051      	b.n	80021d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 020e 	bic.w	r2, r2, #14
 800213a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_DMA_Abort_IT+0xd4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d029      	beq.n	80021aa <HAL_DMA_Abort_IT+0xa2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_DMA_Abort_IT+0xd8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x9e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_DMA_Abort_IT+0xdc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01a      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x98>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_DMA_Abort_IT+0xe0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d012      	beq.n	800219a <HAL_DMA_Abort_IT+0x92>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_DMA_Abort_IT+0xe4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00a      	beq.n	8002194 <HAL_DMA_Abort_IT+0x8c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_DMA_Abort_IT+0xe8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d102      	bne.n	800218e <HAL_DMA_Abort_IT+0x86>
 8002188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800218c:	e00e      	b.n	80021ac <HAL_DMA_Abort_IT+0xa4>
 800218e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002192:	e00b      	b.n	80021ac <HAL_DMA_Abort_IT+0xa4>
 8002194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002198:	e008      	b.n	80021ac <HAL_DMA_Abort_IT+0xa4>
 800219a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219e:	e005      	b.n	80021ac <HAL_DMA_Abort_IT+0xa4>
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	e002      	b.n	80021ac <HAL_DMA_Abort_IT+0xa4>
 80021a6:	2310      	movs	r3, #16
 80021a8:	e000      	b.n	80021ac <HAL_DMA_Abort_IT+0xa4>
 80021aa:	2301      	movs	r3, #1
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_DMA_Abort_IT+0xec>)
 80021ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
    } 
  }
  return status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40020008 	.word	0x40020008
 80021e0:	4002001c 	.word	0x4002001c
 80021e4:	40020030 	.word	0x40020030
 80021e8:	40020044 	.word	0x40020044
 80021ec:	40020058 	.word	0x40020058
 80021f0:	4002006c 	.word	0x4002006c
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	e169      	b.n	80024e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800220c:	2201      	movs	r2, #1
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8158 	bne.w	80024da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a9a      	ldr	r2, [pc, #616]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d05e      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002234:	4a98      	ldr	r2, [pc, #608]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d875      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800223a:	4a98      	ldr	r2, [pc, #608]	; (800249c <HAL_GPIO_Init+0x2a4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d058      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002240:	4a96      	ldr	r2, [pc, #600]	; (800249c <HAL_GPIO_Init+0x2a4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d86f      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002246:	4a96      	ldr	r2, [pc, #600]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d052      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 800224c:	4a94      	ldr	r2, [pc, #592]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d869      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002252:	4a94      	ldr	r2, [pc, #592]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04c      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002258:	4a92      	ldr	r2, [pc, #584]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d863      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800225e:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d046      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002264:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d85d      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800226a:	2b12      	cmp	r3, #18
 800226c:	d82a      	bhi.n	80022c4 <HAL_GPIO_Init+0xcc>
 800226e:	2b12      	cmp	r3, #18
 8002270:	d859      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_GPIO_Init+0x80>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022f3 	.word	0x080022f3
 800227c:	080022cd 	.word	0x080022cd
 8002280:	080022df 	.word	0x080022df
 8002284:	08002321 	.word	0x08002321
 8002288:	08002327 	.word	0x08002327
 800228c:	08002327 	.word	0x08002327
 8002290:	08002327 	.word	0x08002327
 8002294:	08002327 	.word	0x08002327
 8002298:	08002327 	.word	0x08002327
 800229c:	08002327 	.word	0x08002327
 80022a0:	08002327 	.word	0x08002327
 80022a4:	08002327 	.word	0x08002327
 80022a8:	08002327 	.word	0x08002327
 80022ac:	08002327 	.word	0x08002327
 80022b0:	08002327 	.word	0x08002327
 80022b4:	08002327 	.word	0x08002327
 80022b8:	08002327 	.word	0x08002327
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022e9 	.word	0x080022e9
 80022c4:	4a79      	ldr	r2, [pc, #484]	; (80024ac <HAL_GPIO_Init+0x2b4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ca:	e02c      	b.n	8002326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	623b      	str	r3, [r7, #32]
          break;
 80022d2:	e029      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	3304      	adds	r3, #4
 80022da:	623b      	str	r3, [r7, #32]
          break;
 80022dc:	e024      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	3308      	adds	r3, #8
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e01f      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	330c      	adds	r3, #12
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e01a      	b.n	8002328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022fa:	2304      	movs	r3, #4
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e013      	b.n	8002328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	611a      	str	r2, [r3, #16]
          break;
 8002312:	e009      	b.n	8002328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	615a      	str	r2, [r3, #20]
          break;
 800231e:	e003      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x130>
          break;
 8002326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d801      	bhi.n	8002332 <HAL_GPIO_Init+0x13a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	e001      	b.n	8002336 <HAL_GPIO_Init+0x13e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d802      	bhi.n	8002344 <HAL_GPIO_Init+0x14c>
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x152>
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3b08      	subs	r3, #8
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	210f      	movs	r1, #15
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	431a      	orrs	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80b1 	beq.w	80024da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a40      	ldr	r2, [pc, #256]	; (80024b8 <HAL_GPIO_Init+0x2c0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3f      	ldr	r2, [pc, #252]	; (80024bc <HAL_GPIO_Init+0x2c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00d      	beq.n	80023e0 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <HAL_GPIO_Init+0x2c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_GPIO_Init+0x1e4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <HAL_GPIO_Init+0x2cc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_GPIO_Init+0x1e0>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023d8:	2304      	movs	r3, #4
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e4:	2300      	movs	r3, #0
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023f6:	492f      	ldr	r1, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	492c      	ldr	r1, [pc, #176]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4928      	ldr	r1, [pc, #160]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4922      	ldr	r1, [pc, #136]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	43db      	mvns	r3, r3
 800244e:	491e      	ldr	r1, [pc, #120]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002450:	4013      	ands	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4918      	ldr	r1, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d021      	beq.n	80024cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e021      	b.n	80024da <HAL_GPIO_Init+0x2e2>
 8002496:	bf00      	nop
 8002498:	10320000 	.word	0x10320000
 800249c:	10310000 	.word	0x10310000
 80024a0:	10220000 	.word	0x10220000
 80024a4:	10210000 	.word	0x10210000
 80024a8:	10120000 	.word	0x10120000
 80024ac:	10110000 	.word	0x10110000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40010800 	.word	0x40010800
 80024bc:	40010c00 	.word	0x40010c00
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40011400 	.word	0x40011400
 80024c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae8e 	bne.w	800220c <HAL_GPIO_Init+0x14>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e001      	b.n	8002522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253e:	787b      	ldrb	r3, [r7, #1]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002544:	887a      	ldrh	r2, [r7, #2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800254a:	e003      	b.n	8002554 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	041a      	lsls	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
	...

08002560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e12b      	b.n	80027ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fa22 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c4:	f001 f97c 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_I2C_Init+0x274>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d807      	bhi.n	80025e4 <HAL_I2C_Init+0x84>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a80      	ldr	r2, [pc, #512]	; (80027d8 <HAL_I2C_Init+0x278>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf94      	ite	ls
 80025dc:	2301      	movls	r3, #1
 80025de:	2300      	movhi	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e006      	b.n	80025f2 <HAL_I2C_Init+0x92>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	; (80027dc <HAL_I2C_Init+0x27c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e7      	b.n	80027ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a78      	ldr	r2, [pc, #480]	; (80027e0 <HAL_I2C_Init+0x280>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0c9b      	lsrs	r3, r3, #18
 8002604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a6a      	ldr	r2, [pc, #424]	; (80027d4 <HAL_I2C_Init+0x274>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d802      	bhi.n	8002634 <HAL_I2C_Init+0xd4>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3301      	adds	r3, #1
 8002632:	e009      	b.n	8002648 <HAL_I2C_Init+0xe8>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <HAL_I2C_Init+0x284>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800265a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	495c      	ldr	r1, [pc, #368]	; (80027d4 <HAL_I2C_Init+0x274>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d819      	bhi.n	800269c <HAL_I2C_Init+0x13c>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fbb1 f3f3 	udiv	r3, r1, r3
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800267c:	400b      	ands	r3, r1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_I2C_Init+0x138>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e59      	subs	r1, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002696:	e051      	b.n	800273c <HAL_I2C_Init+0x1dc>
 8002698:	2304      	movs	r3, #4
 800269a:	e04f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_I2C_Init+0x168>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e012      	b.n	80026ee <HAL_I2C_Init+0x18e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Init+0x196>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e022      	b.n	800273c <HAL_I2C_Init+0x1dc>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10e      	bne.n	800271c <HAL_I2C_Init+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e58      	subs	r0, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271a:	e00f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800276a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6911      	ldr	r1, [r2, #16]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	000186a0 	.word	0x000186a0
 80027d8:	001e847f 	.word	0x001e847f
 80027dc:	003d08ff 	.word	0x003d08ff
 80027e0:	431bde83 	.word	0x431bde83
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	817b      	strh	r3, [r7, #10]
 80027f8:	4613      	mov	r3, r2
 80027fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fb0e 	bl	8001e1c <HAL_GetTick>
 8002800:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	f040 80e0 	bne.w	80029d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2319      	movs	r3, #25
 8002816:	2201      	movs	r2, #1
 8002818:	4970      	ldr	r1, [pc, #448]	; (80029dc <HAL_I2C_Master_Transmit+0x1f4>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fa92 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	e0d3      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_I2C_Master_Transmit+0x50>
 8002834:	2302      	movs	r3, #2
 8002836:	e0cc      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d007      	beq.n	800285e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2210      	movs	r2, #16
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	893a      	ldrh	r2, [r7, #8]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a50      	ldr	r2, [pc, #320]	; (80029e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028a0:	8979      	ldrh	r1, [r7, #10]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	6a3a      	ldr	r2, [r7, #32]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f9ca 	bl	8002c40 <I2C_MasterRequestWrite>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e08d      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028cc:	e066      	b.n	800299c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	6a39      	ldr	r1, [r7, #32]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fb50 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d107      	bne.n	80028f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_I2C_Master_Transmit+0x188>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d017      	beq.n	8002970 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	6a39      	ldr	r1, [r7, #32]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fb47 	bl	8003008 <I2C_WaitOnBTFFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b04      	cmp	r3, #4
 8002986:	d107      	bne.n	8002998 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002996:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e01a      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d194      	bne.n	80028ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	00100002 	.word	0x00100002
 80029e0:	ffff0000 	.word	0xffff0000

080029e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff fa12 	bl	8001e1c <HAL_GetTick>
 80029f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 8111 	bne.w	8002c2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	4988      	ldr	r1, [pc, #544]	; (8002c38 <HAL_I2C_IsDeviceReady+0x254>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f994 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
 8002a24:	e104      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2C_IsDeviceReady+0x50>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0fd      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d007      	beq.n	8002a5a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2224      	movs	r2, #36	; 0x24
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a70      	ldr	r2, [pc, #448]	; (8002c3c <HAL_I2C_IsDeviceReady+0x258>)
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f952 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab4:	d103      	bne.n	8002abe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0b6      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f9a3 	bl	8001e1c <HAL_GetTick>
 8002ad6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b06:	e025      	b.n	8002b54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7ff f988 	bl	8001e1c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <HAL_I2C_IsDeviceReady+0x13a>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22a0      	movs	r2, #160	; 0xa0
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2ba0      	cmp	r3, #160	; 0xa0
 8002b5e:	d005      	beq.n	8002b6c <HAL_I2C_IsDeviceReady+0x188>
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <HAL_I2C_IsDeviceReady+0x188>
 8002b66:	7dbb      	ldrb	r3, [r7, #22]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0cd      	beq.n	8002b08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d129      	bne.n	8002bd6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	2319      	movs	r3, #25
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4921      	ldr	r1, [pc, #132]	; (8002c38 <HAL_I2C_IsDeviceReady+0x254>)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f8c6 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e036      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e02c      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2319      	movs	r3, #25
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	490f      	ldr	r1, [pc, #60]	; (8002c38 <HAL_I2C_IsDeviceReady+0x254>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8a2 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e012      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f4ff af32 	bcc.w	8002a7e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	00100002 	.word	0x00100002
 8002c3c:	ffff0000 	.word	0xffff0000

08002c40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d006      	beq.n	8002c6a <I2C_MasterRequestWrite+0x2a>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d003      	beq.n	8002c6a <I2C_MasterRequestWrite+0x2a>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c68:	d108      	bne.n	8002c7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00b      	b.n	8002c94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	2b12      	cmp	r3, #18
 8002c82:	d107      	bne.n	8002c94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f84f 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d103      	bne.n	8002cc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e035      	b.n	8002d34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd0:	d108      	bne.n	8002ce4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	e01b      	b.n	8002d1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	11db      	asrs	r3, r3, #7
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 0306 	and.w	r3, r3, #6
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f063 030f 	orn	r3, r3, #15
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	490e      	ldr	r1, [pc, #56]	; (8002d3c <I2C_MasterRequestWrite+0xfc>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f898 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e010      	b.n	8002d34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <I2C_MasterRequestWrite+0x100>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f888 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	00010008 	.word	0x00010008
 8002d40:	00010002 	.word	0x00010002

08002d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	e048      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d044      	beq.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7ff f85d 	bl	8001e1c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d139      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	e00c      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d116      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e023      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	e00c      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d093      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e46:	e071      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d123      	bne.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e067      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d041      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe ffb8 	bl	8001e1c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d136      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e00b      	b.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e021      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e00b      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f af6d 	bne.w	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f886 	bl	8003098 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d028      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe ff3d 	bl	8001e1c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d1c3      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f83e 	bl	8003098 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fef5 	bl	8001e1c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d11b      	bne.n	80030e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f043 0204 	orr.w	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003106:	f023 0304 	bic.w	r3, r3, #4
 800310a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003112:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003114:	e002      	b.n	800311c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8003116:	bf40      	sev
    __WFE();
 8003118:	bf20      	wfe
    __WFE();
 800311a:	bf20      	wfe
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e272      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8087 	beq.w	800325a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800314c:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b04      	cmp	r3, #4
 8003156:	d00c      	beq.n	8003172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003158:	4b8f      	ldr	r3, [pc, #572]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d112      	bne.n	800318a <HAL_RCC_OscConfig+0x5e>
 8003164:	4b8c      	ldr	r3, [pc, #560]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d10b      	bne.n	800318a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	4b89      	ldr	r3, [pc, #548]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d06c      	beq.n	8003258 <HAL_RCC_OscConfig+0x12c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d168      	bne.n	8003258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e24c      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x76>
 8003194:	4b80      	ldr	r3, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7f      	ldr	r2, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e02e      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7a      	ldr	r2, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a77      	ldr	r2, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0xbc>
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a71      	ldr	r2, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031e8:	4b6b      	ldr	r3, [pc, #428]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a67      	ldr	r2, [pc, #412]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fe08 	bl	8001e1c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fe04 	bl	8001e1c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e200      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xe4>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fdf4 	bl	8001e1c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fdf0 	bl	8001e1c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1ec      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x10c>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003266:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x18c>
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x176>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1c0      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4939      	ldr	r1, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	e03a      	b.n	800332e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCC_OscConfig+0x270>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fda9 	bl	8001e1c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe fda5 	bl	8001e1c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1a1      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4927      	ldr	r1, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x270>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fd88 	bl	8001e1c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe fd84 	bl	8001e1c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e180      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03a      	beq.n	80033b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d019      	beq.n	8003376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe fd68 	bl	8001e1c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe fd64 	bl	8001e1c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e160      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800336e:	2001      	movs	r0, #1
 8003370:	f000 face 	bl	8003910 <RCC_Delay>
 8003374:	e01c      	b.n	80033b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe fd4e 	bl	8001e1c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7fe fd4a 	bl	8001e1c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d908      	bls.n	80033a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e146      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	42420000 	.word	0x42420000
 80033a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e9      	bne.n	8003384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a6 	beq.w	800350a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]
 80033da:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fd0b 	bl	8001e1c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe fd07 	bl	8001e1c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e103      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x312>
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	e02d      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x334>
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a69      	ldr	r2, [pc, #420]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	e01c      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10c      	bne.n	8003482 <HAL_RCC_OscConfig+0x356>
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a5a      	ldr	r2, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b58      	ldr	r3, [pc, #352]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d015      	beq.n	80034ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fcbb 	bl	8001e1c <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fcb7 	bl	8001e1c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0b1      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ee      	beq.n	80034aa <HAL_RCC_OscConfig+0x37e>
 80034cc:	e014      	b.n	80034f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ce:	f7fe fca5 	bl	8001e1c <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fca1 	bl	8001e1c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e09b      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8087 	beq.w	8003622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d061      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d146      	bne.n	80035b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe fc75 	bl	8001e1c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fc71 	bl	8001e1c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e06d      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d108      	bne.n	8003570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4921      	ldr	r1, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a19      	ldr	r1, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	430b      	orrs	r3, r1
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fe fc45 	bl	8001e1c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fc41 	bl	8001e1c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x46a>
 80035b4:	e035      	b.n	8003622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fc2e 	bl	8001e1c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fc2a 	bl	8001e1c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e026      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x498>
 80035e2:	e01e      	b.n	8003622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e019      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x500>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	4965      	ldr	r1, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d040      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d115      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e073      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4936      	ldr	r1, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fe fb7c 	bl	8001e1c <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe fb78 	bl	8001e1c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e053      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d210      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	4922      	ldr	r1, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1cc>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fada 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	080095fc 	.word	0x080095fc
 80037fc:	20000010 	.word	0x20000010
 8003800:	20000014 	.word	0x20000014

08003804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_GetSysClockFreq+0x94>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b04      	cmp	r3, #4
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x30>
 800382e:	2b08      	cmp	r3, #8
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x36>
 8003832:	e027      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCC_GetSysClockFreq+0x98>)
 8003836:	613b      	str	r3, [r7, #16]
      break;
 8003838:	e027      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0c9b      	lsrs	r3, r3, #18
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003844:	5cd3      	ldrb	r3, [r2, r3]
 8003846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_GetSysClockFreq+0x94>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0c5b      	lsrs	r3, r3, #17
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800385e:	5cd3      	ldrb	r3, [r2, r3]
 8003860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <HAL_RCC_GetSysClockFreq+0x98>)
 8003866:	fb03 f202 	mul.w	r2, r3, r2
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e004      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	613b      	str	r3, [r7, #16]
      break;
 8003882:	e002      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetSysClockFreq+0x98>)
 8003886:	613b      	str	r3, [r7, #16]
      break;
 8003888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388a:	693b      	ldr	r3, [r7, #16]
}
 800388c:	4618      	mov	r0, r3
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	08009614 	.word	0x08009614
 80038a4:	08009624 	.word	0x08009624
 80038a8:	003d0900 	.word	0x003d0900

080038ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <HAL_RCC_GetHCLKFreq+0x10>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	20000010 	.word	0x20000010

080038c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038c4:	f7ff fff2 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	0800960c 	.word	0x0800960c

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038ec:	f7ff ffde 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	0adb      	lsrs	r3, r3, #11
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	0800960c 	.word	0x0800960c

08003910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <RCC_Delay+0x34>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <RCC_Delay+0x38>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0a5b      	lsrs	r3, r3, #9
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800392c:	bf00      	nop
  }
  while (Delay --);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1e5a      	subs	r2, r3, #1
 8003932:	60fa      	str	r2, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f9      	bne.n	800392c <RCC_Delay+0x1c>
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	20000010 	.word	0x20000010
 8003948:	10624dd3 	.word	0x10624dd3

0800394c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e041      	b.n	80039e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe f86a 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f000 f940 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d001      	beq.n	8003a04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_TIM_Base_Start+0x88>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_TIM_Base_Start+0x48>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d009      	beq.n	8003a34 <HAL_TIM_Base_Start+0x48>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_TIM_Base_Start+0x8c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_TIM_Base_Start+0x48>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_TIM_Base_Start+0x90>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d010      	beq.n	8003a68 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	e007      	b.n	8003a68 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800

08003a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e0b4      	b.n	8003c06 <HAL_TIM_ConfigClockSource+0x186>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad4:	d03e      	beq.n	8003b54 <HAL_TIM_ConfigClockSource+0xd4>
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ada:	f200 8087 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae2:	f000 8086 	beq.w	8003bf2 <HAL_TIM_ConfigClockSource+0x172>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	d87f      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b70      	cmp	r3, #112	; 0x70
 8003aee:	d01a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xa6>
 8003af0:	2b70      	cmp	r3, #112	; 0x70
 8003af2:	d87b      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b60      	cmp	r3, #96	; 0x60
 8003af6:	d050      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x11a>
 8003af8:	2b60      	cmp	r3, #96	; 0x60
 8003afa:	d877      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b50      	cmp	r3, #80	; 0x50
 8003afe:	d03c      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0xfa>
 8003b00:	2b50      	cmp	r3, #80	; 0x50
 8003b02:	d873      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d058      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x13a>
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d86f      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b30      	cmp	r3, #48	; 0x30
 8003b0e:	d064      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15a>
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d86b      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d060      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d867      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05c      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d05a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x15a>
 8003b24:	e062      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b36:	f000 f944 	bl	8003dc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	609a      	str	r2, [r3, #8]
      break;
 8003b52:	e04f      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b64:	f000 f92d 	bl	8003dc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b76:	609a      	str	r2, [r3, #8]
      break;
 8003b78:	e03c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f8a4 	bl	8003cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2150      	movs	r1, #80	; 0x50
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f8fb 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003b98:	e02c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 f8c2 	bl	8003d30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2160      	movs	r1, #96	; 0x60
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f8eb 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e01c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 f884 	bl	8003cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f8db 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e00c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 f8d2 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003bea:	e003      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <TIM_Base_SetConfig+0xb8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_Base_SetConfig+0x30>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0x30>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <TIM_Base_SetConfig+0xbc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0x30>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <TIM_Base_SetConfig+0xc0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <TIM_Base_SetConfig+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_Base_SetConfig+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d007      	beq.n	8003c72 <TIM_Base_SetConfig+0x62>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <TIM_Base_SetConfig+0xbc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_Base_SetConfig+0x62>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <TIM_Base_SetConfig+0xc0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <TIM_Base_SetConfig+0xb8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d103      	bne.n	8003cb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800

08003cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f023 030a 	bic.w	r3, r3, #10
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0210 	bic.w	r2, r3, #16
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	031b      	lsls	r3, r3, #12
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f043 0307 	orr.w	r3, r3, #7
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b087      	sub	sp, #28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	021a      	lsls	r2, r3, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	609a      	str	r2, [r3, #8]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e046      	b.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800

08003ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e042      	b.n	8003f54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fdd0 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	; 0x24
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fdc5 	bl	8004a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d16d      	bne.n	8004058 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_UART_Transmit+0x2c>
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e066      	b.n	800405a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2221      	movs	r2, #33	; 0x21
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9a:	f7fd ff3f 	bl	8001e1c <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d108      	bne.n	8003fc8 <HAL_UART_Transmit+0x6c>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e003      	b.n	8003fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd0:	e02a      	b.n	8004028 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fb14 	bl	800460a <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e036      	b.n	800405a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004000:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3302      	adds	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e007      	b.n	800401a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1cf      	bne.n	8003fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	2140      	movs	r1, #64	; 0x40
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fae4 	bl	800460a <UART_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e006      	b.n	800405a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	4613      	mov	r3, r2
 800406e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b20      	cmp	r3, #32
 800407a:	d112      	bne.n	80040a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Receive_IT+0x26>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e00b      	b.n	80040a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	461a      	mov	r2, r3
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fb24 	bl	80046e6 <UART_Start_Receive_IT>
 800409e:	4603      	mov	r3, r0
 80040a0:	e000      	b.n	80040a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0ba      	sub	sp, #232	; 0xe8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10f      	bne.n	8004112 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_UART_IRQHandler+0x66>
 80040fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fc01 	bl	8004912 <UART_Receive_IT>
      return;
 8004110:	e25b      	b.n	80045ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80de 	beq.w	80042d8 <HAL_UART_IRQHandler+0x22c>
 800411c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80d1 	beq.w	80042d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_UART_IRQHandler+0xae>
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_UART_IRQHandler+0xd2>
 8004166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f043 0202 	orr.w	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_UART_IRQHandler+0xf6>
 800418a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <HAL_UART_IRQHandler+0x126>
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f043 0208 	orr.w	r2, r3, #8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 81f2 	beq.w	80045c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_UART_IRQHandler+0x14e>
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fb8c 	bl	8004912 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_UART_IRQHandler+0x17a>
 800421e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d04f      	beq.n	80042c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa96 	bl	8004758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d041      	beq.n	80042be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800426a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800427e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1d9      	bne.n	800423a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d013      	beq.n	80042b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	4a7e      	ldr	r2, [pc, #504]	; (800448c <HAL_UART_IRQHandler+0x3e0>)
 8004294:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd ff34 	bl	8002108 <HAL_DMA_Abort_IT>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b0:	4610      	mov	r0, r2
 80042b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	e00e      	b.n	80042d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f993 	bl	80045e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00a      	b.n	80042d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f98f 	bl	80045e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e006      	b.n	80042d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f98b 	bl	80045e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042d2:	e175      	b.n	80045c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	bf00      	nop
    return;
 80042d6:	e173      	b.n	80045c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 814f 	bne.w	8004580 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8148 	beq.w	8004580 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8141 	beq.w	8004580 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80b6 	beq.w	8004490 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8145 	beq.w	80045c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800433e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004342:	429a      	cmp	r2, r3
 8004344:	f080 813e 	bcs.w	80045c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b20      	cmp	r3, #32
 8004358:	f000 8088 	beq.w	800446c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004388:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800438c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004394:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1d9      	bne.n	800435c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3314      	adds	r3, #20
 80043c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e1      	bne.n	80043a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3314      	adds	r3, #20
 80043ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004408:	66fa      	str	r2, [r7, #108]	; 0x6c
 800440a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800440e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e3      	bne.n	80043e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800443a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443c:	f023 0310 	bic.w	r3, r3, #16
 8004440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800444e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004450:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800445c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fe13 	bl	8002092 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447a:	b29b      	uxth	r3, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8b6 	bl	80045f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004488:	e09c      	b.n	80045c4 <HAL_UART_IRQHandler+0x518>
 800448a:	bf00      	nop
 800448c:	0800481d 	.word	0x0800481d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004498:	b29b      	uxth	r3, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 808e 	beq.w	80045c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8089 	beq.w	80045c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044da:	647a      	str	r2, [r7, #68]	; 0x44
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e3      	bne.n	80044b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	623b      	str	r3, [r7, #32]
   return(result);
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004512:	633a      	str	r2, [r7, #48]	; 0x30
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e3      	bne.n	80044ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	60fb      	str	r3, [r7, #12]
   return(result);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0310 	bic.w	r3, r3, #16
 800454a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004558:	61fa      	str	r2, [r7, #28]
 800455a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	69b9      	ldr	r1, [r7, #24]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	617b      	str	r3, [r7, #20]
   return(result);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e3      	bne.n	8004534 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f83b 	bl	80045f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800457e:	e023      	b.n	80045c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <HAL_UART_IRQHandler+0x4f4>
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f953 	bl	8004844 <UART_Transmit_IT>
    return;
 800459e:	e014      	b.n	80045ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <HAL_UART_IRQHandler+0x51e>
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f992 	bl	80048e2 <UART_EndTransmit_IT>
    return;
 80045be:	e004      	b.n	80045ca <HAL_UART_IRQHandler+0x51e>
    return;
 80045c0:	bf00      	nop
 80045c2:	e002      	b.n	80045ca <HAL_UART_IRQHandler+0x51e>
      return;
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <HAL_UART_IRQHandler+0x51e>
      return;
 80045c8:	bf00      	nop
  }
}
 80045ca:	37e8      	adds	r7, #232	; 0xe8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b090      	sub	sp, #64	; 0x40
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	e050      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d04c      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x30>
 800462a:	f7fd fbf7 	bl	8001e1c <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004636:	429a      	cmp	r2, r3
 8004638:	d241      	bcs.n	80046be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	330c      	adds	r3, #12
 8004658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800465a:	637a      	str	r2, [r7, #52]	; 0x34
 800465c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e5      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468e:	623a      	str	r2, [r7, #32]
 8004690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	69f9      	ldr	r1, [r7, #28]
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	61bb      	str	r3, [r7, #24]
   return(result);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e5      	bne.n	800466e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e00f      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d09f      	beq.n	800461c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3740      	adds	r7, #64	; 0x40
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	4613      	mov	r3, r2
 80046f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2222      	movs	r2, #34	; 0x22
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0220 	orr.w	r2, r2, #32
 800474a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b095      	sub	sp, #84	; 0x54
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004780:	643a      	str	r2, [r7, #64]	; 0x40
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e5      	bne.n	8004760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3314      	adds	r3, #20
 800479a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e5      	bne.n	8004794 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d119      	bne.n	8004804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f0:	61ba      	str	r2, [r7, #24]
 80047f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	613b      	str	r3, [r7, #16]
   return(result);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004812:	bf00      	nop
 8004814:	3754      	adds	r7, #84	; 0x54
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff fed3 	bl	80045e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b21      	cmp	r3, #33	; 0x21
 8004856:	d13e      	bne.n	80048d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d114      	bne.n	800488c <UART_Transmit_IT+0x48>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d110      	bne.n	800488c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800487e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]
 800488a:	e008      	b.n	800489e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	1c59      	adds	r1, r3, #1
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6211      	str	r1, [r2, #32]
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4619      	mov	r1, r3
 80048ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
  }
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fe64 	bl	80045d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b08c      	sub	sp, #48	; 0x30
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b22      	cmp	r3, #34	; 0x22
 8004924:	f040 80ae 	bne.w	8004a84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d117      	bne.n	8004962 <UART_Receive_IT+0x50>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d113      	bne.n	8004962 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004950:	b29a      	uxth	r2, r3
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28
 8004960:	e026      	b.n	80049b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004974:	d007      	beq.n	8004986 <UART_Receive_IT+0x74>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <UART_Receive_IT+0x82>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e008      	b.n	80049a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4619      	mov	r1, r3
 80049be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d15d      	bne.n	8004a80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0220 	bic.w	r2, r2, #32
 80049d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d135      	bne.n	8004a76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	623a      	str	r2, [r7, #32]
 8004a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d10a      	bne.n	8004a68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fdc0 	bl	80045f4 <HAL_UARTEx_RxEventCallback>
 8004a74:	e002      	b.n	8004a7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fed6 	bl	8001828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e002      	b.n	8004a86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3730      	adds	r7, #48	; 0x30
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004aca:	f023 030c 	bic.w	r3, r3, #12
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <UART_SetConfig+0x114>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004af8:	f7fe fef6 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	e002      	b.n	8004b06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7fe fede 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8004b04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009a      	lsls	r2, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <UART_SetConfig+0x118>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	0119      	lsls	r1, r3, #4
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009a      	lsls	r2, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <UART_SetConfig+0x118>)
 8004b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2064      	movs	r0, #100	; 0x64
 8004b46:	fb00 f303 	mul.w	r3, r0, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	3332      	adds	r3, #50	; 0x32
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <UART_SetConfig+0x118>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b5c:	4419      	add	r1, r3
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <UART_SetConfig+0x118>)
 8004b76:	fba3 0302 	umull	r0, r3, r3, r2
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2064      	movs	r0, #100	; 0x64
 8004b7e:	fb00 f303 	mul.w	r3, r0, r3
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	3332      	adds	r3, #50	; 0x32
 8004b88:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <UART_SetConfig+0x118>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	440a      	add	r2, r1
 8004b9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40013800 	.word	0x40013800
 8004ba8:	51eb851f 	.word	0x51eb851f

08004bac <lcd1602_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
void lcd1602_i2c_sendCommand(uint8_t command)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f023 030f 	bic.w	r3, r3, #15
 8004bc2:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8004bc4:	7bbb      	ldrb	r3, [r7, #14]
 8004bc6:	f043 030c 	orr.w	r3, r3, #12
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	723b      	strb	r3, [r7, #8]
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	f043 0308 	orr.w	r3, r3, #8
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	727b      	strb	r3, [r7, #9]
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	f043 030c 	orr.w	r3, r3, #12
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	72bb      	strb	r3, [r7, #10]
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	f043 0308 	orr.w	r3, r3, #8
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <lcd1602_i2c_sendCommand+0x60>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <lcd1602_i2c_sendCommand+0x64>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b299      	uxth	r1, r3
 8004bf6:	f107 0208 	add.w	r2, r7, #8
 8004bfa:	23c8      	movs	r3, #200	; 0xc8
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2304      	movs	r3, #4
 8004c00:	f7fd fdf2 	bl	80027e8 <HAL_I2C_Master_Transmit>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000340 	.word	0x20000340
 8004c10:	20000344 	.word	0x20000344

08004c14 <lcd1602_i2c_sendData>:

void lcd1602_i2c_sendData(uint8_t data)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f023 030f 	bic.w	r3, r3, #15
 8004c2a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8004c2c:	7bbb      	ldrb	r3, [r7, #14]
 8004c2e:	f043 030d 	orr.w	r3, r3, #13
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	723b      	strb	r3, [r7, #8]
 8004c36:	7bbb      	ldrb	r3, [r7, #14]
 8004c38:	f043 0309 	orr.w	r3, r3, #9
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	727b      	strb	r3, [r7, #9]
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	f043 030d 	orr.w	r3, r3, #13
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	72bb      	strb	r3, [r7, #10]
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	f043 0309 	orr.w	r3, r3, #9
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <lcd1602_i2c_sendData+0x60>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <lcd1602_i2c_sendData+0x64>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	f107 0208 	add.w	r2, r7, #8
 8004c62:	23c8      	movs	r3, #200	; 0xc8
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2304      	movs	r3, #4
 8004c68:	f7fd fdbe 	bl	80027e8 <HAL_I2C_Master_Transmit>
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000340 	.word	0x20000340
 8004c78:	20000344 	.word	0x20000344

08004c7c <lcd1602_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd1602_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8004c84:	2032      	movs	r0, #50	; 0x32
 8004c86:	f7fd f8d3 	bl	8001e30 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8004c8a:	4a30      	ldr	r2, [pc, #192]	; (8004d4c <lcd1602_i2c_init+0xd0>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <lcd1602_i2c_init+0xd0>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c98:	2205      	movs	r2, #5
 8004c9a:	214e      	movs	r1, #78	; 0x4e
 8004c9c:	f7fd fea2 	bl	80029e4 <HAL_I2C_IsDeviceReady>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <lcd1602_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <lcd1602_i2c_init+0xd0>)
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004cae:	2205      	movs	r2, #5
 8004cb0:	217e      	movs	r1, #126	; 0x7e
 8004cb2:	f7fd fe97 	bl	80029e4 <HAL_I2C_IsDeviceReady>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <lcd1602_i2c_init+0x44>
    {
      return false;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e040      	b.n	8004d42 <lcd1602_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <lcd1602_i2c_init+0xd4>)
 8004cc2:	227e      	movs	r2, #126	; 0x7e
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e002      	b.n	8004cce <lcd1602_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <lcd1602_i2c_init+0xd4>)
 8004cca:	224e      	movs	r2, #78	; 0x4e
 8004ccc:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8004cce:	202d      	movs	r0, #45	; 0x2d
 8004cd0:	f7fd f8ae 	bl	8001e30 <HAL_Delay>
  //2. Attentions sequence
  lcd1602_i2c_sendCommand(0x30);
 8004cd4:	2030      	movs	r0, #48	; 0x30
 8004cd6:	f7ff ff69 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(5);
 8004cda:	2005      	movs	r0, #5
 8004cdc:	f7fd f8a8 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x30);
 8004ce0:	2030      	movs	r0, #48	; 0x30
 8004ce2:	f7ff ff63 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	f7fd f8a2 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x30);
 8004cec:	2030      	movs	r0, #48	; 0x30
 8004cee:	f7ff ff5d 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(8);
 8004cf2:	2008      	movs	r0, #8
 8004cf4:	f7fd f89c 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x20);
 8004cf8:	2020      	movs	r0, #32
 8004cfa:	f7ff ff57 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(8);
 8004cfe:	2008      	movs	r0, #8
 8004d00:	f7fd f896 	bl	8001e30 <HAL_Delay>

  lcd1602_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8004d04:	2028      	movs	r0, #40	; 0x28
 8004d06:	f7ff ff51 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	f7fd f890 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8004d10:	2008      	movs	r0, #8
 8004d12:	f7ff ff4b 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f7fd f88a 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(LCD_CLEARDISPLAY);
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f7ff ff45 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(3);
 8004d22:	2003      	movs	r0, #3
 8004d24:	f7fd f884 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8004d28:	2006      	movs	r0, #6
 8004d2a:	f7ff ff3f 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f7fd f87e 	bl	8001e30 <HAL_Delay>
  lcd1602_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8004d34:	200c      	movs	r0, #12
 8004d36:	f7ff ff39 	bl	8004bac <lcd1602_i2c_sendCommand>
  HAL_Delay(3);
 8004d3a:	2003      	movs	r0, #3
 8004d3c:	f7fd f878 	bl	8001e30 <HAL_Delay>

  return true;
 8004d40:	2301      	movs	r3, #1
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000340 	.word	0x20000340
 8004d50:	20000344 	.word	0x20000344

08004d54 <lcd1602_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd1602_i2c_setCursor(uint8_t row, uint8_t col)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	460a      	mov	r2, r1
 8004d5e:	71fb      	strb	r3, [r7, #7]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8004d64:	79bb      	ldrb	r3, [r7, #6]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <lcd1602_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d78:	73fb      	strb	r3, [r7, #15]
    lcd1602_i2c_sendCommand(maskData);
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff15 	bl	8004bac <lcd1602_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd1602_i2c_sendCommand(maskData);
  }
}
 8004d82:	e007      	b.n	8004d94 <lcd1602_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004d8a:	73fb      	strb	r3, [r7, #15]
    lcd1602_i2c_sendCommand(maskData);
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff0c 	bl	8004bac <lcd1602_i2c_sendCommand>
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <lcd1602_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd1602_i2c_1stLine(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  lcd1602_i2c_setCursor(0,0);
 8004da0:	2100      	movs	r1, #0
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7ff ffd6 	bl	8004d54 <lcd1602_i2c_setCursor>
}
 8004da8:	bf00      	nop
 8004daa:	bd80      	pop	{r7, pc}

08004dac <lcd1602_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd1602_i2c_2ndLine(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  lcd1602_i2c_setCursor(1,0);
 8004db0:	2100      	movs	r1, #0
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7ff ffce 	bl	8004d54 <lcd1602_i2c_setCursor>
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <lcd1602_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd1602_i2c_printf(const char* str, ...)
{
 8004dbc:	b40f      	push	{r0, r1, r2, r3}
 8004dbe:	b590      	push	{r4, r7, lr}
 8004dc0:	b089      	sub	sp, #36	; 0x24
 8004dc2:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8004dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dc8:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 ffca 	bl	8005d6c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e00a      	b.n	8004df4 <lcd1602_i2c_printf+0x38>
  {
    lcd1602_i2c_sendData((uint8_t)stringArray[i]);
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
 8004de0:	3320      	adds	r3, #32
 8004de2:	443b      	add	r3, r7
 8004de4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff13 	bl	8004c14 <lcd1602_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8004dee:	7ffb      	ldrb	r3, [r7, #31]
 8004df0:	3301      	adds	r3, #1
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	7ffc      	ldrb	r4, [r7, #31]
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb f9a8 	bl	8000150 <strlen>
 8004e00:	4603      	mov	r3, r0
 8004e02:	429c      	cmp	r4, r3
 8004e04:	d202      	bcs.n	8004e0c <lcd1602_i2c_printf+0x50>
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d9e8      	bls.n	8004dde <lcd1602_i2c_printf+0x22>
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3724      	adds	r7, #36	; 0x24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004e16:	b004      	add	sp, #16
 8004e18:	4770      	bx	lr

08004e1a <__cvt>:
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	461f      	mov	r7, r3
 8004e22:	bfbb      	ittet	lt
 8004e24:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e28:	461f      	movlt	r7, r3
 8004e2a:	2300      	movge	r3, #0
 8004e2c:	232d      	movlt	r3, #45	; 0x2d
 8004e2e:	b088      	sub	sp, #32
 8004e30:	4614      	mov	r4, r2
 8004e32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e36:	7013      	strb	r3, [r2, #0]
 8004e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e3a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004e3e:	f023 0820 	bic.w	r8, r3, #32
 8004e42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e46:	d005      	beq.n	8004e54 <__cvt+0x3a>
 8004e48:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e4c:	d100      	bne.n	8004e50 <__cvt+0x36>
 8004e4e:	3501      	adds	r5, #1
 8004e50:	2302      	movs	r3, #2
 8004e52:	e000      	b.n	8004e56 <__cvt+0x3c>
 8004e54:	2303      	movs	r3, #3
 8004e56:	aa07      	add	r2, sp, #28
 8004e58:	9204      	str	r2, [sp, #16]
 8004e5a:	aa06      	add	r2, sp, #24
 8004e5c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e60:	e9cd 3500 	strd	r3, r5, [sp]
 8004e64:	4622      	mov	r2, r4
 8004e66:	463b      	mov	r3, r7
 8004e68:	f001 f8a6 	bl	8005fb8 <_dtoa_r>
 8004e6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e70:	4606      	mov	r6, r0
 8004e72:	d102      	bne.n	8004e7a <__cvt+0x60>
 8004e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e76:	07db      	lsls	r3, r3, #31
 8004e78:	d522      	bpl.n	8004ec0 <__cvt+0xa6>
 8004e7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e7e:	eb06 0905 	add.w	r9, r6, r5
 8004e82:	d110      	bne.n	8004ea6 <__cvt+0x8c>
 8004e84:	7833      	ldrb	r3, [r6, #0]
 8004e86:	2b30      	cmp	r3, #48	; 0x30
 8004e88:	d10a      	bne.n	8004ea0 <__cvt+0x86>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4639      	mov	r1, r7
 8004e92:	f7fb fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8004e96:	b918      	cbnz	r0, 8004ea0 <__cvt+0x86>
 8004e98:	f1c5 0501 	rsb	r5, r5, #1
 8004e9c:	f8ca 5000 	str.w	r5, [sl]
 8004ea0:	f8da 3000 	ldr.w	r3, [sl]
 8004ea4:	4499      	add	r9, r3
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4620      	mov	r0, r4
 8004eac:	4639      	mov	r1, r7
 8004eae:	f7fb fd7b 	bl	80009a8 <__aeabi_dcmpeq>
 8004eb2:	b108      	cbz	r0, 8004eb8 <__cvt+0x9e>
 8004eb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8004eb8:	2230      	movs	r2, #48	; 0x30
 8004eba:	9b07      	ldr	r3, [sp, #28]
 8004ebc:	454b      	cmp	r3, r9
 8004ebe:	d307      	bcc.n	8004ed0 <__cvt+0xb6>
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	9b07      	ldr	r3, [sp, #28]
 8004ec4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ec6:	1b9b      	subs	r3, r3, r6
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	b008      	add	sp, #32
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	1c59      	adds	r1, r3, #1
 8004ed2:	9107      	str	r1, [sp, #28]
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e7f0      	b.n	8004eba <__cvt+0xa0>

08004ed8 <__exponent>:
 8004ed8:	4603      	mov	r3, r0
 8004eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004edc:	2900      	cmp	r1, #0
 8004ede:	f803 2b02 	strb.w	r2, [r3], #2
 8004ee2:	bfb6      	itet	lt
 8004ee4:	222d      	movlt	r2, #45	; 0x2d
 8004ee6:	222b      	movge	r2, #43	; 0x2b
 8004ee8:	4249      	neglt	r1, r1
 8004eea:	2909      	cmp	r1, #9
 8004eec:	7042      	strb	r2, [r0, #1]
 8004eee:	dd2a      	ble.n	8004f46 <__exponent+0x6e>
 8004ef0:	f10d 0207 	add.w	r2, sp, #7
 8004ef4:	4617      	mov	r7, r2
 8004ef6:	260a      	movs	r6, #10
 8004ef8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004efc:	4694      	mov	ip, r2
 8004efe:	fb06 1415 	mls	r4, r6, r5, r1
 8004f02:	3430      	adds	r4, #48	; 0x30
 8004f04:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f08:	460c      	mov	r4, r1
 8004f0a:	2c63      	cmp	r4, #99	; 0x63
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f12:	dcf1      	bgt.n	8004ef8 <__exponent+0x20>
 8004f14:	3130      	adds	r1, #48	; 0x30
 8004f16:	f1ac 0402 	sub.w	r4, ip, #2
 8004f1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f1e:	4622      	mov	r2, r4
 8004f20:	1c41      	adds	r1, r0, #1
 8004f22:	42ba      	cmp	r2, r7
 8004f24:	d30a      	bcc.n	8004f3c <__exponent+0x64>
 8004f26:	f10d 0209 	add.w	r2, sp, #9
 8004f2a:	eba2 020c 	sub.w	r2, r2, ip
 8004f2e:	42bc      	cmp	r4, r7
 8004f30:	bf88      	it	hi
 8004f32:	2200      	movhi	r2, #0
 8004f34:	4413      	add	r3, r2
 8004f36:	1a18      	subs	r0, r3, r0
 8004f38:	b003      	add	sp, #12
 8004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f40:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f44:	e7ed      	b.n	8004f22 <__exponent+0x4a>
 8004f46:	2330      	movs	r3, #48	; 0x30
 8004f48:	3130      	adds	r1, #48	; 0x30
 8004f4a:	7083      	strb	r3, [r0, #2]
 8004f4c:	70c1      	strb	r1, [r0, #3]
 8004f4e:	1d03      	adds	r3, r0, #4
 8004f50:	e7f1      	b.n	8004f36 <__exponent+0x5e>
	...

08004f54 <_printf_float>:
 8004f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f58:	b091      	sub	sp, #68	; 0x44
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f60:	4616      	mov	r6, r2
 8004f62:	461f      	mov	r7, r3
 8004f64:	4605      	mov	r5, r0
 8004f66:	f000 ff13 	bl	8005d90 <_localeconv_r>
 8004f6a:	6803      	ldr	r3, [r0, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f70:	f7fb f8ee 	bl	8000150 <strlen>
 8004f74:	2300      	movs	r3, #0
 8004f76:	930e      	str	r3, [sp, #56]	; 0x38
 8004f78:	f8d8 3000 	ldr.w	r3, [r8]
 8004f7c:	900a      	str	r0, [sp, #40]	; 0x28
 8004f7e:	3307      	adds	r3, #7
 8004f80:	f023 0307 	bic.w	r3, r3, #7
 8004f84:	f103 0208 	add.w	r2, r3, #8
 8004f88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f8c:	f8d4 b000 	ldr.w	fp, [r4]
 8004f90:	f8c8 2000 	str.w	r2, [r8]
 8004f94:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004f98:	4652      	mov	r2, sl
 8004f9a:	4643      	mov	r3, r8
 8004f9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fa0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004faa:	4650      	mov	r0, sl
 8004fac:	4b9c      	ldr	r3, [pc, #624]	; (8005220 <_printf_float+0x2cc>)
 8004fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fb0:	f7fb fd2c 	bl	8000a0c <__aeabi_dcmpun>
 8004fb4:	bb70      	cbnz	r0, 8005014 <_printf_float+0xc0>
 8004fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fba:	4650      	mov	r0, sl
 8004fbc:	4b98      	ldr	r3, [pc, #608]	; (8005220 <_printf_float+0x2cc>)
 8004fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fc0:	f7fb fd06 	bl	80009d0 <__aeabi_dcmple>
 8004fc4:	bb30      	cbnz	r0, 8005014 <_printf_float+0xc0>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4650      	mov	r0, sl
 8004fcc:	4641      	mov	r1, r8
 8004fce:	f7fb fcf5 	bl	80009bc <__aeabi_dcmplt>
 8004fd2:	b110      	cbz	r0, 8004fda <_printf_float+0x86>
 8004fd4:	232d      	movs	r3, #45	; 0x2d
 8004fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fda:	4a92      	ldr	r2, [pc, #584]	; (8005224 <_printf_float+0x2d0>)
 8004fdc:	4b92      	ldr	r3, [pc, #584]	; (8005228 <_printf_float+0x2d4>)
 8004fde:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004fe2:	bf94      	ite	ls
 8004fe4:	4690      	movls	r8, r2
 8004fe6:	4698      	movhi	r8, r3
 8004fe8:	2303      	movs	r3, #3
 8004fea:	f04f 0a00 	mov.w	sl, #0
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	f02b 0304 	bic.w	r3, fp, #4
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	4633      	mov	r3, r6
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	9700      	str	r7, [sp, #0]
 8004ffe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005000:	f000 f9d6 	bl	80053b0 <_printf_common>
 8005004:	3001      	adds	r0, #1
 8005006:	f040 8090 	bne.w	800512a <_printf_float+0x1d6>
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	b011      	add	sp, #68	; 0x44
 8005010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005014:	4652      	mov	r2, sl
 8005016:	4643      	mov	r3, r8
 8005018:	4650      	mov	r0, sl
 800501a:	4641      	mov	r1, r8
 800501c:	f7fb fcf6 	bl	8000a0c <__aeabi_dcmpun>
 8005020:	b148      	cbz	r0, 8005036 <_printf_float+0xe2>
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	bfb8      	it	lt
 8005028:	232d      	movlt	r3, #45	; 0x2d
 800502a:	4a80      	ldr	r2, [pc, #512]	; (800522c <_printf_float+0x2d8>)
 800502c:	bfb8      	it	lt
 800502e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005032:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <_printf_float+0x2dc>)
 8005034:	e7d3      	b.n	8004fde <_printf_float+0x8a>
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	d142      	bne.n	80050c6 <_printf_float+0x172>
 8005040:	2306      	movs	r3, #6
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	9206      	str	r2, [sp, #24]
 8005048:	aa0e      	add	r2, sp, #56	; 0x38
 800504a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800504e:	aa0d      	add	r2, sp, #52	; 0x34
 8005050:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005054:	9203      	str	r2, [sp, #12]
 8005056:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800505a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	6863      	ldr	r3, [r4, #4]
 8005062:	4652      	mov	r2, sl
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4628      	mov	r0, r5
 8005068:	4643      	mov	r3, r8
 800506a:	910b      	str	r1, [sp, #44]	; 0x2c
 800506c:	f7ff fed5 	bl	8004e1a <__cvt>
 8005070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005072:	4680      	mov	r8, r0
 8005074:	2947      	cmp	r1, #71	; 0x47
 8005076:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005078:	d108      	bne.n	800508c <_printf_float+0x138>
 800507a:	1cc8      	adds	r0, r1, #3
 800507c:	db02      	blt.n	8005084 <_printf_float+0x130>
 800507e:	6863      	ldr	r3, [r4, #4]
 8005080:	4299      	cmp	r1, r3
 8005082:	dd40      	ble.n	8005106 <_printf_float+0x1b2>
 8005084:	f1a9 0902 	sub.w	r9, r9, #2
 8005088:	fa5f f989 	uxtb.w	r9, r9
 800508c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005090:	d81f      	bhi.n	80050d2 <_printf_float+0x17e>
 8005092:	464a      	mov	r2, r9
 8005094:	3901      	subs	r1, #1
 8005096:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800509a:	910d      	str	r1, [sp, #52]	; 0x34
 800509c:	f7ff ff1c 	bl	8004ed8 <__exponent>
 80050a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050a2:	4682      	mov	sl, r0
 80050a4:	1813      	adds	r3, r2, r0
 80050a6:	2a01      	cmp	r2, #1
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	dc02      	bgt.n	80050b2 <_printf_float+0x15e>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	07d2      	lsls	r2, r2, #31
 80050b0:	d501      	bpl.n	80050b6 <_printf_float+0x162>
 80050b2:	3301      	adds	r3, #1
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d09b      	beq.n	8004ff6 <_printf_float+0xa2>
 80050be:	232d      	movs	r3, #45	; 0x2d
 80050c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c4:	e797      	b.n	8004ff6 <_printf_float+0xa2>
 80050c6:	2947      	cmp	r1, #71	; 0x47
 80050c8:	d1bc      	bne.n	8005044 <_printf_float+0xf0>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ba      	bne.n	8005044 <_printf_float+0xf0>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7b7      	b.n	8005042 <_printf_float+0xee>
 80050d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80050d6:	d118      	bne.n	800510a <_printf_float+0x1b6>
 80050d8:	2900      	cmp	r1, #0
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	dd0b      	ble.n	80050f6 <_printf_float+0x1a2>
 80050de:	6121      	str	r1, [r4, #16]
 80050e0:	b913      	cbnz	r3, 80050e8 <_printf_float+0x194>
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	07d0      	lsls	r0, r2, #31
 80050e6:	d502      	bpl.n	80050ee <_printf_float+0x19a>
 80050e8:	3301      	adds	r3, #1
 80050ea:	440b      	add	r3, r1
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	f04f 0a00 	mov.w	sl, #0
 80050f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80050f4:	e7df      	b.n	80050b6 <_printf_float+0x162>
 80050f6:	b913      	cbnz	r3, 80050fe <_printf_float+0x1aa>
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	07d2      	lsls	r2, r2, #31
 80050fc:	d501      	bpl.n	8005102 <_printf_float+0x1ae>
 80050fe:	3302      	adds	r3, #2
 8005100:	e7f4      	b.n	80050ec <_printf_float+0x198>
 8005102:	2301      	movs	r3, #1
 8005104:	e7f2      	b.n	80050ec <_printf_float+0x198>
 8005106:	f04f 0967 	mov.w	r9, #103	; 0x67
 800510a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800510c:	4299      	cmp	r1, r3
 800510e:	db05      	blt.n	800511c <_printf_float+0x1c8>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	6121      	str	r1, [r4, #16]
 8005114:	07d8      	lsls	r0, r3, #31
 8005116:	d5ea      	bpl.n	80050ee <_printf_float+0x19a>
 8005118:	1c4b      	adds	r3, r1, #1
 800511a:	e7e7      	b.n	80050ec <_printf_float+0x198>
 800511c:	2900      	cmp	r1, #0
 800511e:	bfcc      	ite	gt
 8005120:	2201      	movgt	r2, #1
 8005122:	f1c1 0202 	rsble	r2, r1, #2
 8005126:	4413      	add	r3, r2
 8005128:	e7e0      	b.n	80050ec <_printf_float+0x198>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	055a      	lsls	r2, r3, #21
 800512e:	d407      	bmi.n	8005140 <_printf_float+0x1ec>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	4642      	mov	r2, r8
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	d12b      	bne.n	8005196 <_printf_float+0x242>
 800513e:	e764      	b.n	800500a <_printf_float+0xb6>
 8005140:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005144:	f240 80dd 	bls.w	8005302 <_printf_float+0x3ae>
 8005148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f7fb fc2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005154:	2800      	cmp	r0, #0
 8005156:	d033      	beq.n	80051c0 <_printf_float+0x26c>
 8005158:	2301      	movs	r3, #1
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <_printf_float+0x2e0>)
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f af51 	beq.w	800500a <_printf_float+0xb6>
 8005168:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800516c:	429a      	cmp	r2, r3
 800516e:	db02      	blt.n	8005176 <_printf_float+0x222>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07d8      	lsls	r0, r3, #31
 8005174:	d50f      	bpl.n	8005196 <_printf_float+0x242>
 8005176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	f43f af42 	beq.w	800500a <_printf_float+0xb6>
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	f104 091a 	add.w	r9, r4, #26
 800518e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005190:	3b01      	subs	r3, #1
 8005192:	4543      	cmp	r3, r8
 8005194:	dc09      	bgt.n	80051aa <_printf_float+0x256>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	079b      	lsls	r3, r3, #30
 800519a:	f100 8104 	bmi.w	80053a6 <_printf_float+0x452>
 800519e:	68e0      	ldr	r0, [r4, #12]
 80051a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051a2:	4298      	cmp	r0, r3
 80051a4:	bfb8      	it	lt
 80051a6:	4618      	movlt	r0, r3
 80051a8:	e731      	b.n	800500e <_printf_float+0xba>
 80051aa:	2301      	movs	r3, #1
 80051ac:	464a      	mov	r2, r9
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b8      	blx	r7
 80051b4:	3001      	adds	r0, #1
 80051b6:	f43f af28 	beq.w	800500a <_printf_float+0xb6>
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	e7e6      	b.n	800518e <_printf_float+0x23a>
 80051c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dc38      	bgt.n	8005238 <_printf_float+0x2e4>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <_printf_float+0x2e0>)
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f af1a 	beq.w	800500a <_printf_float+0xb6>
 80051d6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80051da:	4313      	orrs	r3, r2
 80051dc:	d102      	bne.n	80051e4 <_printf_float+0x290>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	07d9      	lsls	r1, r3, #31
 80051e2:	d5d8      	bpl.n	8005196 <_printf_float+0x242>
 80051e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	f43f af0b 	beq.w	800500a <_printf_float+0xb6>
 80051f4:	f04f 0900 	mov.w	r9, #0
 80051f8:	f104 0a1a 	add.w	sl, r4, #26
 80051fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051fe:	425b      	negs	r3, r3
 8005200:	454b      	cmp	r3, r9
 8005202:	dc01      	bgt.n	8005208 <_printf_float+0x2b4>
 8005204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005206:	e794      	b.n	8005132 <_printf_float+0x1de>
 8005208:	2301      	movs	r3, #1
 800520a:	4652      	mov	r2, sl
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f aef9 	beq.w	800500a <_printf_float+0xb6>
 8005218:	f109 0901 	add.w	r9, r9, #1
 800521c:	e7ee      	b.n	80051fc <_printf_float+0x2a8>
 800521e:	bf00      	nop
 8005220:	7fefffff 	.word	0x7fefffff
 8005224:	08009626 	.word	0x08009626
 8005228:	0800962a 	.word	0x0800962a
 800522c:	0800962e 	.word	0x0800962e
 8005230:	08009632 	.word	0x08009632
 8005234:	08009636 	.word	0x08009636
 8005238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800523a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800523c:	429a      	cmp	r2, r3
 800523e:	bfa8      	it	ge
 8005240:	461a      	movge	r2, r3
 8005242:	2a00      	cmp	r2, #0
 8005244:	4691      	mov	r9, r2
 8005246:	dc37      	bgt.n	80052b8 <_printf_float+0x364>
 8005248:	f04f 0b00 	mov.w	fp, #0
 800524c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005250:	f104 021a 	add.w	r2, r4, #26
 8005254:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005258:	ebaa 0309 	sub.w	r3, sl, r9
 800525c:	455b      	cmp	r3, fp
 800525e:	dc33      	bgt.n	80052c8 <_printf_float+0x374>
 8005260:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005264:	429a      	cmp	r2, r3
 8005266:	db3b      	blt.n	80052e0 <_printf_float+0x38c>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	07da      	lsls	r2, r3, #31
 800526c:	d438      	bmi.n	80052e0 <_printf_float+0x38c>
 800526e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005272:	eba2 0903 	sub.w	r9, r2, r3
 8005276:	eba2 020a 	sub.w	r2, r2, sl
 800527a:	4591      	cmp	r9, r2
 800527c:	bfa8      	it	ge
 800527e:	4691      	movge	r9, r2
 8005280:	f1b9 0f00 	cmp.w	r9, #0
 8005284:	dc34      	bgt.n	80052f0 <_printf_float+0x39c>
 8005286:	f04f 0800 	mov.w	r8, #0
 800528a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800528e:	f104 0a1a 	add.w	sl, r4, #26
 8005292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	eba3 0309 	sub.w	r3, r3, r9
 800529c:	4543      	cmp	r3, r8
 800529e:	f77f af7a 	ble.w	8005196 <_printf_float+0x242>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4652      	mov	r2, sl
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f aeac 	beq.w	800500a <_printf_float+0xb6>
 80052b2:	f108 0801 	add.w	r8, r8, #1
 80052b6:	e7ec      	b.n	8005292 <_printf_float+0x33e>
 80052b8:	4613      	mov	r3, r2
 80052ba:	4631      	mov	r1, r6
 80052bc:	4642      	mov	r2, r8
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	d1c0      	bne.n	8005248 <_printf_float+0x2f4>
 80052c6:	e6a0      	b.n	800500a <_printf_float+0xb6>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	f43f ae99 	beq.w	800500a <_printf_float+0xb6>
 80052d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052da:	f10b 0b01 	add.w	fp, fp, #1
 80052de:	e7b9      	b.n	8005254 <_printf_float+0x300>
 80052e0:	4631      	mov	r1, r6
 80052e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	d1bf      	bne.n	800526e <_printf_float+0x31a>
 80052ee:	e68c      	b.n	800500a <_printf_float+0xb6>
 80052f0:	464b      	mov	r3, r9
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	eb08 020a 	add.w	r2, r8, sl
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	d1c2      	bne.n	8005286 <_printf_float+0x332>
 8005300:	e683      	b.n	800500a <_printf_float+0xb6>
 8005302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005304:	2a01      	cmp	r2, #1
 8005306:	dc01      	bgt.n	800530c <_printf_float+0x3b8>
 8005308:	07db      	lsls	r3, r3, #31
 800530a:	d539      	bpl.n	8005380 <_printf_float+0x42c>
 800530c:	2301      	movs	r3, #1
 800530e:	4642      	mov	r2, r8
 8005310:	4631      	mov	r1, r6
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	f43f ae77 	beq.w	800500a <_printf_float+0xb6>
 800531c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f ae6f 	beq.w	800500a <_printf_float+0xb6>
 800532c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005330:	2200      	movs	r2, #0
 8005332:	2300      	movs	r3, #0
 8005334:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005338:	f7fb fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800533c:	b9d8      	cbnz	r0, 8005376 <_printf_float+0x422>
 800533e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005342:	f108 0201 	add.w	r2, r8, #1
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	d10e      	bne.n	800536e <_printf_float+0x41a>
 8005350:	e65b      	b.n	800500a <_printf_float+0xb6>
 8005352:	2301      	movs	r3, #1
 8005354:	464a      	mov	r2, r9
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	f43f ae54 	beq.w	800500a <_printf_float+0xb6>
 8005362:	f108 0801 	add.w	r8, r8, #1
 8005366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005368:	3b01      	subs	r3, #1
 800536a:	4543      	cmp	r3, r8
 800536c:	dcf1      	bgt.n	8005352 <_printf_float+0x3fe>
 800536e:	4653      	mov	r3, sl
 8005370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005374:	e6de      	b.n	8005134 <_printf_float+0x1e0>
 8005376:	f04f 0800 	mov.w	r8, #0
 800537a:	f104 091a 	add.w	r9, r4, #26
 800537e:	e7f2      	b.n	8005366 <_printf_float+0x412>
 8005380:	2301      	movs	r3, #1
 8005382:	4642      	mov	r2, r8
 8005384:	e7df      	b.n	8005346 <_printf_float+0x3f2>
 8005386:	2301      	movs	r3, #1
 8005388:	464a      	mov	r2, r9
 800538a:	4631      	mov	r1, r6
 800538c:	4628      	mov	r0, r5
 800538e:	47b8      	blx	r7
 8005390:	3001      	adds	r0, #1
 8005392:	f43f ae3a 	beq.w	800500a <_printf_float+0xb6>
 8005396:	f108 0801 	add.w	r8, r8, #1
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800539e:	1a5b      	subs	r3, r3, r1
 80053a0:	4543      	cmp	r3, r8
 80053a2:	dcf0      	bgt.n	8005386 <_printf_float+0x432>
 80053a4:	e6fb      	b.n	800519e <_printf_float+0x24a>
 80053a6:	f04f 0800 	mov.w	r8, #0
 80053aa:	f104 0919 	add.w	r9, r4, #25
 80053ae:	e7f4      	b.n	800539a <_printf_float+0x446>

080053b0 <_printf_common>:
 80053b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b4:	4616      	mov	r6, r2
 80053b6:	4699      	mov	r9, r3
 80053b8:	688a      	ldr	r2, [r1, #8]
 80053ba:	690b      	ldr	r3, [r1, #16]
 80053bc:	4607      	mov	r7, r0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfb8      	it	lt
 80053c2:	4613      	movlt	r3, r2
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ca:	460c      	mov	r4, r1
 80053cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d0:	b10a      	cbz	r2, 80053d6 <_printf_common+0x26>
 80053d2:	3301      	adds	r3, #1
 80053d4:	6033      	str	r3, [r6, #0]
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	0699      	lsls	r1, r3, #26
 80053da:	bf42      	ittt	mi
 80053dc:	6833      	ldrmi	r3, [r6, #0]
 80053de:	3302      	addmi	r3, #2
 80053e0:	6033      	strmi	r3, [r6, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	f015 0506 	ands.w	r5, r5, #6
 80053e8:	d106      	bne.n	80053f8 <_printf_common+0x48>
 80053ea:	f104 0a19 	add.w	sl, r4, #25
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	6832      	ldr	r2, [r6, #0]
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	dc2b      	bgt.n	8005450 <_printf_common+0xa0>
 80053f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053fc:	1e13      	subs	r3, r2, #0
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	bf18      	it	ne
 8005402:	2301      	movne	r3, #1
 8005404:	0692      	lsls	r2, r2, #26
 8005406:	d430      	bmi.n	800546a <_printf_common+0xba>
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005410:	47c0      	blx	r8
 8005412:	3001      	adds	r0, #1
 8005414:	d023      	beq.n	800545e <_printf_common+0xae>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	6922      	ldr	r2, [r4, #16]
 800541a:	f003 0306 	and.w	r3, r3, #6
 800541e:	2b04      	cmp	r3, #4
 8005420:	bf14      	ite	ne
 8005422:	2500      	movne	r5, #0
 8005424:	6833      	ldreq	r3, [r6, #0]
 8005426:	f04f 0600 	mov.w	r6, #0
 800542a:	bf08      	it	eq
 800542c:	68e5      	ldreq	r5, [r4, #12]
 800542e:	f104 041a 	add.w	r4, r4, #26
 8005432:	bf08      	it	eq
 8005434:	1aed      	subeq	r5, r5, r3
 8005436:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800543a:	bf08      	it	eq
 800543c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005440:	4293      	cmp	r3, r2
 8005442:	bfc4      	itt	gt
 8005444:	1a9b      	subgt	r3, r3, r2
 8005446:	18ed      	addgt	r5, r5, r3
 8005448:	42b5      	cmp	r5, r6
 800544a:	d11a      	bne.n	8005482 <_printf_common+0xd2>
 800544c:	2000      	movs	r0, #0
 800544e:	e008      	b.n	8005462 <_printf_common+0xb2>
 8005450:	2301      	movs	r3, #1
 8005452:	4652      	mov	r2, sl
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d103      	bne.n	8005466 <_printf_common+0xb6>
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005466:	3501      	adds	r5, #1
 8005468:	e7c1      	b.n	80053ee <_printf_common+0x3e>
 800546a:	2030      	movs	r0, #48	; 0x30
 800546c:	18e1      	adds	r1, r4, r3
 800546e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005478:	4422      	add	r2, r4
 800547a:	3302      	adds	r3, #2
 800547c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005480:	e7c2      	b.n	8005408 <_printf_common+0x58>
 8005482:	2301      	movs	r3, #1
 8005484:	4622      	mov	r2, r4
 8005486:	4649      	mov	r1, r9
 8005488:	4638      	mov	r0, r7
 800548a:	47c0      	blx	r8
 800548c:	3001      	adds	r0, #1
 800548e:	d0e6      	beq.n	800545e <_printf_common+0xae>
 8005490:	3601      	adds	r6, #1
 8005492:	e7d9      	b.n	8005448 <_printf_common+0x98>

08005494 <_printf_i>:
 8005494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	7e0f      	ldrb	r7, [r1, #24]
 800549a:	4691      	mov	r9, r2
 800549c:	2f78      	cmp	r7, #120	; 0x78
 800549e:	4680      	mov	r8, r0
 80054a0:	460c      	mov	r4, r1
 80054a2:	469a      	mov	sl, r3
 80054a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054aa:	d807      	bhi.n	80054bc <_printf_i+0x28>
 80054ac:	2f62      	cmp	r7, #98	; 0x62
 80054ae:	d80a      	bhi.n	80054c6 <_printf_i+0x32>
 80054b0:	2f00      	cmp	r7, #0
 80054b2:	f000 80d5 	beq.w	8005660 <_printf_i+0x1cc>
 80054b6:	2f58      	cmp	r7, #88	; 0x58
 80054b8:	f000 80c1 	beq.w	800563e <_printf_i+0x1aa>
 80054bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054c4:	e03a      	b.n	800553c <_printf_i+0xa8>
 80054c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ca:	2b15      	cmp	r3, #21
 80054cc:	d8f6      	bhi.n	80054bc <_printf_i+0x28>
 80054ce:	a101      	add	r1, pc, #4	; (adr r1, 80054d4 <_printf_i+0x40>)
 80054d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054d4:	0800552d 	.word	0x0800552d
 80054d8:	08005541 	.word	0x08005541
 80054dc:	080054bd 	.word	0x080054bd
 80054e0:	080054bd 	.word	0x080054bd
 80054e4:	080054bd 	.word	0x080054bd
 80054e8:	080054bd 	.word	0x080054bd
 80054ec:	08005541 	.word	0x08005541
 80054f0:	080054bd 	.word	0x080054bd
 80054f4:	080054bd 	.word	0x080054bd
 80054f8:	080054bd 	.word	0x080054bd
 80054fc:	080054bd 	.word	0x080054bd
 8005500:	08005647 	.word	0x08005647
 8005504:	0800556d 	.word	0x0800556d
 8005508:	08005601 	.word	0x08005601
 800550c:	080054bd 	.word	0x080054bd
 8005510:	080054bd 	.word	0x080054bd
 8005514:	08005669 	.word	0x08005669
 8005518:	080054bd 	.word	0x080054bd
 800551c:	0800556d 	.word	0x0800556d
 8005520:	080054bd 	.word	0x080054bd
 8005524:	080054bd 	.word	0x080054bd
 8005528:	08005609 	.word	0x08005609
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	1d1a      	adds	r2, r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	602a      	str	r2, [r5, #0]
 8005534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800553c:	2301      	movs	r3, #1
 800553e:	e0a0      	b.n	8005682 <_printf_i+0x1ee>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	0607      	lsls	r7, r0, #24
 8005546:	f103 0104 	add.w	r1, r3, #4
 800554a:	6029      	str	r1, [r5, #0]
 800554c:	d501      	bpl.n	8005552 <_printf_i+0xbe>
 800554e:	681e      	ldr	r6, [r3, #0]
 8005550:	e003      	b.n	800555a <_printf_i+0xc6>
 8005552:	0646      	lsls	r6, r0, #25
 8005554:	d5fb      	bpl.n	800554e <_printf_i+0xba>
 8005556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800555a:	2e00      	cmp	r6, #0
 800555c:	da03      	bge.n	8005566 <_printf_i+0xd2>
 800555e:	232d      	movs	r3, #45	; 0x2d
 8005560:	4276      	negs	r6, r6
 8005562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005566:	230a      	movs	r3, #10
 8005568:	4859      	ldr	r0, [pc, #356]	; (80056d0 <_printf_i+0x23c>)
 800556a:	e012      	b.n	8005592 <_printf_i+0xfe>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	1d19      	adds	r1, r3, #4
 8005572:	6029      	str	r1, [r5, #0]
 8005574:	0605      	lsls	r5, r0, #24
 8005576:	d501      	bpl.n	800557c <_printf_i+0xe8>
 8005578:	681e      	ldr	r6, [r3, #0]
 800557a:	e002      	b.n	8005582 <_printf_i+0xee>
 800557c:	0641      	lsls	r1, r0, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0xe4>
 8005580:	881e      	ldrh	r6, [r3, #0]
 8005582:	2f6f      	cmp	r7, #111	; 0x6f
 8005584:	bf0c      	ite	eq
 8005586:	2308      	moveq	r3, #8
 8005588:	230a      	movne	r3, #10
 800558a:	4851      	ldr	r0, [pc, #324]	; (80056d0 <_printf_i+0x23c>)
 800558c:	2100      	movs	r1, #0
 800558e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005592:	6865      	ldr	r5, [r4, #4]
 8005594:	2d00      	cmp	r5, #0
 8005596:	bfa8      	it	ge
 8005598:	6821      	ldrge	r1, [r4, #0]
 800559a:	60a5      	str	r5, [r4, #8]
 800559c:	bfa4      	itt	ge
 800559e:	f021 0104 	bicge.w	r1, r1, #4
 80055a2:	6021      	strge	r1, [r4, #0]
 80055a4:	b90e      	cbnz	r6, 80055aa <_printf_i+0x116>
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	d04b      	beq.n	8005642 <_printf_i+0x1ae>
 80055aa:	4615      	mov	r5, r2
 80055ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80055b0:	fb03 6711 	mls	r7, r3, r1, r6
 80055b4:	5dc7      	ldrb	r7, [r0, r7]
 80055b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055ba:	4637      	mov	r7, r6
 80055bc:	42bb      	cmp	r3, r7
 80055be:	460e      	mov	r6, r1
 80055c0:	d9f4      	bls.n	80055ac <_printf_i+0x118>
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d10b      	bne.n	80055de <_printf_i+0x14a>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	07de      	lsls	r6, r3, #31
 80055ca:	d508      	bpl.n	80055de <_printf_i+0x14a>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	6861      	ldr	r1, [r4, #4]
 80055d0:	4299      	cmp	r1, r3
 80055d2:	bfde      	ittt	le
 80055d4:	2330      	movle	r3, #48	; 0x30
 80055d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055de:	1b52      	subs	r2, r2, r5
 80055e0:	6122      	str	r2, [r4, #16]
 80055e2:	464b      	mov	r3, r9
 80055e4:	4621      	mov	r1, r4
 80055e6:	4640      	mov	r0, r8
 80055e8:	f8cd a000 	str.w	sl, [sp]
 80055ec:	aa03      	add	r2, sp, #12
 80055ee:	f7ff fedf 	bl	80053b0 <_printf_common>
 80055f2:	3001      	adds	r0, #1
 80055f4:	d14a      	bne.n	800568c <_printf_i+0x1f8>
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	b004      	add	sp, #16
 80055fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	f043 0320 	orr.w	r3, r3, #32
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	2778      	movs	r7, #120	; 0x78
 800560a:	4832      	ldr	r0, [pc, #200]	; (80056d4 <_printf_i+0x240>)
 800560c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	6829      	ldr	r1, [r5, #0]
 8005614:	061f      	lsls	r7, r3, #24
 8005616:	f851 6b04 	ldr.w	r6, [r1], #4
 800561a:	d402      	bmi.n	8005622 <_printf_i+0x18e>
 800561c:	065f      	lsls	r7, r3, #25
 800561e:	bf48      	it	mi
 8005620:	b2b6      	uxthmi	r6, r6
 8005622:	07df      	lsls	r7, r3, #31
 8005624:	bf48      	it	mi
 8005626:	f043 0320 	orrmi.w	r3, r3, #32
 800562a:	6029      	str	r1, [r5, #0]
 800562c:	bf48      	it	mi
 800562e:	6023      	strmi	r3, [r4, #0]
 8005630:	b91e      	cbnz	r6, 800563a <_printf_i+0x1a6>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	f023 0320 	bic.w	r3, r3, #32
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	2310      	movs	r3, #16
 800563c:	e7a6      	b.n	800558c <_printf_i+0xf8>
 800563e:	4824      	ldr	r0, [pc, #144]	; (80056d0 <_printf_i+0x23c>)
 8005640:	e7e4      	b.n	800560c <_printf_i+0x178>
 8005642:	4615      	mov	r5, r2
 8005644:	e7bd      	b.n	80055c2 <_printf_i+0x12e>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	6826      	ldr	r6, [r4, #0]
 800564a:	1d18      	adds	r0, r3, #4
 800564c:	6961      	ldr	r1, [r4, #20]
 800564e:	6028      	str	r0, [r5, #0]
 8005650:	0635      	lsls	r5, r6, #24
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	d501      	bpl.n	800565a <_printf_i+0x1c6>
 8005656:	6019      	str	r1, [r3, #0]
 8005658:	e002      	b.n	8005660 <_printf_i+0x1cc>
 800565a:	0670      	lsls	r0, r6, #25
 800565c:	d5fb      	bpl.n	8005656 <_printf_i+0x1c2>
 800565e:	8019      	strh	r1, [r3, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	4615      	mov	r5, r2
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	e7bc      	b.n	80055e2 <_printf_i+0x14e>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	2100      	movs	r1, #0
 800566c:	1d1a      	adds	r2, r3, #4
 800566e:	602a      	str	r2, [r5, #0]
 8005670:	681d      	ldr	r5, [r3, #0]
 8005672:	6862      	ldr	r2, [r4, #4]
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fc02 	bl	8005e7e <memchr>
 800567a:	b108      	cbz	r0, 8005680 <_printf_i+0x1ec>
 800567c:	1b40      	subs	r0, r0, r5
 800567e:	6060      	str	r0, [r4, #4]
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	2300      	movs	r3, #0
 8005686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568a:	e7aa      	b.n	80055e2 <_printf_i+0x14e>
 800568c:	462a      	mov	r2, r5
 800568e:	4649      	mov	r1, r9
 8005690:	4640      	mov	r0, r8
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	47d0      	blx	sl
 8005696:	3001      	adds	r0, #1
 8005698:	d0ad      	beq.n	80055f6 <_printf_i+0x162>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	079b      	lsls	r3, r3, #30
 800569e:	d413      	bmi.n	80056c8 <_printf_i+0x234>
 80056a0:	68e0      	ldr	r0, [r4, #12]
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	4298      	cmp	r0, r3
 80056a6:	bfb8      	it	lt
 80056a8:	4618      	movlt	r0, r3
 80056aa:	e7a6      	b.n	80055fa <_printf_i+0x166>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4632      	mov	r2, r6
 80056b0:	4649      	mov	r1, r9
 80056b2:	4640      	mov	r0, r8
 80056b4:	47d0      	blx	sl
 80056b6:	3001      	adds	r0, #1
 80056b8:	d09d      	beq.n	80055f6 <_printf_i+0x162>
 80056ba:	3501      	adds	r5, #1
 80056bc:	68e3      	ldr	r3, [r4, #12]
 80056be:	9903      	ldr	r1, [sp, #12]
 80056c0:	1a5b      	subs	r3, r3, r1
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	dcf2      	bgt.n	80056ac <_printf_i+0x218>
 80056c6:	e7eb      	b.n	80056a0 <_printf_i+0x20c>
 80056c8:	2500      	movs	r5, #0
 80056ca:	f104 0619 	add.w	r6, r4, #25
 80056ce:	e7f5      	b.n	80056bc <_printf_i+0x228>
 80056d0:	08009638 	.word	0x08009638
 80056d4:	08009649 	.word	0x08009649

080056d8 <_scanf_float>:
 80056d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	b087      	sub	sp, #28
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	688b      	ldr	r3, [r1, #8]
 80056e2:	4617      	mov	r7, r2
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80056ea:	bf85      	ittet	hi
 80056ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80056f0:	195b      	addhi	r3, r3, r5
 80056f2:	2300      	movls	r3, #0
 80056f4:	9302      	strhi	r3, [sp, #8]
 80056f6:	bf88      	it	hi
 80056f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056fc:	468b      	mov	fp, r1
 80056fe:	f04f 0500 	mov.w	r5, #0
 8005702:	bf8c      	ite	hi
 8005704:	608b      	strhi	r3, [r1, #8]
 8005706:	9302      	strls	r3, [sp, #8]
 8005708:	680b      	ldr	r3, [r1, #0]
 800570a:	4680      	mov	r8, r0
 800570c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005710:	f84b 3b1c 	str.w	r3, [fp], #28
 8005714:	460c      	mov	r4, r1
 8005716:	465e      	mov	r6, fp
 8005718:	46aa      	mov	sl, r5
 800571a:	46a9      	mov	r9, r5
 800571c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005720:	9501      	str	r5, [sp, #4]
 8005722:	68a2      	ldr	r2, [r4, #8]
 8005724:	b152      	cbz	r2, 800573c <_scanf_float+0x64>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b4e      	cmp	r3, #78	; 0x4e
 800572c:	d864      	bhi.n	80057f8 <_scanf_float+0x120>
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d83c      	bhi.n	80057ac <_scanf_float+0xd4>
 8005732:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005736:	b2c8      	uxtb	r0, r1
 8005738:	280e      	cmp	r0, #14
 800573a:	d93a      	bls.n	80057b2 <_scanf_float+0xda>
 800573c:	f1b9 0f00 	cmp.w	r9, #0
 8005740:	d003      	beq.n	800574a <_scanf_float+0x72>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800574e:	f1ba 0f01 	cmp.w	sl, #1
 8005752:	f200 8113 	bhi.w	800597c <_scanf_float+0x2a4>
 8005756:	455e      	cmp	r6, fp
 8005758:	f200 8105 	bhi.w	8005966 <_scanf_float+0x28e>
 800575c:	2501      	movs	r5, #1
 800575e:	4628      	mov	r0, r5
 8005760:	b007      	add	sp, #28
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800576a:	2a0d      	cmp	r2, #13
 800576c:	d8e6      	bhi.n	800573c <_scanf_float+0x64>
 800576e:	a101      	add	r1, pc, #4	; (adr r1, 8005774 <_scanf_float+0x9c>)
 8005770:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005774:	080058b3 	.word	0x080058b3
 8005778:	0800573d 	.word	0x0800573d
 800577c:	0800573d 	.word	0x0800573d
 8005780:	0800573d 	.word	0x0800573d
 8005784:	08005913 	.word	0x08005913
 8005788:	080058eb 	.word	0x080058eb
 800578c:	0800573d 	.word	0x0800573d
 8005790:	0800573d 	.word	0x0800573d
 8005794:	080058c1 	.word	0x080058c1
 8005798:	0800573d 	.word	0x0800573d
 800579c:	0800573d 	.word	0x0800573d
 80057a0:	0800573d 	.word	0x0800573d
 80057a4:	0800573d 	.word	0x0800573d
 80057a8:	08005879 	.word	0x08005879
 80057ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80057b0:	e7db      	b.n	800576a <_scanf_float+0x92>
 80057b2:	290e      	cmp	r1, #14
 80057b4:	d8c2      	bhi.n	800573c <_scanf_float+0x64>
 80057b6:	a001      	add	r0, pc, #4	; (adr r0, 80057bc <_scanf_float+0xe4>)
 80057b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057bc:	0800586b 	.word	0x0800586b
 80057c0:	0800573d 	.word	0x0800573d
 80057c4:	0800586b 	.word	0x0800586b
 80057c8:	080058ff 	.word	0x080058ff
 80057cc:	0800573d 	.word	0x0800573d
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005855 	.word	0x08005855
 80057d8:	08005855 	.word	0x08005855
 80057dc:	08005855 	.word	0x08005855
 80057e0:	08005855 	.word	0x08005855
 80057e4:	08005855 	.word	0x08005855
 80057e8:	08005855 	.word	0x08005855
 80057ec:	08005855 	.word	0x08005855
 80057f0:	08005855 	.word	0x08005855
 80057f4:	08005855 	.word	0x08005855
 80057f8:	2b6e      	cmp	r3, #110	; 0x6e
 80057fa:	d809      	bhi.n	8005810 <_scanf_float+0x138>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d8b2      	bhi.n	8005766 <_scanf_float+0x8e>
 8005800:	2b54      	cmp	r3, #84	; 0x54
 8005802:	d077      	beq.n	80058f4 <_scanf_float+0x21c>
 8005804:	2b59      	cmp	r3, #89	; 0x59
 8005806:	d199      	bne.n	800573c <_scanf_float+0x64>
 8005808:	2d07      	cmp	r5, #7
 800580a:	d197      	bne.n	800573c <_scanf_float+0x64>
 800580c:	2508      	movs	r5, #8
 800580e:	e029      	b.n	8005864 <_scanf_float+0x18c>
 8005810:	2b74      	cmp	r3, #116	; 0x74
 8005812:	d06f      	beq.n	80058f4 <_scanf_float+0x21c>
 8005814:	2b79      	cmp	r3, #121	; 0x79
 8005816:	e7f6      	b.n	8005806 <_scanf_float+0x12e>
 8005818:	6821      	ldr	r1, [r4, #0]
 800581a:	05c8      	lsls	r0, r1, #23
 800581c:	d51a      	bpl.n	8005854 <_scanf_float+0x17c>
 800581e:	9b02      	ldr	r3, [sp, #8]
 8005820:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005824:	6021      	str	r1, [r4, #0]
 8005826:	f109 0901 	add.w	r9, r9, #1
 800582a:	b11b      	cbz	r3, 8005834 <_scanf_float+0x15c>
 800582c:	3b01      	subs	r3, #1
 800582e:	3201      	adds	r2, #1
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	60a2      	str	r2, [r4, #8]
 8005834:	68a3      	ldr	r3, [r4, #8]
 8005836:	3b01      	subs	r3, #1
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	607b      	str	r3, [r7, #4]
 8005848:	f340 8084 	ble.w	8005954 <_scanf_float+0x27c>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	e766      	b.n	8005722 <_scanf_float+0x4a>
 8005854:	eb1a 0f05 	cmn.w	sl, r5
 8005858:	f47f af70 	bne.w	800573c <_scanf_float+0x64>
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	f806 3b01 	strb.w	r3, [r6], #1
 8005868:	e7e4      	b.n	8005834 <_scanf_float+0x15c>
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	0610      	lsls	r0, r2, #24
 800586e:	f57f af65 	bpl.w	800573c <_scanf_float+0x64>
 8005872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005876:	e7f4      	b.n	8005862 <_scanf_float+0x18a>
 8005878:	f1ba 0f00 	cmp.w	sl, #0
 800587c:	d10e      	bne.n	800589c <_scanf_float+0x1c4>
 800587e:	f1b9 0f00 	cmp.w	r9, #0
 8005882:	d10e      	bne.n	80058a2 <_scanf_float+0x1ca>
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800588a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800588e:	d108      	bne.n	80058a2 <_scanf_float+0x1ca>
 8005890:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005894:	f04f 0a01 	mov.w	sl, #1
 8005898:	6022      	str	r2, [r4, #0]
 800589a:	e7e3      	b.n	8005864 <_scanf_float+0x18c>
 800589c:	f1ba 0f02 	cmp.w	sl, #2
 80058a0:	d055      	beq.n	800594e <_scanf_float+0x276>
 80058a2:	2d01      	cmp	r5, #1
 80058a4:	d002      	beq.n	80058ac <_scanf_float+0x1d4>
 80058a6:	2d04      	cmp	r5, #4
 80058a8:	f47f af48 	bne.w	800573c <_scanf_float+0x64>
 80058ac:	3501      	adds	r5, #1
 80058ae:	b2ed      	uxtb	r5, r5
 80058b0:	e7d8      	b.n	8005864 <_scanf_float+0x18c>
 80058b2:	f1ba 0f01 	cmp.w	sl, #1
 80058b6:	f47f af41 	bne.w	800573c <_scanf_float+0x64>
 80058ba:	f04f 0a02 	mov.w	sl, #2
 80058be:	e7d1      	b.n	8005864 <_scanf_float+0x18c>
 80058c0:	b97d      	cbnz	r5, 80058e2 <_scanf_float+0x20a>
 80058c2:	f1b9 0f00 	cmp.w	r9, #0
 80058c6:	f47f af3c 	bne.w	8005742 <_scanf_float+0x6a>
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058d4:	f47f af39 	bne.w	800574a <_scanf_float+0x72>
 80058d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058dc:	2501      	movs	r5, #1
 80058de:	6022      	str	r2, [r4, #0]
 80058e0:	e7c0      	b.n	8005864 <_scanf_float+0x18c>
 80058e2:	2d03      	cmp	r5, #3
 80058e4:	d0e2      	beq.n	80058ac <_scanf_float+0x1d4>
 80058e6:	2d05      	cmp	r5, #5
 80058e8:	e7de      	b.n	80058a8 <_scanf_float+0x1d0>
 80058ea:	2d02      	cmp	r5, #2
 80058ec:	f47f af26 	bne.w	800573c <_scanf_float+0x64>
 80058f0:	2503      	movs	r5, #3
 80058f2:	e7b7      	b.n	8005864 <_scanf_float+0x18c>
 80058f4:	2d06      	cmp	r5, #6
 80058f6:	f47f af21 	bne.w	800573c <_scanf_float+0x64>
 80058fa:	2507      	movs	r5, #7
 80058fc:	e7b2      	b.n	8005864 <_scanf_float+0x18c>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	0591      	lsls	r1, r2, #22
 8005902:	f57f af1b 	bpl.w	800573c <_scanf_float+0x64>
 8005906:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800590a:	6022      	str	r2, [r4, #0]
 800590c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005910:	e7a8      	b.n	8005864 <_scanf_float+0x18c>
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005918:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800591c:	d006      	beq.n	800592c <_scanf_float+0x254>
 800591e:	0550      	lsls	r0, r2, #21
 8005920:	f57f af0c 	bpl.w	800573c <_scanf_float+0x64>
 8005924:	f1b9 0f00 	cmp.w	r9, #0
 8005928:	f43f af0f 	beq.w	800574a <_scanf_float+0x72>
 800592c:	0591      	lsls	r1, r2, #22
 800592e:	bf58      	it	pl
 8005930:	9901      	ldrpl	r1, [sp, #4]
 8005932:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005936:	bf58      	it	pl
 8005938:	eba9 0101 	subpl.w	r1, r9, r1
 800593c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005940:	f04f 0900 	mov.w	r9, #0
 8005944:	bf58      	it	pl
 8005946:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	e78a      	b.n	8005864 <_scanf_float+0x18c>
 800594e:	f04f 0a03 	mov.w	sl, #3
 8005952:	e787      	b.n	8005864 <_scanf_float+0x18c>
 8005954:	4639      	mov	r1, r7
 8005956:	4640      	mov	r0, r8
 8005958:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800595c:	4798      	blx	r3
 800595e:	2800      	cmp	r0, #0
 8005960:	f43f aedf 	beq.w	8005722 <_scanf_float+0x4a>
 8005964:	e6ea      	b.n	800573c <_scanf_float+0x64>
 8005966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800596a:	463a      	mov	r2, r7
 800596c:	4640      	mov	r0, r8
 800596e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005972:	4798      	blx	r3
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	3b01      	subs	r3, #1
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	e6ec      	b.n	8005756 <_scanf_float+0x7e>
 800597c:	1e6b      	subs	r3, r5, #1
 800597e:	2b06      	cmp	r3, #6
 8005980:	d825      	bhi.n	80059ce <_scanf_float+0x2f6>
 8005982:	2d02      	cmp	r5, #2
 8005984:	d836      	bhi.n	80059f4 <_scanf_float+0x31c>
 8005986:	455e      	cmp	r6, fp
 8005988:	f67f aee8 	bls.w	800575c <_scanf_float+0x84>
 800598c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005990:	463a      	mov	r2, r7
 8005992:	4640      	mov	r0, r8
 8005994:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005998:	4798      	blx	r3
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	3b01      	subs	r3, #1
 800599e:	6123      	str	r3, [r4, #16]
 80059a0:	e7f1      	b.n	8005986 <_scanf_float+0x2ae>
 80059a2:	9802      	ldr	r0, [sp, #8]
 80059a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80059ac:	463a      	mov	r2, r7
 80059ae:	9002      	str	r0, [sp, #8]
 80059b0:	4640      	mov	r0, r8
 80059b2:	4798      	blx	r3
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059be:	fa5f fa8a 	uxtb.w	sl, sl
 80059c2:	f1ba 0f02 	cmp.w	sl, #2
 80059c6:	d1ec      	bne.n	80059a2 <_scanf_float+0x2ca>
 80059c8:	3d03      	subs	r5, #3
 80059ca:	b2ed      	uxtb	r5, r5
 80059cc:	1b76      	subs	r6, r6, r5
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	05da      	lsls	r2, r3, #23
 80059d2:	d52f      	bpl.n	8005a34 <_scanf_float+0x35c>
 80059d4:	055b      	lsls	r3, r3, #21
 80059d6:	d510      	bpl.n	80059fa <_scanf_float+0x322>
 80059d8:	455e      	cmp	r6, fp
 80059da:	f67f aebf 	bls.w	800575c <_scanf_float+0x84>
 80059de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059e2:	463a      	mov	r2, r7
 80059e4:	4640      	mov	r0, r8
 80059e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ea:	4798      	blx	r3
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	e7f1      	b.n	80059d8 <_scanf_float+0x300>
 80059f4:	46aa      	mov	sl, r5
 80059f6:	9602      	str	r6, [sp, #8]
 80059f8:	e7df      	b.n	80059ba <_scanf_float+0x2e2>
 80059fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	2965      	cmp	r1, #101	; 0x65
 8005a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a06:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	d00c      	beq.n	8005a28 <_scanf_float+0x350>
 8005a0e:	2945      	cmp	r1, #69	; 0x45
 8005a10:	d00a      	beq.n	8005a28 <_scanf_float+0x350>
 8005a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a16:	463a      	mov	r2, r7
 8005a18:	4640      	mov	r0, r8
 8005a1a:	4798      	blx	r3
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	1eb5      	subs	r5, r6, #2
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	463a      	mov	r2, r7
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a30:	4798      	blx	r3
 8005a32:	462e      	mov	r6, r5
 8005a34:	6825      	ldr	r5, [r4, #0]
 8005a36:	f015 0510 	ands.w	r5, r5, #16
 8005a3a:	d155      	bne.n	8005ae8 <_scanf_float+0x410>
 8005a3c:	7035      	strb	r5, [r6, #0]
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a48:	d11d      	bne.n	8005a86 <_scanf_float+0x3ae>
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	454b      	cmp	r3, r9
 8005a4e:	eba3 0209 	sub.w	r2, r3, r9
 8005a52:	d125      	bne.n	8005aa0 <_scanf_float+0x3c8>
 8005a54:	2200      	movs	r2, #0
 8005a56:	4659      	mov	r1, fp
 8005a58:	4640      	mov	r0, r8
 8005a5a:	f002 fc41 	bl	80082e0 <_strtod_r>
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	f8d4 c000 	ldr.w	ip, [r4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f01c 0f02 	tst.w	ip, #2
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	f103 0204 	add.w	r2, r3, #4
 8005a72:	d020      	beq.n	8005ab6 <_scanf_float+0x3de>
 8005a74:	9903      	ldr	r1, [sp, #12]
 8005a76:	600a      	str	r2, [r1, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	e9c3 6700 	strd	r6, r7, [r3]
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60e3      	str	r3, [r4, #12]
 8005a84:	e66b      	b.n	800575e <_scanf_float+0x86>
 8005a86:	9b04      	ldr	r3, [sp, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0e3      	beq.n	8005a54 <_scanf_float+0x37c>
 8005a8c:	9905      	ldr	r1, [sp, #20]
 8005a8e:	230a      	movs	r3, #10
 8005a90:	462a      	mov	r2, r5
 8005a92:	4640      	mov	r0, r8
 8005a94:	3101      	adds	r1, #1
 8005a96:	f002 fca7 	bl	80083e8 <_strtol_r>
 8005a9a:	9b04      	ldr	r3, [sp, #16]
 8005a9c:	9e05      	ldr	r6, [sp, #20]
 8005a9e:	1ac2      	subs	r2, r0, r3
 8005aa0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005aa4:	429e      	cmp	r6, r3
 8005aa6:	bf28      	it	cs
 8005aa8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005aac:	4630      	mov	r0, r6
 8005aae:	490f      	ldr	r1, [pc, #60]	; (8005aec <_scanf_float+0x414>)
 8005ab0:	f000 f8e2 	bl	8005c78 <siprintf>
 8005ab4:	e7ce      	b.n	8005a54 <_scanf_float+0x37c>
 8005ab6:	f01c 0f04 	tst.w	ip, #4
 8005aba:	d1db      	bne.n	8005a74 <_scanf_float+0x39c>
 8005abc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005ac0:	f8cc 2000 	str.w	r2, [ip]
 8005ac4:	f8d3 8000 	ldr.w	r8, [r3]
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	f7fa ff9e 	bl	8000a0c <__aeabi_dcmpun>
 8005ad0:	b128      	cbz	r0, 8005ade <_scanf_float+0x406>
 8005ad2:	4807      	ldr	r0, [pc, #28]	; (8005af0 <_scanf_float+0x418>)
 8005ad4:	f000 f9e2 	bl	8005e9c <nanf>
 8005ad8:	f8c8 0000 	str.w	r0, [r8]
 8005adc:	e7cf      	b.n	8005a7e <_scanf_float+0x3a6>
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fff1 	bl	8000ac8 <__aeabi_d2f>
 8005ae6:	e7f7      	b.n	8005ad8 <_scanf_float+0x400>
 8005ae8:	2500      	movs	r5, #0
 8005aea:	e638      	b.n	800575e <_scanf_float+0x86>
 8005aec:	0800965a 	.word	0x0800965a
 8005af0:	080099ed 	.word	0x080099ed

08005af4 <std>:
 8005af4:	2300      	movs	r3, #0
 8005af6:	b510      	push	{r4, lr}
 8005af8:	4604      	mov	r4, r0
 8005afa:	e9c0 3300 	strd	r3, r3, [r0]
 8005afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b02:	6083      	str	r3, [r0, #8]
 8005b04:	8181      	strh	r1, [r0, #12]
 8005b06:	6643      	str	r3, [r0, #100]	; 0x64
 8005b08:	81c2      	strh	r2, [r0, #14]
 8005b0a:	6183      	str	r3, [r0, #24]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	2208      	movs	r2, #8
 8005b10:	305c      	adds	r0, #92	; 0x5c
 8005b12:	f000 f935 	bl	8005d80 <memset>
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <std+0x58>)
 8005b18:	6224      	str	r4, [r4, #32]
 8005b1a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <std+0x5c>)
 8005b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b20:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <std+0x60>)
 8005b22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <std+0x64>)
 8005b26:	6323      	str	r3, [r4, #48]	; 0x30
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <std+0x68>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	d006      	beq.n	8005b3c <std+0x48>
 8005b2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b32:	4294      	cmp	r4, r2
 8005b34:	d002      	beq.n	8005b3c <std+0x48>
 8005b36:	33d0      	adds	r3, #208	; 0xd0
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	d105      	bne.n	8005b48 <std+0x54>
 8005b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b44:	f000 b998 	b.w	8005e78 <__retarget_lock_init_recursive>
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08005cb9 	.word	0x08005cb9
 8005b50:	08005cdb 	.word	0x08005cdb
 8005b54:	08005d13 	.word	0x08005d13
 8005b58:	08005d37 	.word	0x08005d37
 8005b5c:	20000348 	.word	0x20000348

08005b60 <stdio_exit_handler>:
 8005b60:	4a02      	ldr	r2, [pc, #8]	; (8005b6c <stdio_exit_handler+0xc>)
 8005b62:	4903      	ldr	r1, [pc, #12]	; (8005b70 <stdio_exit_handler+0x10>)
 8005b64:	4803      	ldr	r0, [pc, #12]	; (8005b74 <stdio_exit_handler+0x14>)
 8005b66:	f000 b869 	b.w	8005c3c <_fwalk_sglue>
 8005b6a:	bf00      	nop
 8005b6c:	2000001c 	.word	0x2000001c
 8005b70:	080087a1 	.word	0x080087a1
 8005b74:	20000028 	.word	0x20000028

08005b78 <cleanup_stdio>:
 8005b78:	6841      	ldr	r1, [r0, #4]
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <cleanup_stdio+0x34>)
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	4604      	mov	r4, r0
 8005b82:	d001      	beq.n	8005b88 <cleanup_stdio+0x10>
 8005b84:	f002 fe0c 	bl	80087a0 <_fflush_r>
 8005b88:	68a1      	ldr	r1, [r4, #8]
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <cleanup_stdio+0x38>)
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d002      	beq.n	8005b96 <cleanup_stdio+0x1e>
 8005b90:	4620      	mov	r0, r4
 8005b92:	f002 fe05 	bl	80087a0 <_fflush_r>
 8005b96:	68e1      	ldr	r1, [r4, #12]
 8005b98:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <cleanup_stdio+0x3c>)
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d004      	beq.n	8005ba8 <cleanup_stdio+0x30>
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f002 bdfc 	b.w	80087a0 <_fflush_r>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	bf00      	nop
 8005bac:	20000348 	.word	0x20000348
 8005bb0:	200003b0 	.word	0x200003b0
 8005bb4:	20000418 	.word	0x20000418

08005bb8 <global_stdio_init.part.0>:
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <global_stdio_init.part.0+0x30>)
 8005bbc:	4c0b      	ldr	r4, [pc, #44]	; (8005bec <global_stdio_init.part.0+0x34>)
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <global_stdio_init.part.0+0x38>)
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f7ff ff94 	bl	8005af4 <std>
 8005bcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2109      	movs	r1, #9
 8005bd4:	f7ff ff8e 	bl	8005af4 <std>
 8005bd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bdc:	2202      	movs	r2, #2
 8005bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be2:	2112      	movs	r1, #18
 8005be4:	f7ff bf86 	b.w	8005af4 <std>
 8005be8:	20000480 	.word	0x20000480
 8005bec:	20000348 	.word	0x20000348
 8005bf0:	08005b61 	.word	0x08005b61

08005bf4 <__sfp_lock_acquire>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_acquire+0x8>)
 8005bf6:	f000 b940 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	20000489 	.word	0x20000489

08005c00 <__sfp_lock_release>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sfp_lock_release+0x8>)
 8005c02:	f000 b93b 	b.w	8005e7c <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	20000489 	.word	0x20000489

08005c0c <__sinit>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	f7ff fff0 	bl	8005bf4 <__sfp_lock_acquire>
 8005c14:	6a23      	ldr	r3, [r4, #32]
 8005c16:	b11b      	cbz	r3, 8005c20 <__sinit+0x14>
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	f7ff bff0 	b.w	8005c00 <__sfp_lock_release>
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <__sinit+0x28>)
 8005c22:	6223      	str	r3, [r4, #32]
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <__sinit+0x2c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f5      	bne.n	8005c18 <__sinit+0xc>
 8005c2c:	f7ff ffc4 	bl	8005bb8 <global_stdio_init.part.0>
 8005c30:	e7f2      	b.n	8005c18 <__sinit+0xc>
 8005c32:	bf00      	nop
 8005c34:	08005b79 	.word	0x08005b79
 8005c38:	20000480 	.word	0x20000480

08005c3c <_fwalk_sglue>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	4607      	mov	r7, r0
 8005c42:	4688      	mov	r8, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	2600      	movs	r6, #0
 8005c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c50:	d505      	bpl.n	8005c5e <_fwalk_sglue+0x22>
 8005c52:	6824      	ldr	r4, [r4, #0]
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	d1f7      	bne.n	8005c48 <_fwalk_sglue+0xc>
 8005c58:	4630      	mov	r0, r6
 8005c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d907      	bls.n	8005c74 <_fwalk_sglue+0x38>
 8005c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	d003      	beq.n	8005c74 <_fwalk_sglue+0x38>
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	4306      	orrs	r6, r0
 8005c74:	3568      	adds	r5, #104	; 0x68
 8005c76:	e7e9      	b.n	8005c4c <_fwalk_sglue+0x10>

08005c78 <siprintf>:
 8005c78:	b40e      	push	{r1, r2, r3}
 8005c7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c7e:	b500      	push	{lr}
 8005c80:	b09c      	sub	sp, #112	; 0x70
 8005c82:	ab1d      	add	r3, sp, #116	; 0x74
 8005c84:	9002      	str	r0, [sp, #8]
 8005c86:	9006      	str	r0, [sp, #24]
 8005c88:	9107      	str	r1, [sp, #28]
 8005c8a:	9104      	str	r1, [sp, #16]
 8005c8c:	4808      	ldr	r0, [pc, #32]	; (8005cb0 <siprintf+0x38>)
 8005c8e:	4909      	ldr	r1, [pc, #36]	; (8005cb4 <siprintf+0x3c>)
 8005c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c94:	9105      	str	r1, [sp, #20]
 8005c96:	6800      	ldr	r0, [r0, #0]
 8005c98:	a902      	add	r1, sp, #8
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	f002 fc00 	bl	80084a0 <_svfiprintf_r>
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	9b02      	ldr	r3, [sp, #8]
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	b01c      	add	sp, #112	; 0x70
 8005ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cac:	b003      	add	sp, #12
 8005cae:	4770      	bx	lr
 8005cb0:	20000074 	.word	0x20000074
 8005cb4:	ffff0208 	.word	0xffff0208

08005cb8 <__sread>:
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	460c      	mov	r4, r1
 8005cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc0:	f000 f88c 	bl	8005ddc <_read_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	bfab      	itete	ge
 8005cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cca:	89a3      	ldrhlt	r3, [r4, #12]
 8005ccc:	181b      	addge	r3, r3, r0
 8005cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cd2:	bfac      	ite	ge
 8005cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cd6:	81a3      	strhlt	r3, [r4, #12]
 8005cd8:	bd10      	pop	{r4, pc}

08005cda <__swrite>:
 8005cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cde:	461f      	mov	r7, r3
 8005ce0:	898b      	ldrh	r3, [r1, #12]
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	05db      	lsls	r3, r3, #23
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4616      	mov	r6, r2
 8005cea:	d505      	bpl.n	8005cf8 <__swrite+0x1e>
 8005cec:	2302      	movs	r3, #2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf4:	f000 f860 	bl	8005db8 <_lseek_r>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	4628      	mov	r0, r5
 8005d04:	463b      	mov	r3, r7
 8005d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	f000 b877 	b.w	8005e00 <_write_r>

08005d12 <__sseek>:
 8005d12:	b510      	push	{r4, lr}
 8005d14:	460c      	mov	r4, r1
 8005d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1a:	f000 f84d 	bl	8005db8 <_lseek_r>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	bf15      	itete	ne
 8005d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d2e:	81a3      	strheq	r3, [r4, #12]
 8005d30:	bf18      	it	ne
 8005d32:	81a3      	strhne	r3, [r4, #12]
 8005d34:	bd10      	pop	{r4, pc}

08005d36 <__sclose>:
 8005d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3a:	f000 b82d 	b.w	8005d98 <_close_r>
	...

08005d40 <_vsiprintf_r>:
 8005d40:	b500      	push	{lr}
 8005d42:	b09b      	sub	sp, #108	; 0x6c
 8005d44:	9100      	str	r1, [sp, #0]
 8005d46:	9104      	str	r1, [sp, #16]
 8005d48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d4c:	9105      	str	r1, [sp, #20]
 8005d4e:	9102      	str	r1, [sp, #8]
 8005d50:	4905      	ldr	r1, [pc, #20]	; (8005d68 <_vsiprintf_r+0x28>)
 8005d52:	9103      	str	r1, [sp, #12]
 8005d54:	4669      	mov	r1, sp
 8005d56:	f002 fba3 	bl	80084a0 <_svfiprintf_r>
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	b01b      	add	sp, #108	; 0x6c
 8005d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d66:	bf00      	nop
 8005d68:	ffff0208 	.word	0xffff0208

08005d6c <vsiprintf>:
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	460a      	mov	r2, r1
 8005d70:	4601      	mov	r1, r0
 8005d72:	4802      	ldr	r0, [pc, #8]	; (8005d7c <vsiprintf+0x10>)
 8005d74:	6800      	ldr	r0, [r0, #0]
 8005d76:	f7ff bfe3 	b.w	8005d40 <_vsiprintf_r>
 8005d7a:	bf00      	nop
 8005d7c:	20000074 	.word	0x20000074

08005d80 <memset>:
 8005d80:	4603      	mov	r3, r0
 8005d82:	4402      	add	r2, r0
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d100      	bne.n	8005d8a <memset+0xa>
 8005d88:	4770      	bx	lr
 8005d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8e:	e7f9      	b.n	8005d84 <memset+0x4>

08005d90 <_localeconv_r>:
 8005d90:	4800      	ldr	r0, [pc, #0]	; (8005d94 <_localeconv_r+0x4>)
 8005d92:	4770      	bx	lr
 8005d94:	20000168 	.word	0x20000168

08005d98 <_close_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4d05      	ldr	r5, [pc, #20]	; (8005db4 <_close_r+0x1c>)
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb ff50 	bl	8001c48 <_close>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_close_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_close_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20000484 	.word	0x20000484

08005db8 <_lseek_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4d05      	ldr	r5, [pc, #20]	; (8005dd8 <_lseek_r+0x20>)
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fb ff62 	bl	8001c90 <_lseek>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_lseek_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_lseek_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20000484 	.word	0x20000484

08005ddc <_read_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	2200      	movs	r2, #0
 8005de6:	4d05      	ldr	r5, [pc, #20]	; (8005dfc <_read_r+0x20>)
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fb fef3 	bl	8001bd6 <_read>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_read_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_read_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000484 	.word	0x20000484

08005e00 <_write_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	2200      	movs	r2, #0
 8005e0a:	4d05      	ldr	r5, [pc, #20]	; (8005e20 <_write_r+0x20>)
 8005e0c:	602a      	str	r2, [r5, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fb fefe 	bl	8001c10 <_write>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_write_r+0x1e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_write_r+0x1e>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20000484 	.word	0x20000484

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000074 	.word	0x20000074

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	2600      	movs	r6, #0
 8005e34:	4d0c      	ldr	r5, [pc, #48]	; (8005e68 <__libc_init_array+0x38>)
 8005e36:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e38:	1b64      	subs	r4, r4, r5
 8005e3a:	10a4      	asrs	r4, r4, #2
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	f003 fbc0 	bl	80095c4 <_init>
 8005e44:	2600      	movs	r6, #0
 8005e46:	4d0a      	ldr	r5, [pc, #40]	; (8005e70 <__libc_init_array+0x40>)
 8005e48:	4c0a      	ldr	r4, [pc, #40]	; (8005e74 <__libc_init_array+0x44>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	08009a50 	.word	0x08009a50
 8005e6c:	08009a50 	.word	0x08009a50
 8005e70:	08009a50 	.word	0x08009a50
 8005e74:	08009a54 	.word	0x08009a54

08005e78 <__retarget_lock_init_recursive>:
 8005e78:	4770      	bx	lr

08005e7a <__retarget_lock_acquire_recursive>:
 8005e7a:	4770      	bx	lr

08005e7c <__retarget_lock_release_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <memchr>:
 8005e7e:	4603      	mov	r3, r0
 8005e80:	b510      	push	{r4, lr}
 8005e82:	b2c9      	uxtb	r1, r1
 8005e84:	4402      	add	r2, r0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	d101      	bne.n	8005e90 <memchr+0x12>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e003      	b.n	8005e98 <memchr+0x1a>
 8005e90:	7804      	ldrb	r4, [r0, #0]
 8005e92:	3301      	adds	r3, #1
 8005e94:	428c      	cmp	r4, r1
 8005e96:	d1f6      	bne.n	8005e86 <memchr+0x8>
 8005e98:	bd10      	pop	{r4, pc}
	...

08005e9c <nanf>:
 8005e9c:	4800      	ldr	r0, [pc, #0]	; (8005ea0 <nanf+0x4>)
 8005e9e:	4770      	bx	lr
 8005ea0:	7fc00000 	.word	0x7fc00000

08005ea4 <quorem>:
 8005ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	6903      	ldr	r3, [r0, #16]
 8005eaa:	690c      	ldr	r4, [r1, #16]
 8005eac:	4607      	mov	r7, r0
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	db7f      	blt.n	8005fb2 <quorem+0x10e>
 8005eb2:	3c01      	subs	r4, #1
 8005eb4:	f100 0514 	add.w	r5, r0, #20
 8005eb8:	f101 0814 	add.w	r8, r1, #20
 8005ebc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ed2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ed6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eda:	d331      	bcc.n	8005f40 <quorem+0x9c>
 8005edc:	f04f 0e00 	mov.w	lr, #0
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	46ac      	mov	ip, r5
 8005ee4:	46f2      	mov	sl, lr
 8005ee6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005eea:	b293      	uxth	r3, r2
 8005eec:	fb06 e303 	mla	r3, r6, r3, lr
 8005ef0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ef4:	0c1a      	lsrs	r2, r3, #16
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	fb06 220e 	mla	r2, r6, lr, r2
 8005efc:	ebaa 0303 	sub.w	r3, sl, r3
 8005f00:	f8dc a000 	ldr.w	sl, [ip]
 8005f04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f08:	fa1f fa8a 	uxth.w	sl, sl
 8005f0c:	4453      	add	r3, sl
 8005f0e:	f8dc a000 	ldr.w	sl, [ip]
 8005f12:	b292      	uxth	r2, r2
 8005f14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f22:	4581      	cmp	r9, r0
 8005f24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f28:	f84c 3b04 	str.w	r3, [ip], #4
 8005f2c:	d2db      	bcs.n	8005ee6 <quorem+0x42>
 8005f2e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f32:	b92b      	cbnz	r3, 8005f40 <quorem+0x9c>
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	3b04      	subs	r3, #4
 8005f38:	429d      	cmp	r5, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	d32d      	bcc.n	8005f9a <quorem+0xf6>
 8005f3e:	613c      	str	r4, [r7, #16]
 8005f40:	4638      	mov	r0, r7
 8005f42:	f001 f9dd 	bl	8007300 <__mcmp>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	db23      	blt.n	8005f92 <quorem+0xee>
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	3601      	adds	r6, #1
 8005f50:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f54:	f8d1 c000 	ldr.w	ip, [r1]
 8005f58:	b293      	uxth	r3, r2
 8005f5a:	1ac3      	subs	r3, r0, r3
 8005f5c:	0c12      	lsrs	r2, r2, #16
 8005f5e:	fa1f f08c 	uxth.w	r0, ip
 8005f62:	4403      	add	r3, r0
 8005f64:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f72:	45c1      	cmp	r9, r8
 8005f74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f78:	f841 3b04 	str.w	r3, [r1], #4
 8005f7c:	d2e8      	bcs.n	8005f50 <quorem+0xac>
 8005f7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f86:	b922      	cbnz	r2, 8005f92 <quorem+0xee>
 8005f88:	3b04      	subs	r3, #4
 8005f8a:	429d      	cmp	r5, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	d30a      	bcc.n	8005fa6 <quorem+0x102>
 8005f90:	613c      	str	r4, [r7, #16]
 8005f92:	4630      	mov	r0, r6
 8005f94:	b003      	add	sp, #12
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d1cd      	bne.n	8005f3e <quorem+0x9a>
 8005fa2:	3c01      	subs	r4, #1
 8005fa4:	e7c8      	b.n	8005f38 <quorem+0x94>
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	d1f0      	bne.n	8005f90 <quorem+0xec>
 8005fae:	3c01      	subs	r4, #1
 8005fb0:	e7eb      	b.n	8005f8a <quorem+0xe6>
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e7ee      	b.n	8005f94 <quorem+0xf0>
	...

08005fb8 <_dtoa_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	461f      	mov	r7, r3
 8005fc0:	69c4      	ldr	r4, [r0, #28]
 8005fc2:	b099      	sub	sp, #100	; 0x64
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005fce:	b974      	cbnz	r4, 8005fee <_dtoa_r+0x36>
 8005fd0:	2010      	movs	r0, #16
 8005fd2:	f000 fe1d 	bl	8006c10 <malloc>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	61e8      	str	r0, [r5, #28]
 8005fda:	b920      	cbnz	r0, 8005fe6 <_dtoa_r+0x2e>
 8005fdc:	21ef      	movs	r1, #239	; 0xef
 8005fde:	4bac      	ldr	r3, [pc, #688]	; (8006290 <_dtoa_r+0x2d8>)
 8005fe0:	48ac      	ldr	r0, [pc, #688]	; (8006294 <_dtoa_r+0x2dc>)
 8005fe2:	f002 fc55 	bl	8008890 <__assert_func>
 8005fe6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fea:	6004      	str	r4, [r0, #0]
 8005fec:	60c4      	str	r4, [r0, #12]
 8005fee:	69eb      	ldr	r3, [r5, #28]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	b151      	cbz	r1, 800600a <_dtoa_r+0x52>
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4093      	lsls	r3, r2
 8005ffa:	604a      	str	r2, [r1, #4]
 8005ffc:	608b      	str	r3, [r1, #8]
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fefa 	bl	8006df8 <_Bfree>
 8006004:	2200      	movs	r2, #0
 8006006:	69eb      	ldr	r3, [r5, #28]
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	1e3b      	subs	r3, r7, #0
 800600c:	bfaf      	iteee	ge
 800600e:	2300      	movge	r3, #0
 8006010:	2201      	movlt	r2, #1
 8006012:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006016:	9305      	strlt	r3, [sp, #20]
 8006018:	bfa8      	it	ge
 800601a:	f8c8 3000 	strge.w	r3, [r8]
 800601e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006022:	4b9d      	ldr	r3, [pc, #628]	; (8006298 <_dtoa_r+0x2e0>)
 8006024:	bfb8      	it	lt
 8006026:	f8c8 2000 	strlt.w	r2, [r8]
 800602a:	ea33 0309 	bics.w	r3, r3, r9
 800602e:	d119      	bne.n	8006064 <_dtoa_r+0xac>
 8006030:	f242 730f 	movw	r3, #9999	; 0x270f
 8006034:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800603c:	4333      	orrs	r3, r6
 800603e:	f000 8589 	beq.w	8006b54 <_dtoa_r+0xb9c>
 8006042:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006044:	b953      	cbnz	r3, 800605c <_dtoa_r+0xa4>
 8006046:	4b95      	ldr	r3, [pc, #596]	; (800629c <_dtoa_r+0x2e4>)
 8006048:	e023      	b.n	8006092 <_dtoa_r+0xda>
 800604a:	4b95      	ldr	r3, [pc, #596]	; (80062a0 <_dtoa_r+0x2e8>)
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	3308      	adds	r3, #8
 8006050:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	9803      	ldr	r0, [sp, #12]
 8006056:	b019      	add	sp, #100	; 0x64
 8006058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605c:	4b8f      	ldr	r3, [pc, #572]	; (800629c <_dtoa_r+0x2e4>)
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	3303      	adds	r3, #3
 8006062:	e7f5      	b.n	8006050 <_dtoa_r+0x98>
 8006064:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006068:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800606c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	f7fa fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8006078:	4680      	mov	r8, r0
 800607a:	b160      	cbz	r0, 8006096 <_dtoa_r+0xde>
 800607c:	2301      	movs	r3, #1
 800607e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8562 	beq.w	8006b4e <_dtoa_r+0xb96>
 800608a:	4b86      	ldr	r3, [pc, #536]	; (80062a4 <_dtoa_r+0x2ec>)
 800608c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	9303      	str	r3, [sp, #12]
 8006094:	e7de      	b.n	8006054 <_dtoa_r+0x9c>
 8006096:	ab16      	add	r3, sp, #88	; 0x58
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	ab17      	add	r3, sp, #92	; 0x5c
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4628      	mov	r0, r5
 80060a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060a4:	f001 fa3c 	bl	8007520 <__d2b>
 80060a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060ac:	4682      	mov	sl, r0
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	d07e      	beq.n	80061b0 <_dtoa_r+0x1f8>
 80060b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060cc:	4619      	mov	r1, r3
 80060ce:	2200      	movs	r2, #0
 80060d0:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <_dtoa_r+0x2f0>)
 80060d2:	f7fa f849 	bl	8000168 <__aeabi_dsub>
 80060d6:	a368      	add	r3, pc, #416	; (adr r3, 8006278 <_dtoa_r+0x2c0>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa f9fc 	bl	80004d8 <__aeabi_dmul>
 80060e0:	a367      	add	r3, pc, #412	; (adr r3, 8006280 <_dtoa_r+0x2c8>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f7fa f841 	bl	800016c <__adddf3>
 80060ea:	4606      	mov	r6, r0
 80060ec:	4620      	mov	r0, r4
 80060ee:	460f      	mov	r7, r1
 80060f0:	f7fa f988 	bl	8000404 <__aeabi_i2d>
 80060f4:	a364      	add	r3, pc, #400	; (adr r3, 8006288 <_dtoa_r+0x2d0>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa f831 	bl	800016c <__adddf3>
 800610a:	4606      	mov	r6, r0
 800610c:	460f      	mov	r7, r1
 800610e:	f7fa fc93 	bl	8000a38 <__aeabi_d2iz>
 8006112:	2200      	movs	r2, #0
 8006114:	4683      	mov	fp, r0
 8006116:	2300      	movs	r3, #0
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa fc4e 	bl	80009bc <__aeabi_dcmplt>
 8006120:	b148      	cbz	r0, 8006136 <_dtoa_r+0x17e>
 8006122:	4658      	mov	r0, fp
 8006124:	f7fa f96e 	bl	8000404 <__aeabi_i2d>
 8006128:	4632      	mov	r2, r6
 800612a:	463b      	mov	r3, r7
 800612c:	f7fa fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8006130:	b908      	cbnz	r0, 8006136 <_dtoa_r+0x17e>
 8006132:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006136:	f1bb 0f16 	cmp.w	fp, #22
 800613a:	d857      	bhi.n	80061ec <_dtoa_r+0x234>
 800613c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006140:	4b5a      	ldr	r3, [pc, #360]	; (80062ac <_dtoa_r+0x2f4>)
 8006142:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f7fa fc37 	bl	80009bc <__aeabi_dcmplt>
 800614e:	2800      	cmp	r0, #0
 8006150:	d04e      	beq.n	80061f0 <_dtoa_r+0x238>
 8006152:	2300      	movs	r3, #0
 8006154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006158:	930f      	str	r3, [sp, #60]	; 0x3c
 800615a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800615c:	1b1b      	subs	r3, r3, r4
 800615e:	1e5a      	subs	r2, r3, #1
 8006160:	bf46      	itte	mi
 8006162:	f1c3 0901 	rsbmi	r9, r3, #1
 8006166:	2300      	movmi	r3, #0
 8006168:	f04f 0900 	movpl.w	r9, #0
 800616c:	9209      	str	r2, [sp, #36]	; 0x24
 800616e:	bf48      	it	mi
 8006170:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006172:	f1bb 0f00 	cmp.w	fp, #0
 8006176:	db3d      	blt.n	80061f4 <_dtoa_r+0x23c>
 8006178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800617e:	445b      	add	r3, fp
 8006180:	9309      	str	r3, [sp, #36]	; 0x24
 8006182:	2300      	movs	r3, #0
 8006184:	930a      	str	r3, [sp, #40]	; 0x28
 8006186:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006188:	2b09      	cmp	r3, #9
 800618a:	d867      	bhi.n	800625c <_dtoa_r+0x2a4>
 800618c:	2b05      	cmp	r3, #5
 800618e:	bfc4      	itt	gt
 8006190:	3b04      	subgt	r3, #4
 8006192:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006196:	bfc8      	it	gt
 8006198:	2400      	movgt	r4, #0
 800619a:	f1a3 0302 	sub.w	r3, r3, #2
 800619e:	bfd8      	it	le
 80061a0:	2401      	movle	r4, #1
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	f200 8086 	bhi.w	80062b4 <_dtoa_r+0x2fc>
 80061a8:	e8df f003 	tbb	[pc, r3]
 80061ac:	5637392c 	.word	0x5637392c
 80061b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061b4:	441c      	add	r4, r3
 80061b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	bfc1      	itttt	gt
 80061be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061c2:	fa09 f903 	lslgt.w	r9, r9, r3
 80061c6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80061ca:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061ce:	bfd6      	itet	le
 80061d0:	f1c3 0320 	rsble	r3, r3, #32
 80061d4:	ea49 0003 	orrgt.w	r0, r9, r3
 80061d8:	fa06 f003 	lslle.w	r0, r6, r3
 80061dc:	f7fa f902 	bl	80003e4 <__aeabi_ui2d>
 80061e0:	2201      	movs	r2, #1
 80061e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061e6:	3c01      	subs	r4, #1
 80061e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80061ea:	e76f      	b.n	80060cc <_dtoa_r+0x114>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7b3      	b.n	8006158 <_dtoa_r+0x1a0>
 80061f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80061f2:	e7b2      	b.n	800615a <_dtoa_r+0x1a2>
 80061f4:	f1cb 0300 	rsb	r3, fp, #0
 80061f8:	930a      	str	r3, [sp, #40]	; 0x28
 80061fa:	2300      	movs	r3, #0
 80061fc:	eba9 090b 	sub.w	r9, r9, fp
 8006200:	930e      	str	r3, [sp, #56]	; 0x38
 8006202:	e7c0      	b.n	8006186 <_dtoa_r+0x1ce>
 8006204:	2300      	movs	r3, #0
 8006206:	930b      	str	r3, [sp, #44]	; 0x2c
 8006208:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc55      	bgt.n	80062ba <_dtoa_r+0x302>
 800620e:	2301      	movs	r3, #1
 8006210:	461a      	mov	r2, r3
 8006212:	9306      	str	r3, [sp, #24]
 8006214:	9308      	str	r3, [sp, #32]
 8006216:	9223      	str	r2, [sp, #140]	; 0x8c
 8006218:	e00b      	b.n	8006232 <_dtoa_r+0x27a>
 800621a:	2301      	movs	r3, #1
 800621c:	e7f3      	b.n	8006206 <_dtoa_r+0x24e>
 800621e:	2300      	movs	r3, #0
 8006220:	930b      	str	r3, [sp, #44]	; 0x2c
 8006222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006224:	445b      	add	r3, fp
 8006226:	9306      	str	r3, [sp, #24]
 8006228:	3301      	adds	r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	9308      	str	r3, [sp, #32]
 800622e:	bfb8      	it	lt
 8006230:	2301      	movlt	r3, #1
 8006232:	2100      	movs	r1, #0
 8006234:	2204      	movs	r2, #4
 8006236:	69e8      	ldr	r0, [r5, #28]
 8006238:	f102 0614 	add.w	r6, r2, #20
 800623c:	429e      	cmp	r6, r3
 800623e:	d940      	bls.n	80062c2 <_dtoa_r+0x30a>
 8006240:	6041      	str	r1, [r0, #4]
 8006242:	4628      	mov	r0, r5
 8006244:	f000 fd98 	bl	8006d78 <_Balloc>
 8006248:	9003      	str	r0, [sp, #12]
 800624a:	2800      	cmp	r0, #0
 800624c:	d13c      	bne.n	80062c8 <_dtoa_r+0x310>
 800624e:	4602      	mov	r2, r0
 8006250:	f240 11af 	movw	r1, #431	; 0x1af
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <_dtoa_r+0x2f8>)
 8006256:	e6c3      	b.n	8005fe0 <_dtoa_r+0x28>
 8006258:	2301      	movs	r3, #1
 800625a:	e7e1      	b.n	8006220 <_dtoa_r+0x268>
 800625c:	2401      	movs	r4, #1
 800625e:	2300      	movs	r3, #0
 8006260:	940b      	str	r4, [sp, #44]	; 0x2c
 8006262:	9322      	str	r3, [sp, #136]	; 0x88
 8006264:	f04f 33ff 	mov.w	r3, #4294967295
 8006268:	2200      	movs	r2, #0
 800626a:	9306      	str	r3, [sp, #24]
 800626c:	9308      	str	r3, [sp, #32]
 800626e:	2312      	movs	r3, #18
 8006270:	e7d1      	b.n	8006216 <_dtoa_r+0x25e>
 8006272:	bf00      	nop
 8006274:	f3af 8000 	nop.w
 8006278:	636f4361 	.word	0x636f4361
 800627c:	3fd287a7 	.word	0x3fd287a7
 8006280:	8b60c8b3 	.word	0x8b60c8b3
 8006284:	3fc68a28 	.word	0x3fc68a28
 8006288:	509f79fb 	.word	0x509f79fb
 800628c:	3fd34413 	.word	0x3fd34413
 8006290:	0800966c 	.word	0x0800966c
 8006294:	08009683 	.word	0x08009683
 8006298:	7ff00000 	.word	0x7ff00000
 800629c:	08009668 	.word	0x08009668
 80062a0:	0800965f 	.word	0x0800965f
 80062a4:	08009637 	.word	0x08009637
 80062a8:	3ff80000 	.word	0x3ff80000
 80062ac:	08009770 	.word	0x08009770
 80062b0:	080096db 	.word	0x080096db
 80062b4:	2301      	movs	r3, #1
 80062b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b8:	e7d4      	b.n	8006264 <_dtoa_r+0x2ac>
 80062ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062bc:	9306      	str	r3, [sp, #24]
 80062be:	9308      	str	r3, [sp, #32]
 80062c0:	e7b7      	b.n	8006232 <_dtoa_r+0x27a>
 80062c2:	3101      	adds	r1, #1
 80062c4:	0052      	lsls	r2, r2, #1
 80062c6:	e7b7      	b.n	8006238 <_dtoa_r+0x280>
 80062c8:	69eb      	ldr	r3, [r5, #28]
 80062ca:	9a03      	ldr	r2, [sp, #12]
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	9b08      	ldr	r3, [sp, #32]
 80062d0:	2b0e      	cmp	r3, #14
 80062d2:	f200 80a8 	bhi.w	8006426 <_dtoa_r+0x46e>
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	f000 80a5 	beq.w	8006426 <_dtoa_r+0x46e>
 80062dc:	f1bb 0f00 	cmp.w	fp, #0
 80062e0:	dd34      	ble.n	800634c <_dtoa_r+0x394>
 80062e2:	4b9a      	ldr	r3, [pc, #616]	; (800654c <_dtoa_r+0x594>)
 80062e4:	f00b 020f 	and.w	r2, fp, #15
 80062e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062f8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80062fc:	d016      	beq.n	800632c <_dtoa_r+0x374>
 80062fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006302:	4b93      	ldr	r3, [pc, #588]	; (8006550 <_dtoa_r+0x598>)
 8006304:	2703      	movs	r7, #3
 8006306:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800630a:	f7fa fa0f 	bl	800072c <__aeabi_ddiv>
 800630e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006312:	f004 040f 	and.w	r4, r4, #15
 8006316:	4e8e      	ldr	r6, [pc, #568]	; (8006550 <_dtoa_r+0x598>)
 8006318:	b954      	cbnz	r4, 8006330 <_dtoa_r+0x378>
 800631a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800631e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006322:	f7fa fa03 	bl	800072c <__aeabi_ddiv>
 8006326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800632a:	e029      	b.n	8006380 <_dtoa_r+0x3c8>
 800632c:	2702      	movs	r7, #2
 800632e:	e7f2      	b.n	8006316 <_dtoa_r+0x35e>
 8006330:	07e1      	lsls	r1, r4, #31
 8006332:	d508      	bpl.n	8006346 <_dtoa_r+0x38e>
 8006334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006338:	e9d6 2300 	ldrd	r2, r3, [r6]
 800633c:	f7fa f8cc 	bl	80004d8 <__aeabi_dmul>
 8006340:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006344:	3701      	adds	r7, #1
 8006346:	1064      	asrs	r4, r4, #1
 8006348:	3608      	adds	r6, #8
 800634a:	e7e5      	b.n	8006318 <_dtoa_r+0x360>
 800634c:	f000 80a5 	beq.w	800649a <_dtoa_r+0x4e2>
 8006350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006354:	f1cb 0400 	rsb	r4, fp, #0
 8006358:	4b7c      	ldr	r3, [pc, #496]	; (800654c <_dtoa_r+0x594>)
 800635a:	f004 020f 	and.w	r2, r4, #15
 800635e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f7fa f8b7 	bl	80004d8 <__aeabi_dmul>
 800636a:	2702      	movs	r7, #2
 800636c:	2300      	movs	r3, #0
 800636e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006372:	4e77      	ldr	r6, [pc, #476]	; (8006550 <_dtoa_r+0x598>)
 8006374:	1124      	asrs	r4, r4, #4
 8006376:	2c00      	cmp	r4, #0
 8006378:	f040 8084 	bne.w	8006484 <_dtoa_r+0x4cc>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1d2      	bne.n	8006326 <_dtoa_r+0x36e>
 8006380:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006384:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8087 	beq.w	800649e <_dtoa_r+0x4e6>
 8006390:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006394:	2200      	movs	r2, #0
 8006396:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <_dtoa_r+0x59c>)
 8006398:	f7fa fb10 	bl	80009bc <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	d07e      	beq.n	800649e <_dtoa_r+0x4e6>
 80063a0:	9b08      	ldr	r3, [sp, #32]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d07b      	beq.n	800649e <_dtoa_r+0x4e6>
 80063a6:	9b06      	ldr	r3, [sp, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dd38      	ble.n	800641e <_dtoa_r+0x466>
 80063ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b69      	ldr	r3, [pc, #420]	; (8006558 <_dtoa_r+0x5a0>)
 80063b4:	f7fa f890 	bl	80004d8 <__aeabi_dmul>
 80063b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063bc:	9c06      	ldr	r4, [sp, #24]
 80063be:	f10b 38ff 	add.w	r8, fp, #4294967295
 80063c2:	3701      	adds	r7, #1
 80063c4:	4638      	mov	r0, r7
 80063c6:	f7fa f81d 	bl	8000404 <__aeabi_i2d>
 80063ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ce:	f7fa f883 	bl	80004d8 <__aeabi_dmul>
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <_dtoa_r+0x5a4>)
 80063d6:	f7f9 fec9 	bl	800016c <__adddf3>
 80063da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063e2:	9611      	str	r6, [sp, #68]	; 0x44
 80063e4:	2c00      	cmp	r4, #0
 80063e6:	d15d      	bne.n	80064a4 <_dtoa_r+0x4ec>
 80063e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ec:	2200      	movs	r2, #0
 80063ee:	4b5c      	ldr	r3, [pc, #368]	; (8006560 <_dtoa_r+0x5a8>)
 80063f0:	f7f9 feba 	bl	8000168 <__aeabi_dsub>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063fc:	4633      	mov	r3, r6
 80063fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006400:	f7fa fafa 	bl	80009f8 <__aeabi_dcmpgt>
 8006404:	2800      	cmp	r0, #0
 8006406:	f040 8295 	bne.w	8006934 <_dtoa_r+0x97c>
 800640a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800640e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006414:	f7fa fad2 	bl	80009bc <__aeabi_dcmplt>
 8006418:	2800      	cmp	r0, #0
 800641a:	f040 8289 	bne.w	8006930 <_dtoa_r+0x978>
 800641e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006428:	2b00      	cmp	r3, #0
 800642a:	f2c0 8151 	blt.w	80066d0 <_dtoa_r+0x718>
 800642e:	f1bb 0f0e 	cmp.w	fp, #14
 8006432:	f300 814d 	bgt.w	80066d0 <_dtoa_r+0x718>
 8006436:	4b45      	ldr	r3, [pc, #276]	; (800654c <_dtoa_r+0x594>)
 8006438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800643c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006440:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006444:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006446:	2b00      	cmp	r3, #0
 8006448:	f280 80da 	bge.w	8006600 <_dtoa_r+0x648>
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f300 80d6 	bgt.w	8006600 <_dtoa_r+0x648>
 8006454:	f040 826b 	bne.w	800692e <_dtoa_r+0x976>
 8006458:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800645c:	2200      	movs	r2, #0
 800645e:	4b40      	ldr	r3, [pc, #256]	; (8006560 <_dtoa_r+0x5a8>)
 8006460:	f7fa f83a 	bl	80004d8 <__aeabi_dmul>
 8006464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006468:	f7fa fabc 	bl	80009e4 <__aeabi_dcmpge>
 800646c:	9c08      	ldr	r4, [sp, #32]
 800646e:	4626      	mov	r6, r4
 8006470:	2800      	cmp	r0, #0
 8006472:	f040 8241 	bne.w	80068f8 <_dtoa_r+0x940>
 8006476:	2331      	movs	r3, #49	; 0x31
 8006478:	9f03      	ldr	r7, [sp, #12]
 800647a:	f10b 0b01 	add.w	fp, fp, #1
 800647e:	f807 3b01 	strb.w	r3, [r7], #1
 8006482:	e23d      	b.n	8006900 <_dtoa_r+0x948>
 8006484:	07e2      	lsls	r2, r4, #31
 8006486:	d505      	bpl.n	8006494 <_dtoa_r+0x4dc>
 8006488:	e9d6 2300 	ldrd	r2, r3, [r6]
 800648c:	f7fa f824 	bl	80004d8 <__aeabi_dmul>
 8006490:	2301      	movs	r3, #1
 8006492:	3701      	adds	r7, #1
 8006494:	1064      	asrs	r4, r4, #1
 8006496:	3608      	adds	r6, #8
 8006498:	e76d      	b.n	8006376 <_dtoa_r+0x3be>
 800649a:	2702      	movs	r7, #2
 800649c:	e770      	b.n	8006380 <_dtoa_r+0x3c8>
 800649e:	46d8      	mov	r8, fp
 80064a0:	9c08      	ldr	r4, [sp, #32]
 80064a2:	e78f      	b.n	80063c4 <_dtoa_r+0x40c>
 80064a4:	9903      	ldr	r1, [sp, #12]
 80064a6:	4b29      	ldr	r3, [pc, #164]	; (800654c <_dtoa_r+0x594>)
 80064a8:	4421      	add	r1, r4
 80064aa:	9112      	str	r1, [sp, #72]	; 0x48
 80064ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064b2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ba:	2900      	cmp	r1, #0
 80064bc:	d054      	beq.n	8006568 <_dtoa_r+0x5b0>
 80064be:	2000      	movs	r0, #0
 80064c0:	4928      	ldr	r1, [pc, #160]	; (8006564 <_dtoa_r+0x5ac>)
 80064c2:	f7fa f933 	bl	800072c <__aeabi_ddiv>
 80064c6:	463b      	mov	r3, r7
 80064c8:	4632      	mov	r2, r6
 80064ca:	f7f9 fe4d 	bl	8000168 <__aeabi_dsub>
 80064ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064d2:	9f03      	ldr	r7, [sp, #12]
 80064d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d8:	f7fa faae 	bl	8000a38 <__aeabi_d2iz>
 80064dc:	4604      	mov	r4, r0
 80064de:	f7f9 ff91 	bl	8000404 <__aeabi_i2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ea:	f7f9 fe3d 	bl	8000168 <__aeabi_dsub>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	3430      	adds	r4, #48	; 0x30
 80064f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064fc:	f807 4b01 	strb.w	r4, [r7], #1
 8006500:	f7fa fa5c 	bl	80009bc <__aeabi_dcmplt>
 8006504:	2800      	cmp	r0, #0
 8006506:	d173      	bne.n	80065f0 <_dtoa_r+0x638>
 8006508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650c:	2000      	movs	r0, #0
 800650e:	4911      	ldr	r1, [pc, #68]	; (8006554 <_dtoa_r+0x59c>)
 8006510:	f7f9 fe2a 	bl	8000168 <__aeabi_dsub>
 8006514:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006518:	f7fa fa50 	bl	80009bc <__aeabi_dcmplt>
 800651c:	2800      	cmp	r0, #0
 800651e:	f040 80b6 	bne.w	800668e <_dtoa_r+0x6d6>
 8006522:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006524:	429f      	cmp	r7, r3
 8006526:	f43f af7a 	beq.w	800641e <_dtoa_r+0x466>
 800652a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800652e:	2200      	movs	r2, #0
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <_dtoa_r+0x5a0>)
 8006532:	f7f9 ffd1 	bl	80004d8 <__aeabi_dmul>
 8006536:	2200      	movs	r2, #0
 8006538:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800653c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <_dtoa_r+0x5a0>)
 8006542:	f7f9 ffc9 	bl	80004d8 <__aeabi_dmul>
 8006546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800654a:	e7c3      	b.n	80064d4 <_dtoa_r+0x51c>
 800654c:	08009770 	.word	0x08009770
 8006550:	08009748 	.word	0x08009748
 8006554:	3ff00000 	.word	0x3ff00000
 8006558:	40240000 	.word	0x40240000
 800655c:	401c0000 	.word	0x401c0000
 8006560:	40140000 	.word	0x40140000
 8006564:	3fe00000 	.word	0x3fe00000
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7f9 ffb4 	bl	80004d8 <__aeabi_dmul>
 8006570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006572:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006576:	9c03      	ldr	r4, [sp, #12]
 8006578:	9314      	str	r3, [sp, #80]	; 0x50
 800657a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800657e:	f7fa fa5b 	bl	8000a38 <__aeabi_d2iz>
 8006582:	9015      	str	r0, [sp, #84]	; 0x54
 8006584:	f7f9 ff3e 	bl	8000404 <__aeabi_i2d>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006590:	f7f9 fdea 	bl	8000168 <__aeabi_dsub>
 8006594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006596:	4606      	mov	r6, r0
 8006598:	3330      	adds	r3, #48	; 0x30
 800659a:	f804 3b01 	strb.w	r3, [r4], #1
 800659e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a0:	460f      	mov	r7, r1
 80065a2:	429c      	cmp	r4, r3
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	d124      	bne.n	80065f4 <_dtoa_r+0x63c>
 80065aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ae:	4baf      	ldr	r3, [pc, #700]	; (800686c <_dtoa_r+0x8b4>)
 80065b0:	f7f9 fddc 	bl	800016c <__adddf3>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7fa fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d163      	bne.n	800668c <_dtoa_r+0x6d4>
 80065c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065c8:	2000      	movs	r0, #0
 80065ca:	49a8      	ldr	r1, [pc, #672]	; (800686c <_dtoa_r+0x8b4>)
 80065cc:	f7f9 fdcc 	bl	8000168 <__aeabi_dsub>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7fa f9f0 	bl	80009bc <__aeabi_dcmplt>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f43f af1e 	beq.w	800641e <_dtoa_r+0x466>
 80065e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065e4:	1e7b      	subs	r3, r7, #1
 80065e6:	9314      	str	r3, [sp, #80]	; 0x50
 80065e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d0f8      	beq.n	80065e2 <_dtoa_r+0x62a>
 80065f0:	46c3      	mov	fp, r8
 80065f2:	e03b      	b.n	800666c <_dtoa_r+0x6b4>
 80065f4:	4b9e      	ldr	r3, [pc, #632]	; (8006870 <_dtoa_r+0x8b8>)
 80065f6:	f7f9 ff6f 	bl	80004d8 <__aeabi_dmul>
 80065fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065fe:	e7bc      	b.n	800657a <_dtoa_r+0x5c2>
 8006600:	9f03      	ldr	r7, [sp, #12]
 8006602:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	f7fa f88d 	bl	800072c <__aeabi_ddiv>
 8006612:	f7fa fa11 	bl	8000a38 <__aeabi_d2iz>
 8006616:	4604      	mov	r4, r0
 8006618:	f7f9 fef4 	bl	8000404 <__aeabi_i2d>
 800661c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006620:	f7f9 ff5a 	bl	80004d8 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7f9 fd9c 	bl	8000168 <__aeabi_dsub>
 8006630:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006634:	f807 6b01 	strb.w	r6, [r7], #1
 8006638:	9e03      	ldr	r6, [sp, #12]
 800663a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800663e:	1bbe      	subs	r6, r7, r6
 8006640:	45b4      	cmp	ip, r6
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	d136      	bne.n	80066b6 <_dtoa_r+0x6fe>
 8006648:	f7f9 fd90 	bl	800016c <__adddf3>
 800664c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006650:	4680      	mov	r8, r0
 8006652:	4689      	mov	r9, r1
 8006654:	f7fa f9d0 	bl	80009f8 <__aeabi_dcmpgt>
 8006658:	bb58      	cbnz	r0, 80066b2 <_dtoa_r+0x6fa>
 800665a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f7fa f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 8006666:	b108      	cbz	r0, 800666c <_dtoa_r+0x6b4>
 8006668:	07e3      	lsls	r3, r4, #31
 800666a:	d422      	bmi.n	80066b2 <_dtoa_r+0x6fa>
 800666c:	4651      	mov	r1, sl
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fbc2 	bl	8006df8 <_Bfree>
 8006674:	2300      	movs	r3, #0
 8006676:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006678:	703b      	strb	r3, [r7, #0]
 800667a:	f10b 0301 	add.w	r3, fp, #1
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006682:	2b00      	cmp	r3, #0
 8006684:	f43f ace6 	beq.w	8006054 <_dtoa_r+0x9c>
 8006688:	601f      	str	r7, [r3, #0]
 800668a:	e4e3      	b.n	8006054 <_dtoa_r+0x9c>
 800668c:	4627      	mov	r7, r4
 800668e:	463b      	mov	r3, r7
 8006690:	461f      	mov	r7, r3
 8006692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006696:	2a39      	cmp	r2, #57	; 0x39
 8006698:	d107      	bne.n	80066aa <_dtoa_r+0x6f2>
 800669a:	9a03      	ldr	r2, [sp, #12]
 800669c:	429a      	cmp	r2, r3
 800669e:	d1f7      	bne.n	8006690 <_dtoa_r+0x6d8>
 80066a0:	2230      	movs	r2, #48	; 0x30
 80066a2:	9903      	ldr	r1, [sp, #12]
 80066a4:	f108 0801 	add.w	r8, r8, #1
 80066a8:	700a      	strb	r2, [r1, #0]
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	3201      	adds	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	e79e      	b.n	80065f0 <_dtoa_r+0x638>
 80066b2:	46d8      	mov	r8, fp
 80066b4:	e7eb      	b.n	800668e <_dtoa_r+0x6d6>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4b6d      	ldr	r3, [pc, #436]	; (8006870 <_dtoa_r+0x8b8>)
 80066ba:	f7f9 ff0d 	bl	80004d8 <__aeabi_dmul>
 80066be:	2200      	movs	r2, #0
 80066c0:	2300      	movs	r3, #0
 80066c2:	4680      	mov	r8, r0
 80066c4:	4689      	mov	r9, r1
 80066c6:	f7fa f96f 	bl	80009a8 <__aeabi_dcmpeq>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d09b      	beq.n	8006606 <_dtoa_r+0x64e>
 80066ce:	e7cd      	b.n	800666c <_dtoa_r+0x6b4>
 80066d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	f000 80c4 	beq.w	8006860 <_dtoa_r+0x8a8>
 80066d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066da:	2a01      	cmp	r2, #1
 80066dc:	f300 80a8 	bgt.w	8006830 <_dtoa_r+0x878>
 80066e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	f000 80a0 	beq.w	8006828 <_dtoa_r+0x870>
 80066e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066ec:	464f      	mov	r7, r9
 80066ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f2:	2101      	movs	r1, #1
 80066f4:	441a      	add	r2, r3
 80066f6:	4628      	mov	r0, r5
 80066f8:	4499      	add	r9, r3
 80066fa:	9209      	str	r2, [sp, #36]	; 0x24
 80066fc:	f000 fc7c 	bl	8006ff8 <__i2b>
 8006700:	4606      	mov	r6, r0
 8006702:	b15f      	cbz	r7, 800671c <_dtoa_r+0x764>
 8006704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	dd08      	ble.n	800671c <_dtoa_r+0x764>
 800670a:	42bb      	cmp	r3, r7
 800670c:	bfa8      	it	ge
 800670e:	463b      	movge	r3, r7
 8006710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006712:	eba9 0903 	sub.w	r9, r9, r3
 8006716:	1aff      	subs	r7, r7, r3
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	9309      	str	r3, [sp, #36]	; 0x24
 800671c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671e:	b1f3      	cbz	r3, 800675e <_dtoa_r+0x7a6>
 8006720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80a0 	beq.w	8006868 <_dtoa_r+0x8b0>
 8006728:	2c00      	cmp	r4, #0
 800672a:	dd10      	ble.n	800674e <_dtoa_r+0x796>
 800672c:	4631      	mov	r1, r6
 800672e:	4622      	mov	r2, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 fd1f 	bl	8007174 <__pow5mult>
 8006736:	4652      	mov	r2, sl
 8006738:	4601      	mov	r1, r0
 800673a:	4606      	mov	r6, r0
 800673c:	4628      	mov	r0, r5
 800673e:	f000 fc71 	bl	8007024 <__multiply>
 8006742:	4680      	mov	r8, r0
 8006744:	4651      	mov	r1, sl
 8006746:	4628      	mov	r0, r5
 8006748:	f000 fb56 	bl	8006df8 <_Bfree>
 800674c:	46c2      	mov	sl, r8
 800674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006750:	1b1a      	subs	r2, r3, r4
 8006752:	d004      	beq.n	800675e <_dtoa_r+0x7a6>
 8006754:	4651      	mov	r1, sl
 8006756:	4628      	mov	r0, r5
 8006758:	f000 fd0c 	bl	8007174 <__pow5mult>
 800675c:	4682      	mov	sl, r0
 800675e:	2101      	movs	r1, #1
 8006760:	4628      	mov	r0, r5
 8006762:	f000 fc49 	bl	8006ff8 <__i2b>
 8006766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006768:	4604      	mov	r4, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f340 8082 	ble.w	8006874 <_dtoa_r+0x8bc>
 8006770:	461a      	mov	r2, r3
 8006772:	4601      	mov	r1, r0
 8006774:	4628      	mov	r0, r5
 8006776:	f000 fcfd 	bl	8007174 <__pow5mult>
 800677a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800677c:	4604      	mov	r4, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	dd7b      	ble.n	800687a <_dtoa_r+0x8c2>
 8006782:	f04f 0800 	mov.w	r8, #0
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800678c:	6918      	ldr	r0, [r3, #16]
 800678e:	f000 fbe5 	bl	8006f5c <__hi0bits>
 8006792:	f1c0 0020 	rsb	r0, r0, #32
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	4418      	add	r0, r3
 800679a:	f010 001f 	ands.w	r0, r0, #31
 800679e:	f000 8092 	beq.w	80068c6 <_dtoa_r+0x90e>
 80067a2:	f1c0 0320 	rsb	r3, r0, #32
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	f340 8085 	ble.w	80068b6 <_dtoa_r+0x8fe>
 80067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ae:	f1c0 001c 	rsb	r0, r0, #28
 80067b2:	4403      	add	r3, r0
 80067b4:	4481      	add	r9, r0
 80067b6:	4407      	add	r7, r0
 80067b8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	dd05      	ble.n	80067cc <_dtoa_r+0x814>
 80067c0:	4651      	mov	r1, sl
 80067c2:	464a      	mov	r2, r9
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 fd2f 	bl	8007228 <__lshift>
 80067ca:	4682      	mov	sl, r0
 80067cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dd05      	ble.n	80067de <_dtoa_r+0x826>
 80067d2:	4621      	mov	r1, r4
 80067d4:	461a      	mov	r2, r3
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fd26 	bl	8007228 <__lshift>
 80067dc:	4604      	mov	r4, r0
 80067de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d072      	beq.n	80068ca <_dtoa_r+0x912>
 80067e4:	4621      	mov	r1, r4
 80067e6:	4650      	mov	r0, sl
 80067e8:	f000 fd8a 	bl	8007300 <__mcmp>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	da6c      	bge.n	80068ca <_dtoa_r+0x912>
 80067f0:	2300      	movs	r3, #0
 80067f2:	4651      	mov	r1, sl
 80067f4:	220a      	movs	r2, #10
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 fb20 	bl	8006e3c <__multadd>
 80067fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fe:	4682      	mov	sl, r0
 8006800:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 81ac 	beq.w	8006b62 <_dtoa_r+0xbaa>
 800680a:	2300      	movs	r3, #0
 800680c:	4631      	mov	r1, r6
 800680e:	220a      	movs	r2, #10
 8006810:	4628      	mov	r0, r5
 8006812:	f000 fb13 	bl	8006e3c <__multadd>
 8006816:	9b06      	ldr	r3, [sp, #24]
 8006818:	4606      	mov	r6, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	f300 8093 	bgt.w	8006946 <_dtoa_r+0x98e>
 8006820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006822:	2b02      	cmp	r3, #2
 8006824:	dc59      	bgt.n	80068da <_dtoa_r+0x922>
 8006826:	e08e      	b.n	8006946 <_dtoa_r+0x98e>
 8006828:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800682a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800682e:	e75d      	b.n	80066ec <_dtoa_r+0x734>
 8006830:	9b08      	ldr	r3, [sp, #32]
 8006832:	1e5c      	subs	r4, r3, #1
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	42a3      	cmp	r3, r4
 8006838:	bfbf      	itttt	lt
 800683a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800683c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800683e:	1ae3      	sublt	r3, r4, r3
 8006840:	18d2      	addlt	r2, r2, r3
 8006842:	bfa8      	it	ge
 8006844:	1b1c      	subge	r4, r3, r4
 8006846:	9b08      	ldr	r3, [sp, #32]
 8006848:	bfbe      	ittt	lt
 800684a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800684c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800684e:	2400      	movlt	r4, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	bfb5      	itete	lt
 8006854:	eba9 0703 	sublt.w	r7, r9, r3
 8006858:	464f      	movge	r7, r9
 800685a:	2300      	movlt	r3, #0
 800685c:	9b08      	ldrge	r3, [sp, #32]
 800685e:	e747      	b.n	80066f0 <_dtoa_r+0x738>
 8006860:	464f      	mov	r7, r9
 8006862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006864:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006866:	e74c      	b.n	8006702 <_dtoa_r+0x74a>
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	e773      	b.n	8006754 <_dtoa_r+0x79c>
 800686c:	3fe00000 	.word	0x3fe00000
 8006870:	40240000 	.word	0x40240000
 8006874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006876:	2b01      	cmp	r3, #1
 8006878:	dc18      	bgt.n	80068ac <_dtoa_r+0x8f4>
 800687a:	9b04      	ldr	r3, [sp, #16]
 800687c:	b9b3      	cbnz	r3, 80068ac <_dtoa_r+0x8f4>
 800687e:	9b05      	ldr	r3, [sp, #20]
 8006880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006884:	b993      	cbnz	r3, 80068ac <_dtoa_r+0x8f4>
 8006886:	9b05      	ldr	r3, [sp, #20]
 8006888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800688c:	0d1b      	lsrs	r3, r3, #20
 800688e:	051b      	lsls	r3, r3, #20
 8006890:	b17b      	cbz	r3, 80068b2 <_dtoa_r+0x8fa>
 8006892:	f04f 0801 	mov.w	r8, #1
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	f109 0901 	add.w	r9, r9, #1
 800689c:	3301      	adds	r3, #1
 800689e:	9309      	str	r3, [sp, #36]	; 0x24
 80068a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f47f af6f 	bne.w	8006786 <_dtoa_r+0x7ce>
 80068a8:	2001      	movs	r0, #1
 80068aa:	e774      	b.n	8006796 <_dtoa_r+0x7de>
 80068ac:	f04f 0800 	mov.w	r8, #0
 80068b0:	e7f6      	b.n	80068a0 <_dtoa_r+0x8e8>
 80068b2:	4698      	mov	r8, r3
 80068b4:	e7f4      	b.n	80068a0 <_dtoa_r+0x8e8>
 80068b6:	d080      	beq.n	80067ba <_dtoa_r+0x802>
 80068b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ba:	331c      	adds	r3, #28
 80068bc:	441a      	add	r2, r3
 80068be:	4499      	add	r9, r3
 80068c0:	441f      	add	r7, r3
 80068c2:	9209      	str	r2, [sp, #36]	; 0x24
 80068c4:	e779      	b.n	80067ba <_dtoa_r+0x802>
 80068c6:	4603      	mov	r3, r0
 80068c8:	e7f6      	b.n	80068b8 <_dtoa_r+0x900>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dc34      	bgt.n	800693a <_dtoa_r+0x982>
 80068d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	dd31      	ble.n	800693a <_dtoa_r+0x982>
 80068d6:	9b08      	ldr	r3, [sp, #32]
 80068d8:	9306      	str	r3, [sp, #24]
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	b963      	cbnz	r3, 80068f8 <_dtoa_r+0x940>
 80068de:	4621      	mov	r1, r4
 80068e0:	2205      	movs	r2, #5
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 faaa 	bl	8006e3c <__multadd>
 80068e8:	4601      	mov	r1, r0
 80068ea:	4604      	mov	r4, r0
 80068ec:	4650      	mov	r0, sl
 80068ee:	f000 fd07 	bl	8007300 <__mcmp>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f73f adbf 	bgt.w	8006476 <_dtoa_r+0x4be>
 80068f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068fa:	9f03      	ldr	r7, [sp, #12]
 80068fc:	ea6f 0b03 	mvn.w	fp, r3
 8006900:	f04f 0800 	mov.w	r8, #0
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f000 fa76 	bl	8006df8 <_Bfree>
 800690c:	2e00      	cmp	r6, #0
 800690e:	f43f aead 	beq.w	800666c <_dtoa_r+0x6b4>
 8006912:	f1b8 0f00 	cmp.w	r8, #0
 8006916:	d005      	beq.n	8006924 <_dtoa_r+0x96c>
 8006918:	45b0      	cmp	r8, r6
 800691a:	d003      	beq.n	8006924 <_dtoa_r+0x96c>
 800691c:	4641      	mov	r1, r8
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fa6a 	bl	8006df8 <_Bfree>
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	f000 fa66 	bl	8006df8 <_Bfree>
 800692c:	e69e      	b.n	800666c <_dtoa_r+0x6b4>
 800692e:	2400      	movs	r4, #0
 8006930:	4626      	mov	r6, r4
 8006932:	e7e1      	b.n	80068f8 <_dtoa_r+0x940>
 8006934:	46c3      	mov	fp, r8
 8006936:	4626      	mov	r6, r4
 8006938:	e59d      	b.n	8006476 <_dtoa_r+0x4be>
 800693a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80c8 	beq.w	8006ad2 <_dtoa_r+0xb1a>
 8006942:	9b08      	ldr	r3, [sp, #32]
 8006944:	9306      	str	r3, [sp, #24]
 8006946:	2f00      	cmp	r7, #0
 8006948:	dd05      	ble.n	8006956 <_dtoa_r+0x99e>
 800694a:	4631      	mov	r1, r6
 800694c:	463a      	mov	r2, r7
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fc6a 	bl	8007228 <__lshift>
 8006954:	4606      	mov	r6, r0
 8006956:	f1b8 0f00 	cmp.w	r8, #0
 800695a:	d05b      	beq.n	8006a14 <_dtoa_r+0xa5c>
 800695c:	4628      	mov	r0, r5
 800695e:	6871      	ldr	r1, [r6, #4]
 8006960:	f000 fa0a 	bl	8006d78 <_Balloc>
 8006964:	4607      	mov	r7, r0
 8006966:	b928      	cbnz	r0, 8006974 <_dtoa_r+0x9bc>
 8006968:	4602      	mov	r2, r0
 800696a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800696e:	4b81      	ldr	r3, [pc, #516]	; (8006b74 <_dtoa_r+0xbbc>)
 8006970:	f7ff bb36 	b.w	8005fe0 <_dtoa_r+0x28>
 8006974:	6932      	ldr	r2, [r6, #16]
 8006976:	f106 010c 	add.w	r1, r6, #12
 800697a:	3202      	adds	r2, #2
 800697c:	0092      	lsls	r2, r2, #2
 800697e:	300c      	adds	r0, #12
 8006980:	f001 ff72 	bl	8008868 <memcpy>
 8006984:	2201      	movs	r2, #1
 8006986:	4639      	mov	r1, r7
 8006988:	4628      	mov	r0, r5
 800698a:	f000 fc4d 	bl	8007228 <__lshift>
 800698e:	46b0      	mov	r8, r6
 8006990:	4606      	mov	r6, r0
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	9a03      	ldr	r2, [sp, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	9308      	str	r3, [sp, #32]
 800699a:	9b06      	ldr	r3, [sp, #24]
 800699c:	4413      	add	r3, r2
 800699e:	930b      	str	r3, [sp, #44]	; 0x2c
 80069a0:	9b04      	ldr	r3, [sp, #16]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	930a      	str	r3, [sp, #40]	; 0x28
 80069a8:	9b08      	ldr	r3, [sp, #32]
 80069aa:	4621      	mov	r1, r4
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4650      	mov	r0, sl
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	f7ff fa77 	bl	8005ea4 <quorem>
 80069b6:	4641      	mov	r1, r8
 80069b8:	9006      	str	r0, [sp, #24]
 80069ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069be:	4650      	mov	r0, sl
 80069c0:	f000 fc9e 	bl	8007300 <__mcmp>
 80069c4:	4632      	mov	r2, r6
 80069c6:	9009      	str	r0, [sp, #36]	; 0x24
 80069c8:	4621      	mov	r1, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fcb4 	bl	8007338 <__mdiff>
 80069d0:	68c2      	ldr	r2, [r0, #12]
 80069d2:	4607      	mov	r7, r0
 80069d4:	bb02      	cbnz	r2, 8006a18 <_dtoa_r+0xa60>
 80069d6:	4601      	mov	r1, r0
 80069d8:	4650      	mov	r0, sl
 80069da:	f000 fc91 	bl	8007300 <__mcmp>
 80069de:	4602      	mov	r2, r0
 80069e0:	4639      	mov	r1, r7
 80069e2:	4628      	mov	r0, r5
 80069e4:	920c      	str	r2, [sp, #48]	; 0x30
 80069e6:	f000 fa07 	bl	8006df8 <_Bfree>
 80069ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ee:	9f08      	ldr	r7, [sp, #32]
 80069f0:	ea43 0102 	orr.w	r1, r3, r2
 80069f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f6:	4319      	orrs	r1, r3
 80069f8:	d110      	bne.n	8006a1c <_dtoa_r+0xa64>
 80069fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069fe:	d029      	beq.n	8006a54 <_dtoa_r+0xa9c>
 8006a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dd02      	ble.n	8006a0c <_dtoa_r+0xa54>
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a0c:	9b04      	ldr	r3, [sp, #16]
 8006a0e:	f883 9000 	strb.w	r9, [r3]
 8006a12:	e777      	b.n	8006904 <_dtoa_r+0x94c>
 8006a14:	4630      	mov	r0, r6
 8006a16:	e7ba      	b.n	800698e <_dtoa_r+0x9d6>
 8006a18:	2201      	movs	r2, #1
 8006a1a:	e7e1      	b.n	80069e0 <_dtoa_r+0xa28>
 8006a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	db04      	blt.n	8006a2c <_dtoa_r+0xa74>
 8006a22:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a24:	430b      	orrs	r3, r1
 8006a26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	d120      	bne.n	8006a6e <_dtoa_r+0xab6>
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	dded      	ble.n	8006a0c <_dtoa_r+0xa54>
 8006a30:	4651      	mov	r1, sl
 8006a32:	2201      	movs	r2, #1
 8006a34:	4628      	mov	r0, r5
 8006a36:	f000 fbf7 	bl	8007228 <__lshift>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	f000 fc5f 	bl	8007300 <__mcmp>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	dc03      	bgt.n	8006a4e <_dtoa_r+0xa96>
 8006a46:	d1e1      	bne.n	8006a0c <_dtoa_r+0xa54>
 8006a48:	f019 0f01 	tst.w	r9, #1
 8006a4c:	d0de      	beq.n	8006a0c <_dtoa_r+0xa54>
 8006a4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a52:	d1d8      	bne.n	8006a06 <_dtoa_r+0xa4e>
 8006a54:	2339      	movs	r3, #57	; 0x39
 8006a56:	9a04      	ldr	r2, [sp, #16]
 8006a58:	7013      	strb	r3, [r2, #0]
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	461f      	mov	r7, r3
 8006a5e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	2a39      	cmp	r2, #57	; 0x39
 8006a66:	d06b      	beq.n	8006b40 <_dtoa_r+0xb88>
 8006a68:	3201      	adds	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e74a      	b.n	8006904 <_dtoa_r+0x94c>
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	dd07      	ble.n	8006a82 <_dtoa_r+0xaca>
 8006a72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a76:	d0ed      	beq.n	8006a54 <_dtoa_r+0xa9c>
 8006a78:	9a04      	ldr	r2, [sp, #16]
 8006a7a:	f109 0301 	add.w	r3, r9, #1
 8006a7e:	7013      	strb	r3, [r2, #0]
 8006a80:	e740      	b.n	8006904 <_dtoa_r+0x94c>
 8006a82:	9b08      	ldr	r3, [sp, #32]
 8006a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a86:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d042      	beq.n	8006b14 <_dtoa_r+0xb5c>
 8006a8e:	4651      	mov	r1, sl
 8006a90:	2300      	movs	r3, #0
 8006a92:	220a      	movs	r2, #10
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 f9d1 	bl	8006e3c <__multadd>
 8006a9a:	45b0      	cmp	r8, r6
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	f04f 020a 	mov.w	r2, #10
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	d107      	bne.n	8006abc <_dtoa_r+0xb04>
 8006aac:	f000 f9c6 	bl	8006e3c <__multadd>
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	9b08      	ldr	r3, [sp, #32]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	9308      	str	r3, [sp, #32]
 8006aba:	e775      	b.n	80069a8 <_dtoa_r+0x9f0>
 8006abc:	f000 f9be 	bl	8006e3c <__multadd>
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	220a      	movs	r2, #10
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f9b7 	bl	8006e3c <__multadd>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	e7f0      	b.n	8006ab4 <_dtoa_r+0xafc>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	9306      	str	r3, [sp, #24]
 8006ad6:	9f03      	ldr	r7, [sp, #12]
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4650      	mov	r0, sl
 8006adc:	f7ff f9e2 	bl	8005ea4 <quorem>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ae6:	f807 9b01 	strb.w	r9, [r7], #1
 8006aea:	1afa      	subs	r2, r7, r3
 8006aec:	9b06      	ldr	r3, [sp, #24]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	dd07      	ble.n	8006b02 <_dtoa_r+0xb4a>
 8006af2:	4651      	mov	r1, sl
 8006af4:	2300      	movs	r3, #0
 8006af6:	220a      	movs	r2, #10
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 f99f 	bl	8006e3c <__multadd>
 8006afe:	4682      	mov	sl, r0
 8006b00:	e7ea      	b.n	8006ad8 <_dtoa_r+0xb20>
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	f04f 0800 	mov.w	r8, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfcc      	ite	gt
 8006b0c:	461f      	movgt	r7, r3
 8006b0e:	2701      	movle	r7, #1
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	441f      	add	r7, r3
 8006b14:	4651      	mov	r1, sl
 8006b16:	2201      	movs	r2, #1
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 fb85 	bl	8007228 <__lshift>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4682      	mov	sl, r0
 8006b22:	f000 fbed 	bl	8007300 <__mcmp>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	dc97      	bgt.n	8006a5a <_dtoa_r+0xaa2>
 8006b2a:	d102      	bne.n	8006b32 <_dtoa_r+0xb7a>
 8006b2c:	f019 0f01 	tst.w	r9, #1
 8006b30:	d193      	bne.n	8006a5a <_dtoa_r+0xaa2>
 8006b32:	463b      	mov	r3, r7
 8006b34:	461f      	mov	r7, r3
 8006b36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3a:	2a30      	cmp	r2, #48	; 0x30
 8006b3c:	d0fa      	beq.n	8006b34 <_dtoa_r+0xb7c>
 8006b3e:	e6e1      	b.n	8006904 <_dtoa_r+0x94c>
 8006b40:	9a03      	ldr	r2, [sp, #12]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d18a      	bne.n	8006a5c <_dtoa_r+0xaa4>
 8006b46:	2331      	movs	r3, #49	; 0x31
 8006b48:	f10b 0b01 	add.w	fp, fp, #1
 8006b4c:	e797      	b.n	8006a7e <_dtoa_r+0xac6>
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <_dtoa_r+0xbc0>)
 8006b50:	f7ff ba9f 	b.w	8006092 <_dtoa_r+0xda>
 8006b54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f47f aa77 	bne.w	800604a <_dtoa_r+0x92>
 8006b5c:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <_dtoa_r+0xbc4>)
 8006b5e:	f7ff ba98 	b.w	8006092 <_dtoa_r+0xda>
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dcb6      	bgt.n	8006ad6 <_dtoa_r+0xb1e>
 8006b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	f73f aeb5 	bgt.w	80068da <_dtoa_r+0x922>
 8006b70:	e7b1      	b.n	8006ad6 <_dtoa_r+0xb1e>
 8006b72:	bf00      	nop
 8006b74:	080096db 	.word	0x080096db
 8006b78:	08009636 	.word	0x08009636
 8006b7c:	0800965f 	.word	0x0800965f

08006b80 <_free_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4605      	mov	r5, r0
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d040      	beq.n	8006c0a <_free_r+0x8a>
 8006b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8c:	1f0c      	subs	r4, r1, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfb8      	it	lt
 8006b92:	18e4      	addlt	r4, r4, r3
 8006b94:	f000 f8e4 	bl	8006d60 <__malloc_lock>
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <_free_r+0x8c>)
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	b933      	cbnz	r3, 8006bac <_free_r+0x2c>
 8006b9e:	6063      	str	r3, [r4, #4]
 8006ba0:	6014      	str	r4, [r2, #0]
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ba8:	f000 b8e0 	b.w	8006d6c <__malloc_unlock>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d908      	bls.n	8006bc2 <_free_r+0x42>
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	1821      	adds	r1, r4, r0
 8006bb4:	428b      	cmp	r3, r1
 8006bb6:	bf01      	itttt	eq
 8006bb8:	6819      	ldreq	r1, [r3, #0]
 8006bba:	685b      	ldreq	r3, [r3, #4]
 8006bbc:	1809      	addeq	r1, r1, r0
 8006bbe:	6021      	streq	r1, [r4, #0]
 8006bc0:	e7ed      	b.n	8006b9e <_free_r+0x1e>
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b10b      	cbz	r3, 8006bcc <_free_r+0x4c>
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d9fa      	bls.n	8006bc2 <_free_r+0x42>
 8006bcc:	6811      	ldr	r1, [r2, #0]
 8006bce:	1850      	adds	r0, r2, r1
 8006bd0:	42a0      	cmp	r0, r4
 8006bd2:	d10b      	bne.n	8006bec <_free_r+0x6c>
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	4401      	add	r1, r0
 8006bd8:	1850      	adds	r0, r2, r1
 8006bda:	4283      	cmp	r3, r0
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	d1e0      	bne.n	8006ba2 <_free_r+0x22>
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4408      	add	r0, r1
 8006be6:	6010      	str	r0, [r2, #0]
 8006be8:	6053      	str	r3, [r2, #4]
 8006bea:	e7da      	b.n	8006ba2 <_free_r+0x22>
 8006bec:	d902      	bls.n	8006bf4 <_free_r+0x74>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	e7d6      	b.n	8006ba2 <_free_r+0x22>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	1821      	adds	r1, r4, r0
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	bf01      	itttt	eq
 8006bfc:	6819      	ldreq	r1, [r3, #0]
 8006bfe:	685b      	ldreq	r3, [r3, #4]
 8006c00:	1809      	addeq	r1, r1, r0
 8006c02:	6021      	streq	r1, [r4, #0]
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	6054      	str	r4, [r2, #4]
 8006c08:	e7cb      	b.n	8006ba2 <_free_r+0x22>
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	2000048c 	.word	0x2000048c

08006c10 <malloc>:
 8006c10:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <malloc+0xc>)
 8006c12:	4601      	mov	r1, r0
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	f000 b823 	b.w	8006c60 <_malloc_r>
 8006c1a:	bf00      	nop
 8006c1c:	20000074 	.word	0x20000074

08006c20 <sbrk_aligned>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4e0e      	ldr	r6, [pc, #56]	; (8006c5c <sbrk_aligned+0x3c>)
 8006c24:	460c      	mov	r4, r1
 8006c26:	6831      	ldr	r1, [r6, #0]
 8006c28:	4605      	mov	r5, r0
 8006c2a:	b911      	cbnz	r1, 8006c32 <sbrk_aligned+0x12>
 8006c2c:	f001 fe0c 	bl	8008848 <_sbrk_r>
 8006c30:	6030      	str	r0, [r6, #0]
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f001 fe07 	bl	8008848 <_sbrk_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d00a      	beq.n	8006c54 <sbrk_aligned+0x34>
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	f024 0403 	bic.w	r4, r4, #3
 8006c44:	42a0      	cmp	r0, r4
 8006c46:	d007      	beq.n	8006c58 <sbrk_aligned+0x38>
 8006c48:	1a21      	subs	r1, r4, r0
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f001 fdfc 	bl	8008848 <_sbrk_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d101      	bne.n	8006c58 <sbrk_aligned+0x38>
 8006c54:	f04f 34ff 	mov.w	r4, #4294967295
 8006c58:	4620      	mov	r0, r4
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	20000490 	.word	0x20000490

08006c60 <_malloc_r>:
 8006c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c64:	1ccd      	adds	r5, r1, #3
 8006c66:	f025 0503 	bic.w	r5, r5, #3
 8006c6a:	3508      	adds	r5, #8
 8006c6c:	2d0c      	cmp	r5, #12
 8006c6e:	bf38      	it	cc
 8006c70:	250c      	movcc	r5, #12
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	4607      	mov	r7, r0
 8006c76:	db01      	blt.n	8006c7c <_malloc_r+0x1c>
 8006c78:	42a9      	cmp	r1, r5
 8006c7a:	d905      	bls.n	8006c88 <_malloc_r+0x28>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	2600      	movs	r6, #0
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	4630      	mov	r0, r6
 8006c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d5c <_malloc_r+0xfc>
 8006c8c:	f000 f868 	bl	8006d60 <__malloc_lock>
 8006c90:	f8d8 3000 	ldr.w	r3, [r8]
 8006c94:	461c      	mov	r4, r3
 8006c96:	bb5c      	cbnz	r4, 8006cf0 <_malloc_r+0x90>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f7ff ffc0 	bl	8006c20 <sbrk_aligned>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	d155      	bne.n	8006d52 <_malloc_r+0xf2>
 8006ca6:	f8d8 4000 	ldr.w	r4, [r8]
 8006caa:	4626      	mov	r6, r4
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	d145      	bne.n	8006d3c <_malloc_r+0xdc>
 8006cb0:	2c00      	cmp	r4, #0
 8006cb2:	d048      	beq.n	8006d46 <_malloc_r+0xe6>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4638      	mov	r0, r7
 8006cba:	eb04 0903 	add.w	r9, r4, r3
 8006cbe:	f001 fdc3 	bl	8008848 <_sbrk_r>
 8006cc2:	4581      	cmp	r9, r0
 8006cc4:	d13f      	bne.n	8006d46 <_malloc_r+0xe6>
 8006cc6:	6821      	ldr	r1, [r4, #0]
 8006cc8:	4638      	mov	r0, r7
 8006cca:	1a6d      	subs	r5, r5, r1
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7ff ffa7 	bl	8006c20 <sbrk_aligned>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d037      	beq.n	8006d46 <_malloc_r+0xe6>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	442b      	add	r3, r5
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d038      	beq.n	8006d56 <_malloc_r+0xf6>
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	42a2      	cmp	r2, r4
 8006ce8:	d12b      	bne.n	8006d42 <_malloc_r+0xe2>
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	e00f      	b.n	8006d10 <_malloc_r+0xb0>
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	1b52      	subs	r2, r2, r5
 8006cf4:	d41f      	bmi.n	8006d36 <_malloc_r+0xd6>
 8006cf6:	2a0b      	cmp	r2, #11
 8006cf8:	d917      	bls.n	8006d2a <_malloc_r+0xca>
 8006cfa:	1961      	adds	r1, r4, r5
 8006cfc:	42a3      	cmp	r3, r4
 8006cfe:	6025      	str	r5, [r4, #0]
 8006d00:	bf18      	it	ne
 8006d02:	6059      	strne	r1, [r3, #4]
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	bf08      	it	eq
 8006d08:	f8c8 1000 	streq.w	r1, [r8]
 8006d0c:	5162      	str	r2, [r4, r5]
 8006d0e:	604b      	str	r3, [r1, #4]
 8006d10:	4638      	mov	r0, r7
 8006d12:	f104 060b 	add.w	r6, r4, #11
 8006d16:	f000 f829 	bl	8006d6c <__malloc_unlock>
 8006d1a:	f026 0607 	bic.w	r6, r6, #7
 8006d1e:	1d23      	adds	r3, r4, #4
 8006d20:	1af2      	subs	r2, r6, r3
 8006d22:	d0ae      	beq.n	8006c82 <_malloc_r+0x22>
 8006d24:	1b9b      	subs	r3, r3, r6
 8006d26:	50a3      	str	r3, [r4, r2]
 8006d28:	e7ab      	b.n	8006c82 <_malloc_r+0x22>
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	6862      	ldr	r2, [r4, #4]
 8006d2e:	d1dd      	bne.n	8006cec <_malloc_r+0x8c>
 8006d30:	f8c8 2000 	str.w	r2, [r8]
 8006d34:	e7ec      	b.n	8006d10 <_malloc_r+0xb0>
 8006d36:	4623      	mov	r3, r4
 8006d38:	6864      	ldr	r4, [r4, #4]
 8006d3a:	e7ac      	b.n	8006c96 <_malloc_r+0x36>
 8006d3c:	4634      	mov	r4, r6
 8006d3e:	6876      	ldr	r6, [r6, #4]
 8006d40:	e7b4      	b.n	8006cac <_malloc_r+0x4c>
 8006d42:	4613      	mov	r3, r2
 8006d44:	e7cc      	b.n	8006ce0 <_malloc_r+0x80>
 8006d46:	230c      	movs	r3, #12
 8006d48:	4638      	mov	r0, r7
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	f000 f80e 	bl	8006d6c <__malloc_unlock>
 8006d50:	e797      	b.n	8006c82 <_malloc_r+0x22>
 8006d52:	6025      	str	r5, [r4, #0]
 8006d54:	e7dc      	b.n	8006d10 <_malloc_r+0xb0>
 8006d56:	605b      	str	r3, [r3, #4]
 8006d58:	deff      	udf	#255	; 0xff
 8006d5a:	bf00      	nop
 8006d5c:	2000048c 	.word	0x2000048c

08006d60 <__malloc_lock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_lock+0x8>)
 8006d62:	f7ff b88a 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 8006d66:	bf00      	nop
 8006d68:	20000488 	.word	0x20000488

08006d6c <__malloc_unlock>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	; (8006d74 <__malloc_unlock+0x8>)
 8006d6e:	f7ff b885 	b.w	8005e7c <__retarget_lock_release_recursive>
 8006d72:	bf00      	nop
 8006d74:	20000488 	.word	0x20000488

08006d78 <_Balloc>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	69c6      	ldr	r6, [r0, #28]
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	b976      	cbnz	r6, 8006da0 <_Balloc+0x28>
 8006d82:	2010      	movs	r0, #16
 8006d84:	f7ff ff44 	bl	8006c10 <malloc>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	61e0      	str	r0, [r4, #28]
 8006d8c:	b920      	cbnz	r0, 8006d98 <_Balloc+0x20>
 8006d8e:	216b      	movs	r1, #107	; 0x6b
 8006d90:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <_Balloc+0x78>)
 8006d92:	4818      	ldr	r0, [pc, #96]	; (8006df4 <_Balloc+0x7c>)
 8006d94:	f001 fd7c 	bl	8008890 <__assert_func>
 8006d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d9c:	6006      	str	r6, [r0, #0]
 8006d9e:	60c6      	str	r6, [r0, #12]
 8006da0:	69e6      	ldr	r6, [r4, #28]
 8006da2:	68f3      	ldr	r3, [r6, #12]
 8006da4:	b183      	cbz	r3, 8006dc8 <_Balloc+0x50>
 8006da6:	69e3      	ldr	r3, [r4, #28]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dae:	b9b8      	cbnz	r0, 8006de0 <_Balloc+0x68>
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f605 	lsl.w	r6, r1, r5
 8006db6:	1d72      	adds	r2, r6, #5
 8006db8:	4620      	mov	r0, r4
 8006dba:	0092      	lsls	r2, r2, #2
 8006dbc:	f001 fd86 	bl	80088cc <_calloc_r>
 8006dc0:	b160      	cbz	r0, 8006ddc <_Balloc+0x64>
 8006dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dc6:	e00e      	b.n	8006de6 <_Balloc+0x6e>
 8006dc8:	2221      	movs	r2, #33	; 0x21
 8006dca:	2104      	movs	r1, #4
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f001 fd7d 	bl	80088cc <_calloc_r>
 8006dd2:	69e3      	ldr	r3, [r4, #28]
 8006dd4:	60f0      	str	r0, [r6, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e4      	bne.n	8006da6 <_Balloc+0x2e>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	6802      	ldr	r2, [r0, #0]
 8006de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006de6:	2300      	movs	r3, #0
 8006de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dec:	e7f7      	b.n	8006dde <_Balloc+0x66>
 8006dee:	bf00      	nop
 8006df0:	0800966c 	.word	0x0800966c
 8006df4:	080096ec 	.word	0x080096ec

08006df8 <_Bfree>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	69c6      	ldr	r6, [r0, #28]
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	b976      	cbnz	r6, 8006e20 <_Bfree+0x28>
 8006e02:	2010      	movs	r0, #16
 8006e04:	f7ff ff04 	bl	8006c10 <malloc>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	61e8      	str	r0, [r5, #28]
 8006e0c:	b920      	cbnz	r0, 8006e18 <_Bfree+0x20>
 8006e0e:	218f      	movs	r1, #143	; 0x8f
 8006e10:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <_Bfree+0x3c>)
 8006e12:	4809      	ldr	r0, [pc, #36]	; (8006e38 <_Bfree+0x40>)
 8006e14:	f001 fd3c 	bl	8008890 <__assert_func>
 8006e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e1c:	6006      	str	r6, [r0, #0]
 8006e1e:	60c6      	str	r6, [r0, #12]
 8006e20:	b13c      	cbz	r4, 8006e32 <_Bfree+0x3a>
 8006e22:	69eb      	ldr	r3, [r5, #28]
 8006e24:	6862      	ldr	r2, [r4, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e2c:	6021      	str	r1, [r4, #0]
 8006e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	0800966c 	.word	0x0800966c
 8006e38:	080096ec 	.word	0x080096ec

08006e3c <__multadd>:
 8006e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e40:	4607      	mov	r7, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	461e      	mov	r6, r3
 8006e46:	2000      	movs	r0, #0
 8006e48:	690d      	ldr	r5, [r1, #16]
 8006e4a:	f101 0c14 	add.w	ip, r1, #20
 8006e4e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e52:	3001      	adds	r0, #1
 8006e54:	b299      	uxth	r1, r3
 8006e56:	fb02 6101 	mla	r1, r2, r1, r6
 8006e5a:	0c1e      	lsrs	r6, r3, #16
 8006e5c:	0c0b      	lsrs	r3, r1, #16
 8006e5e:	fb02 3306 	mla	r3, r2, r6, r3
 8006e62:	b289      	uxth	r1, r1
 8006e64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e68:	4285      	cmp	r5, r0
 8006e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e72:	dcec      	bgt.n	8006e4e <__multadd+0x12>
 8006e74:	b30e      	cbz	r6, 8006eba <__multadd+0x7e>
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	42ab      	cmp	r3, r5
 8006e7a:	dc19      	bgt.n	8006eb0 <__multadd+0x74>
 8006e7c:	6861      	ldr	r1, [r4, #4]
 8006e7e:	4638      	mov	r0, r7
 8006e80:	3101      	adds	r1, #1
 8006e82:	f7ff ff79 	bl	8006d78 <_Balloc>
 8006e86:	4680      	mov	r8, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <__multadd+0x5a>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	21ba      	movs	r1, #186	; 0xba
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <__multadd+0x84>)
 8006e90:	480c      	ldr	r0, [pc, #48]	; (8006ec4 <__multadd+0x88>)
 8006e92:	f001 fcfd 	bl	8008890 <__assert_func>
 8006e96:	6922      	ldr	r2, [r4, #16]
 8006e98:	f104 010c 	add.w	r1, r4, #12
 8006e9c:	3202      	adds	r2, #2
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	300c      	adds	r0, #12
 8006ea2:	f001 fce1 	bl	8008868 <memcpy>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ffa5 	bl	8006df8 <_Bfree>
 8006eae:	4644      	mov	r4, r8
 8006eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	615e      	str	r6, [r3, #20]
 8006eb8:	6125      	str	r5, [r4, #16]
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	080096db 	.word	0x080096db
 8006ec4:	080096ec 	.word	0x080096ec

08006ec8 <__s2b>:
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	4615      	mov	r5, r2
 8006ece:	2209      	movs	r2, #9
 8006ed0:	461f      	mov	r7, r3
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eda:	4606      	mov	r6, r0
 8006edc:	2201      	movs	r2, #1
 8006ede:	2100      	movs	r1, #0
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	db09      	blt.n	8006ef8 <__s2b+0x30>
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff ff47 	bl	8006d78 <_Balloc>
 8006eea:	b940      	cbnz	r0, 8006efe <__s2b+0x36>
 8006eec:	4602      	mov	r2, r0
 8006eee:	21d3      	movs	r1, #211	; 0xd3
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <__s2b+0x8c>)
 8006ef2:	4819      	ldr	r0, [pc, #100]	; (8006f58 <__s2b+0x90>)
 8006ef4:	f001 fccc 	bl	8008890 <__assert_func>
 8006ef8:	0052      	lsls	r2, r2, #1
 8006efa:	3101      	adds	r1, #1
 8006efc:	e7f0      	b.n	8006ee0 <__s2b+0x18>
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	2d09      	cmp	r5, #9
 8006f02:	6143      	str	r3, [r0, #20]
 8006f04:	f04f 0301 	mov.w	r3, #1
 8006f08:	6103      	str	r3, [r0, #16]
 8006f0a:	dd16      	ble.n	8006f3a <__s2b+0x72>
 8006f0c:	f104 0909 	add.w	r9, r4, #9
 8006f10:	46c8      	mov	r8, r9
 8006f12:	442c      	add	r4, r5
 8006f14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f18:	4601      	mov	r1, r0
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	3b30      	subs	r3, #48	; 0x30
 8006f20:	f7ff ff8c 	bl	8006e3c <__multadd>
 8006f24:	45a0      	cmp	r8, r4
 8006f26:	d1f5      	bne.n	8006f14 <__s2b+0x4c>
 8006f28:	f1a5 0408 	sub.w	r4, r5, #8
 8006f2c:	444c      	add	r4, r9
 8006f2e:	1b2d      	subs	r5, r5, r4
 8006f30:	1963      	adds	r3, r4, r5
 8006f32:	42bb      	cmp	r3, r7
 8006f34:	db04      	blt.n	8006f40 <__s2b+0x78>
 8006f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3a:	2509      	movs	r5, #9
 8006f3c:	340a      	adds	r4, #10
 8006f3e:	e7f6      	b.n	8006f2e <__s2b+0x66>
 8006f40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f44:	4601      	mov	r1, r0
 8006f46:	220a      	movs	r2, #10
 8006f48:	4630      	mov	r0, r6
 8006f4a:	3b30      	subs	r3, #48	; 0x30
 8006f4c:	f7ff ff76 	bl	8006e3c <__multadd>
 8006f50:	e7ee      	b.n	8006f30 <__s2b+0x68>
 8006f52:	bf00      	nop
 8006f54:	080096db 	.word	0x080096db
 8006f58:	080096ec 	.word	0x080096ec

08006f5c <__hi0bits>:
 8006f5c:	0c02      	lsrs	r2, r0, #16
 8006f5e:	0412      	lsls	r2, r2, #16
 8006f60:	4603      	mov	r3, r0
 8006f62:	b9ca      	cbnz	r2, 8006f98 <__hi0bits+0x3c>
 8006f64:	0403      	lsls	r3, r0, #16
 8006f66:	2010      	movs	r0, #16
 8006f68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f6c:	bf04      	itt	eq
 8006f6e:	021b      	lsleq	r3, r3, #8
 8006f70:	3008      	addeq	r0, #8
 8006f72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f76:	bf04      	itt	eq
 8006f78:	011b      	lsleq	r3, r3, #4
 8006f7a:	3004      	addeq	r0, #4
 8006f7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f80:	bf04      	itt	eq
 8006f82:	009b      	lsleq	r3, r3, #2
 8006f84:	3002      	addeq	r0, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	db05      	blt.n	8006f96 <__hi0bits+0x3a>
 8006f8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006f8e:	f100 0001 	add.w	r0, r0, #1
 8006f92:	bf08      	it	eq
 8006f94:	2020      	moveq	r0, #32
 8006f96:	4770      	bx	lr
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e7e5      	b.n	8006f68 <__hi0bits+0xc>

08006f9c <__lo0bits>:
 8006f9c:	6803      	ldr	r3, [r0, #0]
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f013 0007 	ands.w	r0, r3, #7
 8006fa4:	d00b      	beq.n	8006fbe <__lo0bits+0x22>
 8006fa6:	07d9      	lsls	r1, r3, #31
 8006fa8:	d421      	bmi.n	8006fee <__lo0bits+0x52>
 8006faa:	0798      	lsls	r0, r3, #30
 8006fac:	bf49      	itett	mi
 8006fae:	085b      	lsrmi	r3, r3, #1
 8006fb0:	089b      	lsrpl	r3, r3, #2
 8006fb2:	2001      	movmi	r0, #1
 8006fb4:	6013      	strmi	r3, [r2, #0]
 8006fb6:	bf5c      	itt	pl
 8006fb8:	2002      	movpl	r0, #2
 8006fba:	6013      	strpl	r3, [r2, #0]
 8006fbc:	4770      	bx	lr
 8006fbe:	b299      	uxth	r1, r3
 8006fc0:	b909      	cbnz	r1, 8006fc6 <__lo0bits+0x2a>
 8006fc2:	2010      	movs	r0, #16
 8006fc4:	0c1b      	lsrs	r3, r3, #16
 8006fc6:	b2d9      	uxtb	r1, r3
 8006fc8:	b909      	cbnz	r1, 8006fce <__lo0bits+0x32>
 8006fca:	3008      	adds	r0, #8
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	0719      	lsls	r1, r3, #28
 8006fd0:	bf04      	itt	eq
 8006fd2:	091b      	lsreq	r3, r3, #4
 8006fd4:	3004      	addeq	r0, #4
 8006fd6:	0799      	lsls	r1, r3, #30
 8006fd8:	bf04      	itt	eq
 8006fda:	089b      	lsreq	r3, r3, #2
 8006fdc:	3002      	addeq	r0, #2
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	d403      	bmi.n	8006fea <__lo0bits+0x4e>
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	f100 0001 	add.w	r0, r0, #1
 8006fe8:	d003      	beq.n	8006ff2 <__lo0bits+0x56>
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	4770      	bx	lr
 8006fee:	2000      	movs	r0, #0
 8006ff0:	4770      	bx	lr
 8006ff2:	2020      	movs	r0, #32
 8006ff4:	4770      	bx	lr
	...

08006ff8 <__i2b>:
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	f7ff febb 	bl	8006d78 <_Balloc>
 8007002:	4602      	mov	r2, r0
 8007004:	b928      	cbnz	r0, 8007012 <__i2b+0x1a>
 8007006:	f240 1145 	movw	r1, #325	; 0x145
 800700a:	4b04      	ldr	r3, [pc, #16]	; (800701c <__i2b+0x24>)
 800700c:	4804      	ldr	r0, [pc, #16]	; (8007020 <__i2b+0x28>)
 800700e:	f001 fc3f 	bl	8008890 <__assert_func>
 8007012:	2301      	movs	r3, #1
 8007014:	6144      	str	r4, [r0, #20]
 8007016:	6103      	str	r3, [r0, #16]
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	080096db 	.word	0x080096db
 8007020:	080096ec 	.word	0x080096ec

08007024 <__multiply>:
 8007024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	4691      	mov	r9, r2
 800702a:	690a      	ldr	r2, [r1, #16]
 800702c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007030:	460c      	mov	r4, r1
 8007032:	429a      	cmp	r2, r3
 8007034:	bfbe      	ittt	lt
 8007036:	460b      	movlt	r3, r1
 8007038:	464c      	movlt	r4, r9
 800703a:	4699      	movlt	r9, r3
 800703c:	6927      	ldr	r7, [r4, #16]
 800703e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007042:	68a3      	ldr	r3, [r4, #8]
 8007044:	6861      	ldr	r1, [r4, #4]
 8007046:	eb07 060a 	add.w	r6, r7, sl
 800704a:	42b3      	cmp	r3, r6
 800704c:	b085      	sub	sp, #20
 800704e:	bfb8      	it	lt
 8007050:	3101      	addlt	r1, #1
 8007052:	f7ff fe91 	bl	8006d78 <_Balloc>
 8007056:	b930      	cbnz	r0, 8007066 <__multiply+0x42>
 8007058:	4602      	mov	r2, r0
 800705a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800705e:	4b43      	ldr	r3, [pc, #268]	; (800716c <__multiply+0x148>)
 8007060:	4843      	ldr	r0, [pc, #268]	; (8007170 <__multiply+0x14c>)
 8007062:	f001 fc15 	bl	8008890 <__assert_func>
 8007066:	f100 0514 	add.w	r5, r0, #20
 800706a:	462b      	mov	r3, r5
 800706c:	2200      	movs	r2, #0
 800706e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007072:	4543      	cmp	r3, r8
 8007074:	d321      	bcc.n	80070ba <__multiply+0x96>
 8007076:	f104 0314 	add.w	r3, r4, #20
 800707a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800707e:	f109 0314 	add.w	r3, r9, #20
 8007082:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007086:	9202      	str	r2, [sp, #8]
 8007088:	1b3a      	subs	r2, r7, r4
 800708a:	3a15      	subs	r2, #21
 800708c:	f022 0203 	bic.w	r2, r2, #3
 8007090:	3204      	adds	r2, #4
 8007092:	f104 0115 	add.w	r1, r4, #21
 8007096:	428f      	cmp	r7, r1
 8007098:	bf38      	it	cc
 800709a:	2204      	movcc	r2, #4
 800709c:	9201      	str	r2, [sp, #4]
 800709e:	9a02      	ldr	r2, [sp, #8]
 80070a0:	9303      	str	r3, [sp, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d80c      	bhi.n	80070c0 <__multiply+0x9c>
 80070a6:	2e00      	cmp	r6, #0
 80070a8:	dd03      	ble.n	80070b2 <__multiply+0x8e>
 80070aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d05a      	beq.n	8007168 <__multiply+0x144>
 80070b2:	6106      	str	r6, [r0, #16]
 80070b4:	b005      	add	sp, #20
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	f843 2b04 	str.w	r2, [r3], #4
 80070be:	e7d8      	b.n	8007072 <__multiply+0x4e>
 80070c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80070c4:	f1ba 0f00 	cmp.w	sl, #0
 80070c8:	d023      	beq.n	8007112 <__multiply+0xee>
 80070ca:	46a9      	mov	r9, r5
 80070cc:	f04f 0c00 	mov.w	ip, #0
 80070d0:	f104 0e14 	add.w	lr, r4, #20
 80070d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070d8:	f8d9 1000 	ldr.w	r1, [r9]
 80070dc:	fa1f fb82 	uxth.w	fp, r2
 80070e0:	b289      	uxth	r1, r1
 80070e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80070e6:	4461      	add	r1, ip
 80070e8:	f8d9 c000 	ldr.w	ip, [r9]
 80070ec:	0c12      	lsrs	r2, r2, #16
 80070ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80070f2:	fb0a c202 	mla	r2, sl, r2, ip
 80070f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070fa:	b289      	uxth	r1, r1
 80070fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007100:	4577      	cmp	r7, lr
 8007102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007106:	f849 1b04 	str.w	r1, [r9], #4
 800710a:	d8e3      	bhi.n	80070d4 <__multiply+0xb0>
 800710c:	9a01      	ldr	r2, [sp, #4]
 800710e:	f845 c002 	str.w	ip, [r5, r2]
 8007112:	9a03      	ldr	r2, [sp, #12]
 8007114:	3304      	adds	r3, #4
 8007116:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800711a:	f1b9 0f00 	cmp.w	r9, #0
 800711e:	d021      	beq.n	8007164 <__multiply+0x140>
 8007120:	46ae      	mov	lr, r5
 8007122:	f04f 0a00 	mov.w	sl, #0
 8007126:	6829      	ldr	r1, [r5, #0]
 8007128:	f104 0c14 	add.w	ip, r4, #20
 800712c:	f8bc b000 	ldrh.w	fp, [ip]
 8007130:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007134:	b289      	uxth	r1, r1
 8007136:	fb09 220b 	mla	r2, r9, fp, r2
 800713a:	4452      	add	r2, sl
 800713c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007140:	f84e 1b04 	str.w	r1, [lr], #4
 8007144:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007148:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800714c:	f8be 1000 	ldrh.w	r1, [lr]
 8007150:	4567      	cmp	r7, ip
 8007152:	fb09 110a 	mla	r1, r9, sl, r1
 8007156:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800715a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800715e:	d8e5      	bhi.n	800712c <__multiply+0x108>
 8007160:	9a01      	ldr	r2, [sp, #4]
 8007162:	50a9      	str	r1, [r5, r2]
 8007164:	3504      	adds	r5, #4
 8007166:	e79a      	b.n	800709e <__multiply+0x7a>
 8007168:	3e01      	subs	r6, #1
 800716a:	e79c      	b.n	80070a6 <__multiply+0x82>
 800716c:	080096db 	.word	0x080096db
 8007170:	080096ec 	.word	0x080096ec

08007174 <__pow5mult>:
 8007174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007178:	4615      	mov	r5, r2
 800717a:	f012 0203 	ands.w	r2, r2, #3
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	d007      	beq.n	8007194 <__pow5mult+0x20>
 8007184:	4c25      	ldr	r4, [pc, #148]	; (800721c <__pow5mult+0xa8>)
 8007186:	3a01      	subs	r2, #1
 8007188:	2300      	movs	r3, #0
 800718a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800718e:	f7ff fe55 	bl	8006e3c <__multadd>
 8007192:	4607      	mov	r7, r0
 8007194:	10ad      	asrs	r5, r5, #2
 8007196:	d03d      	beq.n	8007214 <__pow5mult+0xa0>
 8007198:	69f4      	ldr	r4, [r6, #28]
 800719a:	b97c      	cbnz	r4, 80071bc <__pow5mult+0x48>
 800719c:	2010      	movs	r0, #16
 800719e:	f7ff fd37 	bl	8006c10 <malloc>
 80071a2:	4602      	mov	r2, r0
 80071a4:	61f0      	str	r0, [r6, #28]
 80071a6:	b928      	cbnz	r0, 80071b4 <__pow5mult+0x40>
 80071a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80071ac:	4b1c      	ldr	r3, [pc, #112]	; (8007220 <__pow5mult+0xac>)
 80071ae:	481d      	ldr	r0, [pc, #116]	; (8007224 <__pow5mult+0xb0>)
 80071b0:	f001 fb6e 	bl	8008890 <__assert_func>
 80071b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071b8:	6004      	str	r4, [r0, #0]
 80071ba:	60c4      	str	r4, [r0, #12]
 80071bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80071c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071c4:	b94c      	cbnz	r4, 80071da <__pow5mult+0x66>
 80071c6:	f240 2171 	movw	r1, #625	; 0x271
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff14 	bl	8006ff8 <__i2b>
 80071d0:	2300      	movs	r3, #0
 80071d2:	4604      	mov	r4, r0
 80071d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	07eb      	lsls	r3, r5, #31
 80071e0:	d50a      	bpl.n	80071f8 <__pow5mult+0x84>
 80071e2:	4639      	mov	r1, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	4630      	mov	r0, r6
 80071e8:	f7ff ff1c 	bl	8007024 <__multiply>
 80071ec:	4680      	mov	r8, r0
 80071ee:	4639      	mov	r1, r7
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff fe01 	bl	8006df8 <_Bfree>
 80071f6:	4647      	mov	r7, r8
 80071f8:	106d      	asrs	r5, r5, #1
 80071fa:	d00b      	beq.n	8007214 <__pow5mult+0xa0>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	b938      	cbnz	r0, 8007210 <__pow5mult+0x9c>
 8007200:	4622      	mov	r2, r4
 8007202:	4621      	mov	r1, r4
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ff0d 	bl	8007024 <__multiply>
 800720a:	6020      	str	r0, [r4, #0]
 800720c:	f8c0 9000 	str.w	r9, [r0]
 8007210:	4604      	mov	r4, r0
 8007212:	e7e4      	b.n	80071de <__pow5mult+0x6a>
 8007214:	4638      	mov	r0, r7
 8007216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721a:	bf00      	nop
 800721c:	08009838 	.word	0x08009838
 8007220:	0800966c 	.word	0x0800966c
 8007224:	080096ec 	.word	0x080096ec

08007228 <__lshift>:
 8007228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	460c      	mov	r4, r1
 800722e:	4607      	mov	r7, r0
 8007230:	4691      	mov	r9, r2
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	6849      	ldr	r1, [r1, #4]
 8007236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800723a:	68a3      	ldr	r3, [r4, #8]
 800723c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007240:	f108 0601 	add.w	r6, r8, #1
 8007244:	42b3      	cmp	r3, r6
 8007246:	db0b      	blt.n	8007260 <__lshift+0x38>
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff fd95 	bl	8006d78 <_Balloc>
 800724e:	4605      	mov	r5, r0
 8007250:	b948      	cbnz	r0, 8007266 <__lshift+0x3e>
 8007252:	4602      	mov	r2, r0
 8007254:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007258:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <__lshift+0xd0>)
 800725a:	4828      	ldr	r0, [pc, #160]	; (80072fc <__lshift+0xd4>)
 800725c:	f001 fb18 	bl	8008890 <__assert_func>
 8007260:	3101      	adds	r1, #1
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	e7ee      	b.n	8007244 <__lshift+0x1c>
 8007266:	2300      	movs	r3, #0
 8007268:	f100 0114 	add.w	r1, r0, #20
 800726c:	f100 0210 	add.w	r2, r0, #16
 8007270:	4618      	mov	r0, r3
 8007272:	4553      	cmp	r3, sl
 8007274:	db33      	blt.n	80072de <__lshift+0xb6>
 8007276:	6920      	ldr	r0, [r4, #16]
 8007278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800727c:	f104 0314 	add.w	r3, r4, #20
 8007280:	f019 091f 	ands.w	r9, r9, #31
 8007284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800728c:	d02b      	beq.n	80072e6 <__lshift+0xbe>
 800728e:	468a      	mov	sl, r1
 8007290:	2200      	movs	r2, #0
 8007292:	f1c9 0e20 	rsb	lr, r9, #32
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	fa00 f009 	lsl.w	r0, r0, r9
 800729c:	4310      	orrs	r0, r2
 800729e:	f84a 0b04 	str.w	r0, [sl], #4
 80072a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a6:	459c      	cmp	ip, r3
 80072a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072ac:	d8f3      	bhi.n	8007296 <__lshift+0x6e>
 80072ae:	ebac 0304 	sub.w	r3, ip, r4
 80072b2:	3b15      	subs	r3, #21
 80072b4:	f023 0303 	bic.w	r3, r3, #3
 80072b8:	3304      	adds	r3, #4
 80072ba:	f104 0015 	add.w	r0, r4, #21
 80072be:	4584      	cmp	ip, r0
 80072c0:	bf38      	it	cc
 80072c2:	2304      	movcc	r3, #4
 80072c4:	50ca      	str	r2, [r1, r3]
 80072c6:	b10a      	cbz	r2, 80072cc <__lshift+0xa4>
 80072c8:	f108 0602 	add.w	r6, r8, #2
 80072cc:	3e01      	subs	r6, #1
 80072ce:	4638      	mov	r0, r7
 80072d0:	4621      	mov	r1, r4
 80072d2:	612e      	str	r6, [r5, #16]
 80072d4:	f7ff fd90 	bl	8006df8 <_Bfree>
 80072d8:	4628      	mov	r0, r5
 80072da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072de:	f842 0f04 	str.w	r0, [r2, #4]!
 80072e2:	3301      	adds	r3, #1
 80072e4:	e7c5      	b.n	8007272 <__lshift+0x4a>
 80072e6:	3904      	subs	r1, #4
 80072e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ec:	459c      	cmp	ip, r3
 80072ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80072f2:	d8f9      	bhi.n	80072e8 <__lshift+0xc0>
 80072f4:	e7ea      	b.n	80072cc <__lshift+0xa4>
 80072f6:	bf00      	nop
 80072f8:	080096db 	.word	0x080096db
 80072fc:	080096ec 	.word	0x080096ec

08007300 <__mcmp>:
 8007300:	4603      	mov	r3, r0
 8007302:	690a      	ldr	r2, [r1, #16]
 8007304:	6900      	ldr	r0, [r0, #16]
 8007306:	b530      	push	{r4, r5, lr}
 8007308:	1a80      	subs	r0, r0, r2
 800730a:	d10d      	bne.n	8007328 <__mcmp+0x28>
 800730c:	3314      	adds	r3, #20
 800730e:	3114      	adds	r1, #20
 8007310:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007314:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007318:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800731c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007320:	4295      	cmp	r5, r2
 8007322:	d002      	beq.n	800732a <__mcmp+0x2a>
 8007324:	d304      	bcc.n	8007330 <__mcmp+0x30>
 8007326:	2001      	movs	r0, #1
 8007328:	bd30      	pop	{r4, r5, pc}
 800732a:	42a3      	cmp	r3, r4
 800732c:	d3f4      	bcc.n	8007318 <__mcmp+0x18>
 800732e:	e7fb      	b.n	8007328 <__mcmp+0x28>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	e7f8      	b.n	8007328 <__mcmp+0x28>
	...

08007338 <__mdiff>:
 8007338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	460d      	mov	r5, r1
 800733e:	4607      	mov	r7, r0
 8007340:	4611      	mov	r1, r2
 8007342:	4628      	mov	r0, r5
 8007344:	4614      	mov	r4, r2
 8007346:	f7ff ffdb 	bl	8007300 <__mcmp>
 800734a:	1e06      	subs	r6, r0, #0
 800734c:	d111      	bne.n	8007372 <__mdiff+0x3a>
 800734e:	4631      	mov	r1, r6
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff fd11 	bl	8006d78 <_Balloc>
 8007356:	4602      	mov	r2, r0
 8007358:	b928      	cbnz	r0, 8007366 <__mdiff+0x2e>
 800735a:	f240 2137 	movw	r1, #567	; 0x237
 800735e:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <__mdiff+0x110>)
 8007360:	483a      	ldr	r0, [pc, #232]	; (800744c <__mdiff+0x114>)
 8007362:	f001 fa95 	bl	8008890 <__assert_func>
 8007366:	2301      	movs	r3, #1
 8007368:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800736c:	4610      	mov	r0, r2
 800736e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007372:	bfa4      	itt	ge
 8007374:	4623      	movge	r3, r4
 8007376:	462c      	movge	r4, r5
 8007378:	4638      	mov	r0, r7
 800737a:	6861      	ldr	r1, [r4, #4]
 800737c:	bfa6      	itte	ge
 800737e:	461d      	movge	r5, r3
 8007380:	2600      	movge	r6, #0
 8007382:	2601      	movlt	r6, #1
 8007384:	f7ff fcf8 	bl	8006d78 <_Balloc>
 8007388:	4602      	mov	r2, r0
 800738a:	b918      	cbnz	r0, 8007394 <__mdiff+0x5c>
 800738c:	f240 2145 	movw	r1, #581	; 0x245
 8007390:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <__mdiff+0x110>)
 8007392:	e7e5      	b.n	8007360 <__mdiff+0x28>
 8007394:	f102 0814 	add.w	r8, r2, #20
 8007398:	46c2      	mov	sl, r8
 800739a:	f04f 0c00 	mov.w	ip, #0
 800739e:	6927      	ldr	r7, [r4, #16]
 80073a0:	60c6      	str	r6, [r0, #12]
 80073a2:	692e      	ldr	r6, [r5, #16]
 80073a4:	f104 0014 	add.w	r0, r4, #20
 80073a8:	f105 0914 	add.w	r9, r5, #20
 80073ac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80073b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073b4:	3410      	adds	r4, #16
 80073b6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80073ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80073be:	fa1f f18b 	uxth.w	r1, fp
 80073c2:	4461      	add	r1, ip
 80073c4:	fa1f fc83 	uxth.w	ip, r3
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	eba1 010c 	sub.w	r1, r1, ip
 80073ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80073d6:	b289      	uxth	r1, r1
 80073d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80073dc:	454e      	cmp	r6, r9
 80073de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80073e2:	f84a 1b04 	str.w	r1, [sl], #4
 80073e6:	d8e6      	bhi.n	80073b6 <__mdiff+0x7e>
 80073e8:	1b73      	subs	r3, r6, r5
 80073ea:	3b15      	subs	r3, #21
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	3515      	adds	r5, #21
 80073f2:	3304      	adds	r3, #4
 80073f4:	42ae      	cmp	r6, r5
 80073f6:	bf38      	it	cc
 80073f8:	2304      	movcc	r3, #4
 80073fa:	4418      	add	r0, r3
 80073fc:	4443      	add	r3, r8
 80073fe:	461e      	mov	r6, r3
 8007400:	4605      	mov	r5, r0
 8007402:	4575      	cmp	r5, lr
 8007404:	d30e      	bcc.n	8007424 <__mdiff+0xec>
 8007406:	f10e 0103 	add.w	r1, lr, #3
 800740a:	1a09      	subs	r1, r1, r0
 800740c:	f021 0103 	bic.w	r1, r1, #3
 8007410:	3803      	subs	r0, #3
 8007412:	4586      	cmp	lr, r0
 8007414:	bf38      	it	cc
 8007416:	2100      	movcc	r1, #0
 8007418:	440b      	add	r3, r1
 800741a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800741e:	b189      	cbz	r1, 8007444 <__mdiff+0x10c>
 8007420:	6117      	str	r7, [r2, #16]
 8007422:	e7a3      	b.n	800736c <__mdiff+0x34>
 8007424:	f855 8b04 	ldr.w	r8, [r5], #4
 8007428:	fa1f f188 	uxth.w	r1, r8
 800742c:	4461      	add	r1, ip
 800742e:	140c      	asrs	r4, r1, #16
 8007430:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007434:	b289      	uxth	r1, r1
 8007436:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800743a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800743e:	f846 1b04 	str.w	r1, [r6], #4
 8007442:	e7de      	b.n	8007402 <__mdiff+0xca>
 8007444:	3f01      	subs	r7, #1
 8007446:	e7e8      	b.n	800741a <__mdiff+0xe2>
 8007448:	080096db 	.word	0x080096db
 800744c:	080096ec 	.word	0x080096ec

08007450 <__ulp>:
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <__ulp+0x3c>)
 8007452:	400b      	ands	r3, r1
 8007454:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007458:	2b00      	cmp	r3, #0
 800745a:	dc08      	bgt.n	800746e <__ulp+0x1e>
 800745c:	425b      	negs	r3, r3
 800745e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007462:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007466:	da04      	bge.n	8007472 <__ulp+0x22>
 8007468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800746c:	4113      	asrs	r3, r2
 800746e:	2200      	movs	r2, #0
 8007470:	e008      	b.n	8007484 <__ulp+0x34>
 8007472:	f1a2 0314 	sub.w	r3, r2, #20
 8007476:	2b1e      	cmp	r3, #30
 8007478:	bfd6      	itet	le
 800747a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800747e:	2201      	movgt	r2, #1
 8007480:	40da      	lsrle	r2, r3
 8007482:	2300      	movs	r3, #0
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	7ff00000 	.word	0x7ff00000

08007490 <__b2d>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	6905      	ldr	r5, [r0, #16]
 8007494:	f100 0714 	add.w	r7, r0, #20
 8007498:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800749c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80074a0:	1f2e      	subs	r6, r5, #4
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7ff fd5a 	bl	8006f5c <__hi0bits>
 80074a8:	f1c0 0220 	rsb	r2, r0, #32
 80074ac:	280a      	cmp	r0, #10
 80074ae:	4603      	mov	r3, r0
 80074b0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800751c <__b2d+0x8c>
 80074b4:	600a      	str	r2, [r1, #0]
 80074b6:	dc12      	bgt.n	80074de <__b2d+0x4e>
 80074b8:	f1c0 0e0b 	rsb	lr, r0, #11
 80074bc:	fa24 f20e 	lsr.w	r2, r4, lr
 80074c0:	42b7      	cmp	r7, r6
 80074c2:	ea42 010c 	orr.w	r1, r2, ip
 80074c6:	bf2c      	ite	cs
 80074c8:	2200      	movcs	r2, #0
 80074ca:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80074ce:	3315      	adds	r3, #21
 80074d0:	fa04 f303 	lsl.w	r3, r4, r3
 80074d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80074d8:	431a      	orrs	r2, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074de:	42b7      	cmp	r7, r6
 80074e0:	bf2e      	itee	cs
 80074e2:	2200      	movcs	r2, #0
 80074e4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80074e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80074ec:	3b0b      	subs	r3, #11
 80074ee:	d012      	beq.n	8007516 <__b2d+0x86>
 80074f0:	f1c3 0520 	rsb	r5, r3, #32
 80074f4:	fa22 f105 	lsr.w	r1, r2, r5
 80074f8:	409c      	lsls	r4, r3
 80074fa:	430c      	orrs	r4, r1
 80074fc:	42be      	cmp	r6, r7
 80074fe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007502:	bf94      	ite	ls
 8007504:	2400      	movls	r4, #0
 8007506:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800750a:	409a      	lsls	r2, r3
 800750c:	40ec      	lsrs	r4, r5
 800750e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007512:	4322      	orrs	r2, r4
 8007514:	e7e1      	b.n	80074da <__b2d+0x4a>
 8007516:	ea44 010c 	orr.w	r1, r4, ip
 800751a:	e7de      	b.n	80074da <__b2d+0x4a>
 800751c:	3ff00000 	.word	0x3ff00000

08007520 <__d2b>:
 8007520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007522:	2101      	movs	r1, #1
 8007524:	4617      	mov	r7, r2
 8007526:	461c      	mov	r4, r3
 8007528:	9e08      	ldr	r6, [sp, #32]
 800752a:	f7ff fc25 	bl	8006d78 <_Balloc>
 800752e:	4605      	mov	r5, r0
 8007530:	b930      	cbnz	r0, 8007540 <__d2b+0x20>
 8007532:	4602      	mov	r2, r0
 8007534:	f240 310f 	movw	r1, #783	; 0x30f
 8007538:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <__d2b+0xa4>)
 800753a:	4823      	ldr	r0, [pc, #140]	; (80075c8 <__d2b+0xa8>)
 800753c:	f001 f9a8 	bl	8008890 <__assert_func>
 8007540:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007544:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007548:	bb24      	cbnz	r4, 8007594 <__d2b+0x74>
 800754a:	2f00      	cmp	r7, #0
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	d026      	beq.n	800759e <__d2b+0x7e>
 8007550:	4668      	mov	r0, sp
 8007552:	9700      	str	r7, [sp, #0]
 8007554:	f7ff fd22 	bl	8006f9c <__lo0bits>
 8007558:	e9dd 1200 	ldrd	r1, r2, [sp]
 800755c:	b1e8      	cbz	r0, 800759a <__d2b+0x7a>
 800755e:	f1c0 0320 	rsb	r3, r0, #32
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	430b      	orrs	r3, r1
 8007568:	40c2      	lsrs	r2, r0
 800756a:	616b      	str	r3, [r5, #20]
 800756c:	9201      	str	r2, [sp, #4]
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf14      	ite	ne
 8007574:	2102      	movne	r1, #2
 8007576:	2101      	moveq	r1, #1
 8007578:	61ab      	str	r3, [r5, #24]
 800757a:	6129      	str	r1, [r5, #16]
 800757c:	b1bc      	cbz	r4, 80075ae <__d2b+0x8e>
 800757e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007582:	4404      	add	r4, r0
 8007584:	6034      	str	r4, [r6, #0]
 8007586:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	6018      	str	r0, [r3, #0]
 800758e:	4628      	mov	r0, r5
 8007590:	b003      	add	sp, #12
 8007592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007598:	e7d7      	b.n	800754a <__d2b+0x2a>
 800759a:	6169      	str	r1, [r5, #20]
 800759c:	e7e7      	b.n	800756e <__d2b+0x4e>
 800759e:	a801      	add	r0, sp, #4
 80075a0:	f7ff fcfc 	bl	8006f9c <__lo0bits>
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	2101      	movs	r1, #1
 80075a8:	616b      	str	r3, [r5, #20]
 80075aa:	3020      	adds	r0, #32
 80075ac:	e7e5      	b.n	800757a <__d2b+0x5a>
 80075ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075b2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80075b6:	6030      	str	r0, [r6, #0]
 80075b8:	6918      	ldr	r0, [r3, #16]
 80075ba:	f7ff fccf 	bl	8006f5c <__hi0bits>
 80075be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80075c2:	e7e2      	b.n	800758a <__d2b+0x6a>
 80075c4:	080096db 	.word	0x080096db
 80075c8:	080096ec 	.word	0x080096ec

080075cc <__ratio>:
 80075cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	4688      	mov	r8, r1
 80075d2:	4669      	mov	r1, sp
 80075d4:	4681      	mov	r9, r0
 80075d6:	f7ff ff5b 	bl	8007490 <__b2d>
 80075da:	460f      	mov	r7, r1
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	4640      	mov	r0, r8
 80075e2:	a901      	add	r1, sp, #4
 80075e4:	f7ff ff54 	bl	8007490 <__b2d>
 80075e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80075f0:	468b      	mov	fp, r1
 80075f2:	eba3 0c02 	sub.w	ip, r3, r2
 80075f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007600:	2b00      	cmp	r3, #0
 8007602:	bfd5      	itete	le
 8007604:	460a      	movle	r2, r1
 8007606:	462a      	movgt	r2, r5
 8007608:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800760c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007610:	bfd8      	it	le
 8007612:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007616:	465b      	mov	r3, fp
 8007618:	4602      	mov	r2, r0
 800761a:	4639      	mov	r1, r7
 800761c:	4620      	mov	r0, r4
 800761e:	f7f9 f885 	bl	800072c <__aeabi_ddiv>
 8007622:	b003      	add	sp, #12
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007628 <__copybits>:
 8007628:	3901      	subs	r1, #1
 800762a:	b570      	push	{r4, r5, r6, lr}
 800762c:	1149      	asrs	r1, r1, #5
 800762e:	6914      	ldr	r4, [r2, #16]
 8007630:	3101      	adds	r1, #1
 8007632:	f102 0314 	add.w	r3, r2, #20
 8007636:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800763a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800763e:	1f05      	subs	r5, r0, #4
 8007640:	42a3      	cmp	r3, r4
 8007642:	d30c      	bcc.n	800765e <__copybits+0x36>
 8007644:	1aa3      	subs	r3, r4, r2
 8007646:	3b11      	subs	r3, #17
 8007648:	f023 0303 	bic.w	r3, r3, #3
 800764c:	3211      	adds	r2, #17
 800764e:	42a2      	cmp	r2, r4
 8007650:	bf88      	it	hi
 8007652:	2300      	movhi	r3, #0
 8007654:	4418      	add	r0, r3
 8007656:	2300      	movs	r3, #0
 8007658:	4288      	cmp	r0, r1
 800765a:	d305      	bcc.n	8007668 <__copybits+0x40>
 800765c:	bd70      	pop	{r4, r5, r6, pc}
 800765e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007662:	f845 6f04 	str.w	r6, [r5, #4]!
 8007666:	e7eb      	b.n	8007640 <__copybits+0x18>
 8007668:	f840 3b04 	str.w	r3, [r0], #4
 800766c:	e7f4      	b.n	8007658 <__copybits+0x30>

0800766e <__any_on>:
 800766e:	f100 0214 	add.w	r2, r0, #20
 8007672:	6900      	ldr	r0, [r0, #16]
 8007674:	114b      	asrs	r3, r1, #5
 8007676:	4298      	cmp	r0, r3
 8007678:	b510      	push	{r4, lr}
 800767a:	db11      	blt.n	80076a0 <__any_on+0x32>
 800767c:	dd0a      	ble.n	8007694 <__any_on+0x26>
 800767e:	f011 011f 	ands.w	r1, r1, #31
 8007682:	d007      	beq.n	8007694 <__any_on+0x26>
 8007684:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007688:	fa24 f001 	lsr.w	r0, r4, r1
 800768c:	fa00 f101 	lsl.w	r1, r0, r1
 8007690:	428c      	cmp	r4, r1
 8007692:	d10b      	bne.n	80076ac <__any_on+0x3e>
 8007694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007698:	4293      	cmp	r3, r2
 800769a:	d803      	bhi.n	80076a4 <__any_on+0x36>
 800769c:	2000      	movs	r0, #0
 800769e:	bd10      	pop	{r4, pc}
 80076a0:	4603      	mov	r3, r0
 80076a2:	e7f7      	b.n	8007694 <__any_on+0x26>
 80076a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d0f5      	beq.n	8007698 <__any_on+0x2a>
 80076ac:	2001      	movs	r0, #1
 80076ae:	e7f6      	b.n	800769e <__any_on+0x30>

080076b0 <sulp>:
 80076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	460f      	mov	r7, r1
 80076b6:	4690      	mov	r8, r2
 80076b8:	f7ff feca 	bl	8007450 <__ulp>
 80076bc:	4604      	mov	r4, r0
 80076be:	460d      	mov	r5, r1
 80076c0:	f1b8 0f00 	cmp.w	r8, #0
 80076c4:	d011      	beq.n	80076ea <sulp+0x3a>
 80076c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80076ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dd0b      	ble.n	80076ea <sulp+0x3a>
 80076d2:	2400      	movs	r4, #0
 80076d4:	051b      	lsls	r3, r3, #20
 80076d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	f7f8 fef9 	bl	80004d8 <__aeabi_dmul>
 80076e6:	4604      	mov	r4, r0
 80076e8:	460d      	mov	r5, r1
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f2:	0000      	movs	r0, r0
 80076f4:	0000      	movs	r0, r0
	...

080076f8 <_strtod_l>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	b09f      	sub	sp, #124	; 0x7c
 80076fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007700:	2200      	movs	r2, #0
 8007702:	4604      	mov	r4, r0
 8007704:	921a      	str	r2, [sp, #104]	; 0x68
 8007706:	460d      	mov	r5, r1
 8007708:	f04f 0800 	mov.w	r8, #0
 800770c:	f04f 0900 	mov.w	r9, #0
 8007710:	460a      	mov	r2, r1
 8007712:	9219      	str	r2, [sp, #100]	; 0x64
 8007714:	7811      	ldrb	r1, [r2, #0]
 8007716:	292b      	cmp	r1, #43	; 0x2b
 8007718:	d04a      	beq.n	80077b0 <_strtod_l+0xb8>
 800771a:	d838      	bhi.n	800778e <_strtod_l+0x96>
 800771c:	290d      	cmp	r1, #13
 800771e:	d832      	bhi.n	8007786 <_strtod_l+0x8e>
 8007720:	2908      	cmp	r1, #8
 8007722:	d832      	bhi.n	800778a <_strtod_l+0x92>
 8007724:	2900      	cmp	r1, #0
 8007726:	d03b      	beq.n	80077a0 <_strtod_l+0xa8>
 8007728:	2200      	movs	r2, #0
 800772a:	920e      	str	r2, [sp, #56]	; 0x38
 800772c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800772e:	7832      	ldrb	r2, [r6, #0]
 8007730:	2a30      	cmp	r2, #48	; 0x30
 8007732:	f040 80b2 	bne.w	800789a <_strtod_l+0x1a2>
 8007736:	7872      	ldrb	r2, [r6, #1]
 8007738:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800773c:	2a58      	cmp	r2, #88	; 0x58
 800773e:	d16e      	bne.n	800781e <_strtod_l+0x126>
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007744:	4620      	mov	r0, r4
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	ab1a      	add	r3, sp, #104	; 0x68
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4a8c      	ldr	r2, [pc, #560]	; (8007980 <_strtod_l+0x288>)
 800774e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007750:	a919      	add	r1, sp, #100	; 0x64
 8007752:	f001 f937 	bl	80089c4 <__gethex>
 8007756:	f010 070f 	ands.w	r7, r0, #15
 800775a:	4605      	mov	r5, r0
 800775c:	d005      	beq.n	800776a <_strtod_l+0x72>
 800775e:	2f06      	cmp	r7, #6
 8007760:	d128      	bne.n	80077b4 <_strtod_l+0xbc>
 8007762:	2300      	movs	r3, #0
 8007764:	3601      	adds	r6, #1
 8007766:	9619      	str	r6, [sp, #100]	; 0x64
 8007768:	930e      	str	r3, [sp, #56]	; 0x38
 800776a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 85a0 	bne.w	80082b2 <_strtod_l+0xbba>
 8007772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007774:	b1cb      	cbz	r3, 80077aa <_strtod_l+0xb2>
 8007776:	4642      	mov	r2, r8
 8007778:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800777c:	4610      	mov	r0, r2
 800777e:	4619      	mov	r1, r3
 8007780:	b01f      	add	sp, #124	; 0x7c
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	2920      	cmp	r1, #32
 8007788:	d1ce      	bne.n	8007728 <_strtod_l+0x30>
 800778a:	3201      	adds	r2, #1
 800778c:	e7c1      	b.n	8007712 <_strtod_l+0x1a>
 800778e:	292d      	cmp	r1, #45	; 0x2d
 8007790:	d1ca      	bne.n	8007728 <_strtod_l+0x30>
 8007792:	2101      	movs	r1, #1
 8007794:	910e      	str	r1, [sp, #56]	; 0x38
 8007796:	1c51      	adds	r1, r2, #1
 8007798:	9119      	str	r1, [sp, #100]	; 0x64
 800779a:	7852      	ldrb	r2, [r2, #1]
 800779c:	2a00      	cmp	r2, #0
 800779e:	d1c5      	bne.n	800772c <_strtod_l+0x34>
 80077a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a2:	9519      	str	r5, [sp, #100]	; 0x64
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 8582 	bne.w	80082ae <_strtod_l+0xbb6>
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	e7e5      	b.n	800777c <_strtod_l+0x84>
 80077b0:	2100      	movs	r1, #0
 80077b2:	e7ef      	b.n	8007794 <_strtod_l+0x9c>
 80077b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b6:	b13a      	cbz	r2, 80077c8 <_strtod_l+0xd0>
 80077b8:	2135      	movs	r1, #53	; 0x35
 80077ba:	a81c      	add	r0, sp, #112	; 0x70
 80077bc:	f7ff ff34 	bl	8007628 <__copybits>
 80077c0:	4620      	mov	r0, r4
 80077c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077c4:	f7ff fb18 	bl	8006df8 <_Bfree>
 80077c8:	3f01      	subs	r7, #1
 80077ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80077cc:	2f04      	cmp	r7, #4
 80077ce:	d806      	bhi.n	80077de <_strtod_l+0xe6>
 80077d0:	e8df f007 	tbb	[pc, r7]
 80077d4:	201d0314 	.word	0x201d0314
 80077d8:	14          	.byte	0x14
 80077d9:	00          	.byte	0x00
 80077da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80077de:	05e9      	lsls	r1, r5, #23
 80077e0:	bf48      	it	mi
 80077e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80077e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077ea:	0d1b      	lsrs	r3, r3, #20
 80077ec:	051b      	lsls	r3, r3, #20
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1bb      	bne.n	800776a <_strtod_l+0x72>
 80077f2:	f7fe fb17 	bl	8005e24 <__errno>
 80077f6:	2322      	movs	r3, #34	; 0x22
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	e7b6      	b.n	800776a <_strtod_l+0x72>
 80077fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007800:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007804:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007808:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800780c:	e7e7      	b.n	80077de <_strtod_l+0xe6>
 800780e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007984 <_strtod_l+0x28c>
 8007812:	e7e4      	b.n	80077de <_strtod_l+0xe6>
 8007814:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007818:	f04f 38ff 	mov.w	r8, #4294967295
 800781c:	e7df      	b.n	80077de <_strtod_l+0xe6>
 800781e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	9219      	str	r2, [sp, #100]	; 0x64
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b30      	cmp	r3, #48	; 0x30
 8007828:	d0f9      	beq.n	800781e <_strtod_l+0x126>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d09d      	beq.n	800776a <_strtod_l+0x72>
 800782e:	2301      	movs	r3, #1
 8007830:	f04f 0a00 	mov.w	sl, #0
 8007834:	220a      	movs	r2, #10
 8007836:	46d3      	mov	fp, sl
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800783c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007840:	930b      	str	r3, [sp, #44]	; 0x2c
 8007842:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007844:	7806      	ldrb	r6, [r0, #0]
 8007846:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800784a:	b2d9      	uxtb	r1, r3
 800784c:	2909      	cmp	r1, #9
 800784e:	d926      	bls.n	800789e <_strtod_l+0x1a6>
 8007850:	2201      	movs	r2, #1
 8007852:	494d      	ldr	r1, [pc, #308]	; (8007988 <_strtod_l+0x290>)
 8007854:	f000 ffe6 	bl	8008824 <strncmp>
 8007858:	2800      	cmp	r0, #0
 800785a:	d030      	beq.n	80078be <_strtod_l+0x1c6>
 800785c:	2000      	movs	r0, #0
 800785e:	4632      	mov	r2, r6
 8007860:	4603      	mov	r3, r0
 8007862:	465e      	mov	r6, fp
 8007864:	9008      	str	r0, [sp, #32]
 8007866:	2a65      	cmp	r2, #101	; 0x65
 8007868:	d001      	beq.n	800786e <_strtod_l+0x176>
 800786a:	2a45      	cmp	r2, #69	; 0x45
 800786c:	d113      	bne.n	8007896 <_strtod_l+0x19e>
 800786e:	b91e      	cbnz	r6, 8007878 <_strtod_l+0x180>
 8007870:	9a05      	ldr	r2, [sp, #20]
 8007872:	4302      	orrs	r2, r0
 8007874:	d094      	beq.n	80077a0 <_strtod_l+0xa8>
 8007876:	2600      	movs	r6, #0
 8007878:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800787a:	1c6a      	adds	r2, r5, #1
 800787c:	9219      	str	r2, [sp, #100]	; 0x64
 800787e:	786a      	ldrb	r2, [r5, #1]
 8007880:	2a2b      	cmp	r2, #43	; 0x2b
 8007882:	d074      	beq.n	800796e <_strtod_l+0x276>
 8007884:	2a2d      	cmp	r2, #45	; 0x2d
 8007886:	d078      	beq.n	800797a <_strtod_l+0x282>
 8007888:	f04f 0c00 	mov.w	ip, #0
 800788c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007890:	2909      	cmp	r1, #9
 8007892:	d97f      	bls.n	8007994 <_strtod_l+0x29c>
 8007894:	9519      	str	r5, [sp, #100]	; 0x64
 8007896:	2700      	movs	r7, #0
 8007898:	e09e      	b.n	80079d8 <_strtod_l+0x2e0>
 800789a:	2300      	movs	r3, #0
 800789c:	e7c8      	b.n	8007830 <_strtod_l+0x138>
 800789e:	f1bb 0f08 	cmp.w	fp, #8
 80078a2:	bfd8      	it	le
 80078a4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80078a6:	f100 0001 	add.w	r0, r0, #1
 80078aa:	bfd6      	itet	le
 80078ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80078b0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80078b4:	930a      	strle	r3, [sp, #40]	; 0x28
 80078b6:	f10b 0b01 	add.w	fp, fp, #1
 80078ba:	9019      	str	r0, [sp, #100]	; 0x64
 80078bc:	e7c1      	b.n	8007842 <_strtod_l+0x14a>
 80078be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	9219      	str	r2, [sp, #100]	; 0x64
 80078c4:	785a      	ldrb	r2, [r3, #1]
 80078c6:	f1bb 0f00 	cmp.w	fp, #0
 80078ca:	d037      	beq.n	800793c <_strtod_l+0x244>
 80078cc:	465e      	mov	r6, fp
 80078ce:	9008      	str	r0, [sp, #32]
 80078d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d912      	bls.n	80078fe <_strtod_l+0x206>
 80078d8:	2301      	movs	r3, #1
 80078da:	e7c4      	b.n	8007866 <_strtod_l+0x16e>
 80078dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078de:	3001      	adds	r0, #1
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	9219      	str	r2, [sp, #100]	; 0x64
 80078e4:	785a      	ldrb	r2, [r3, #1]
 80078e6:	2a30      	cmp	r2, #48	; 0x30
 80078e8:	d0f8      	beq.n	80078dc <_strtod_l+0x1e4>
 80078ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	f200 84e4 	bhi.w	80082bc <_strtod_l+0xbc4>
 80078f4:	9008      	str	r0, [sp, #32]
 80078f6:	2000      	movs	r0, #0
 80078f8:	4606      	mov	r6, r0
 80078fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80078fe:	3a30      	subs	r2, #48	; 0x30
 8007900:	f100 0301 	add.w	r3, r0, #1
 8007904:	d014      	beq.n	8007930 <_strtod_l+0x238>
 8007906:	9908      	ldr	r1, [sp, #32]
 8007908:	eb00 0c06 	add.w	ip, r0, r6
 800790c:	4419      	add	r1, r3
 800790e:	9108      	str	r1, [sp, #32]
 8007910:	4633      	mov	r3, r6
 8007912:	210a      	movs	r1, #10
 8007914:	4563      	cmp	r3, ip
 8007916:	d113      	bne.n	8007940 <_strtod_l+0x248>
 8007918:	1833      	adds	r3, r6, r0
 800791a:	2b08      	cmp	r3, #8
 800791c:	f106 0601 	add.w	r6, r6, #1
 8007920:	4406      	add	r6, r0
 8007922:	dc1a      	bgt.n	800795a <_strtod_l+0x262>
 8007924:	230a      	movs	r3, #10
 8007926:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007928:	fb03 2301 	mla	r3, r3, r1, r2
 800792c:	930a      	str	r3, [sp, #40]	; 0x28
 800792e:	2300      	movs	r3, #0
 8007930:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007932:	4618      	mov	r0, r3
 8007934:	1c51      	adds	r1, r2, #1
 8007936:	9119      	str	r1, [sp, #100]	; 0x64
 8007938:	7852      	ldrb	r2, [r2, #1]
 800793a:	e7c9      	b.n	80078d0 <_strtod_l+0x1d8>
 800793c:	4658      	mov	r0, fp
 800793e:	e7d2      	b.n	80078e6 <_strtod_l+0x1ee>
 8007940:	2b08      	cmp	r3, #8
 8007942:	f103 0301 	add.w	r3, r3, #1
 8007946:	dc03      	bgt.n	8007950 <_strtod_l+0x258>
 8007948:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800794a:	434f      	muls	r7, r1
 800794c:	970a      	str	r7, [sp, #40]	; 0x28
 800794e:	e7e1      	b.n	8007914 <_strtod_l+0x21c>
 8007950:	2b10      	cmp	r3, #16
 8007952:	bfd8      	it	le
 8007954:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007958:	e7dc      	b.n	8007914 <_strtod_l+0x21c>
 800795a:	2e10      	cmp	r6, #16
 800795c:	bfdc      	itt	le
 800795e:	230a      	movle	r3, #10
 8007960:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007964:	e7e3      	b.n	800792e <_strtod_l+0x236>
 8007966:	2300      	movs	r3, #0
 8007968:	9308      	str	r3, [sp, #32]
 800796a:	2301      	movs	r3, #1
 800796c:	e780      	b.n	8007870 <_strtod_l+0x178>
 800796e:	f04f 0c00 	mov.w	ip, #0
 8007972:	1caa      	adds	r2, r5, #2
 8007974:	9219      	str	r2, [sp, #100]	; 0x64
 8007976:	78aa      	ldrb	r2, [r5, #2]
 8007978:	e788      	b.n	800788c <_strtod_l+0x194>
 800797a:	f04f 0c01 	mov.w	ip, #1
 800797e:	e7f8      	b.n	8007972 <_strtod_l+0x27a>
 8007980:	08009848 	.word	0x08009848
 8007984:	7ff00000 	.word	0x7ff00000
 8007988:	08009844 	.word	0x08009844
 800798c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800798e:	1c51      	adds	r1, r2, #1
 8007990:	9119      	str	r1, [sp, #100]	; 0x64
 8007992:	7852      	ldrb	r2, [r2, #1]
 8007994:	2a30      	cmp	r2, #48	; 0x30
 8007996:	d0f9      	beq.n	800798c <_strtod_l+0x294>
 8007998:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800799c:	2908      	cmp	r1, #8
 800799e:	f63f af7a 	bhi.w	8007896 <_strtod_l+0x19e>
 80079a2:	3a30      	subs	r2, #48	; 0x30
 80079a4:	9209      	str	r2, [sp, #36]	; 0x24
 80079a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079a8:	920c      	str	r2, [sp, #48]	; 0x30
 80079aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079ac:	1c57      	adds	r7, r2, #1
 80079ae:	9719      	str	r7, [sp, #100]	; 0x64
 80079b0:	7852      	ldrb	r2, [r2, #1]
 80079b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80079b6:	f1be 0f09 	cmp.w	lr, #9
 80079ba:	d938      	bls.n	8007a2e <_strtod_l+0x336>
 80079bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079be:	1a7f      	subs	r7, r7, r1
 80079c0:	2f08      	cmp	r7, #8
 80079c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80079c6:	dc03      	bgt.n	80079d0 <_strtod_l+0x2d8>
 80079c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ca:	428f      	cmp	r7, r1
 80079cc:	bfa8      	it	ge
 80079ce:	460f      	movge	r7, r1
 80079d0:	f1bc 0f00 	cmp.w	ip, #0
 80079d4:	d000      	beq.n	80079d8 <_strtod_l+0x2e0>
 80079d6:	427f      	negs	r7, r7
 80079d8:	2e00      	cmp	r6, #0
 80079da:	d14f      	bne.n	8007a7c <_strtod_l+0x384>
 80079dc:	9905      	ldr	r1, [sp, #20]
 80079de:	4301      	orrs	r1, r0
 80079e0:	f47f aec3 	bne.w	800776a <_strtod_l+0x72>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f47f aedb 	bne.w	80077a0 <_strtod_l+0xa8>
 80079ea:	2a69      	cmp	r2, #105	; 0x69
 80079ec:	d029      	beq.n	8007a42 <_strtod_l+0x34a>
 80079ee:	dc26      	bgt.n	8007a3e <_strtod_l+0x346>
 80079f0:	2a49      	cmp	r2, #73	; 0x49
 80079f2:	d026      	beq.n	8007a42 <_strtod_l+0x34a>
 80079f4:	2a4e      	cmp	r2, #78	; 0x4e
 80079f6:	f47f aed3 	bne.w	80077a0 <_strtod_l+0xa8>
 80079fa:	499a      	ldr	r1, [pc, #616]	; (8007c64 <_strtod_l+0x56c>)
 80079fc:	a819      	add	r0, sp, #100	; 0x64
 80079fe:	f001 fa23 	bl	8008e48 <__match>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f43f aecc 	beq.w	80077a0 <_strtod_l+0xa8>
 8007a08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b28      	cmp	r3, #40	; 0x28
 8007a0e:	d12f      	bne.n	8007a70 <_strtod_l+0x378>
 8007a10:	4995      	ldr	r1, [pc, #596]	; (8007c68 <_strtod_l+0x570>)
 8007a12:	aa1c      	add	r2, sp, #112	; 0x70
 8007a14:	a819      	add	r0, sp, #100	; 0x64
 8007a16:	f001 fa2b 	bl	8008e70 <__hexnan>
 8007a1a:	2805      	cmp	r0, #5
 8007a1c:	d128      	bne.n	8007a70 <_strtod_l+0x378>
 8007a1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007a24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a2c:	e69d      	b.n	800776a <_strtod_l+0x72>
 8007a2e:	210a      	movs	r1, #10
 8007a30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a32:	fb01 2107 	mla	r1, r1, r7, r2
 8007a36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a3c:	e7b5      	b.n	80079aa <_strtod_l+0x2b2>
 8007a3e:	2a6e      	cmp	r2, #110	; 0x6e
 8007a40:	e7d9      	b.n	80079f6 <_strtod_l+0x2fe>
 8007a42:	498a      	ldr	r1, [pc, #552]	; (8007c6c <_strtod_l+0x574>)
 8007a44:	a819      	add	r0, sp, #100	; 0x64
 8007a46:	f001 f9ff 	bl	8008e48 <__match>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f43f aea8 	beq.w	80077a0 <_strtod_l+0xa8>
 8007a50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a52:	4987      	ldr	r1, [pc, #540]	; (8007c70 <_strtod_l+0x578>)
 8007a54:	3b01      	subs	r3, #1
 8007a56:	a819      	add	r0, sp, #100	; 0x64
 8007a58:	9319      	str	r3, [sp, #100]	; 0x64
 8007a5a:	f001 f9f5 	bl	8008e48 <__match>
 8007a5e:	b910      	cbnz	r0, 8007a66 <_strtod_l+0x36e>
 8007a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a62:	3301      	adds	r3, #1
 8007a64:	9319      	str	r3, [sp, #100]	; 0x64
 8007a66:	f04f 0800 	mov.w	r8, #0
 8007a6a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007c74 <_strtod_l+0x57c>
 8007a6e:	e67c      	b.n	800776a <_strtod_l+0x72>
 8007a70:	4881      	ldr	r0, [pc, #516]	; (8007c78 <_strtod_l+0x580>)
 8007a72:	f000 ff07 	bl	8008884 <nan>
 8007a76:	4680      	mov	r8, r0
 8007a78:	4689      	mov	r9, r1
 8007a7a:	e676      	b.n	800776a <_strtod_l+0x72>
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	f1bb 0f00 	cmp.w	fp, #0
 8007a82:	bf08      	it	eq
 8007a84:	46b3      	moveq	fp, r6
 8007a86:	1afb      	subs	r3, r7, r3
 8007a88:	2e10      	cmp	r6, #16
 8007a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a8c:	4635      	mov	r5, r6
 8007a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a90:	bfa8      	it	ge
 8007a92:	2510      	movge	r5, #16
 8007a94:	f7f8 fca6 	bl	80003e4 <__aeabi_ui2d>
 8007a98:	2e09      	cmp	r6, #9
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	4689      	mov	r9, r1
 8007a9e:	dd13      	ble.n	8007ac8 <_strtod_l+0x3d0>
 8007aa0:	4b76      	ldr	r3, [pc, #472]	; (8007c7c <_strtod_l+0x584>)
 8007aa2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007aa6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007aaa:	f7f8 fd15 	bl	80004d8 <__aeabi_dmul>
 8007aae:	4680      	mov	r8, r0
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	4689      	mov	r9, r1
 8007ab4:	f7f8 fc96 	bl	80003e4 <__aeabi_ui2d>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f8 fb54 	bl	800016c <__adddf3>
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	4689      	mov	r9, r1
 8007ac8:	2e0f      	cmp	r6, #15
 8007aca:	dc36      	bgt.n	8007b3a <_strtod_l+0x442>
 8007acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f43f ae4b 	beq.w	800776a <_strtod_l+0x72>
 8007ad4:	dd22      	ble.n	8007b1c <_strtod_l+0x424>
 8007ad6:	2b16      	cmp	r3, #22
 8007ad8:	dc09      	bgt.n	8007aee <_strtod_l+0x3f6>
 8007ada:	4968      	ldr	r1, [pc, #416]	; (8007c7c <_strtod_l+0x584>)
 8007adc:	4642      	mov	r2, r8
 8007ade:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae8:	f7f8 fcf6 	bl	80004d8 <__aeabi_dmul>
 8007aec:	e7c3      	b.n	8007a76 <_strtod_l+0x37e>
 8007aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007af4:	4293      	cmp	r3, r2
 8007af6:	db20      	blt.n	8007b3a <_strtod_l+0x442>
 8007af8:	4c60      	ldr	r4, [pc, #384]	; (8007c7c <_strtod_l+0x584>)
 8007afa:	f1c6 060f 	rsb	r6, r6, #15
 8007afe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b02:	4642      	mov	r2, r8
 8007b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b08:	464b      	mov	r3, r9
 8007b0a:	f7f8 fce5 	bl	80004d8 <__aeabi_dmul>
 8007b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b10:	1b9e      	subs	r6, r3, r6
 8007b12:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b1a:	e7e5      	b.n	8007ae8 <_strtod_l+0x3f0>
 8007b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1e:	3316      	adds	r3, #22
 8007b20:	db0b      	blt.n	8007b3a <_strtod_l+0x442>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	4640      	mov	r0, r8
 8007b26:	1bdf      	subs	r7, r3, r7
 8007b28:	4b54      	ldr	r3, [pc, #336]	; (8007c7c <_strtod_l+0x584>)
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b34:	f7f8 fdfa 	bl	800072c <__aeabi_ddiv>
 8007b38:	e79d      	b.n	8007a76 <_strtod_l+0x37e>
 8007b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3c:	1b75      	subs	r5, r6, r5
 8007b3e:	441d      	add	r5, r3
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	dd70      	ble.n	8007c26 <_strtod_l+0x52e>
 8007b44:	f015 030f 	ands.w	r3, r5, #15
 8007b48:	d00a      	beq.n	8007b60 <_strtod_l+0x468>
 8007b4a:	494c      	ldr	r1, [pc, #304]	; (8007c7c <_strtod_l+0x584>)
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b56:	464b      	mov	r3, r9
 8007b58:	f7f8 fcbe 	bl	80004d8 <__aeabi_dmul>
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	f035 050f 	bics.w	r5, r5, #15
 8007b64:	d04d      	beq.n	8007c02 <_strtod_l+0x50a>
 8007b66:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007b6a:	dd22      	ble.n	8007bb2 <_strtod_l+0x4ba>
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	46b3      	mov	fp, r6
 8007b70:	960b      	str	r6, [sp, #44]	; 0x2c
 8007b72:	9608      	str	r6, [sp, #32]
 8007b74:	2322      	movs	r3, #34	; 0x22
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007c74 <_strtod_l+0x57c>
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f43f adf1 	beq.w	800776a <_strtod_l+0x72>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b8c:	f7ff f934 	bl	8006df8 <_Bfree>
 8007b90:	4620      	mov	r0, r4
 8007b92:	9908      	ldr	r1, [sp, #32]
 8007b94:	f7ff f930 	bl	8006df8 <_Bfree>
 8007b98:	4659      	mov	r1, fp
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f7ff f92c 	bl	8006df8 <_Bfree>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ba4:	f7ff f928 	bl	8006df8 <_Bfree>
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff f924 	bl	8006df8 <_Bfree>
 8007bb0:	e5db      	b.n	800776a <_strtod_l+0x72>
 8007bb2:	4b33      	ldr	r3, [pc, #204]	; (8007c80 <_strtod_l+0x588>)
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	9305      	str	r3, [sp, #20]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4649      	mov	r1, r9
 8007bbc:	469a      	mov	sl, r3
 8007bbe:	112d      	asrs	r5, r5, #4
 8007bc0:	2d01      	cmp	r5, #1
 8007bc2:	dc21      	bgt.n	8007c08 <_strtod_l+0x510>
 8007bc4:	b10b      	cbz	r3, 8007bca <_strtod_l+0x4d2>
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	4689      	mov	r9, r1
 8007bca:	492d      	ldr	r1, [pc, #180]	; (8007c80 <_strtod_l+0x588>)
 8007bcc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007bd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bd4:	4642      	mov	r2, r8
 8007bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bda:	464b      	mov	r3, r9
 8007bdc:	f7f8 fc7c 	bl	80004d8 <__aeabi_dmul>
 8007be0:	4b24      	ldr	r3, [pc, #144]	; (8007c74 <_strtod_l+0x57c>)
 8007be2:	460a      	mov	r2, r1
 8007be4:	400b      	ands	r3, r1
 8007be6:	4927      	ldr	r1, [pc, #156]	; (8007c84 <_strtod_l+0x58c>)
 8007be8:	4680      	mov	r8, r0
 8007bea:	428b      	cmp	r3, r1
 8007bec:	d8be      	bhi.n	8007b6c <_strtod_l+0x474>
 8007bee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007bf2:	428b      	cmp	r3, r1
 8007bf4:	bf86      	itte	hi
 8007bf6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007bfa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007c88 <_strtod_l+0x590>
 8007bfe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c02:	2300      	movs	r3, #0
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	e07b      	b.n	8007d00 <_strtod_l+0x608>
 8007c08:	07ea      	lsls	r2, r5, #31
 8007c0a:	d505      	bpl.n	8007c18 <_strtod_l+0x520>
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fc61 	bl	80004d8 <__aeabi_dmul>
 8007c16:	2301      	movs	r3, #1
 8007c18:	9a05      	ldr	r2, [sp, #20]
 8007c1a:	f10a 0a01 	add.w	sl, sl, #1
 8007c1e:	3208      	adds	r2, #8
 8007c20:	106d      	asrs	r5, r5, #1
 8007c22:	9205      	str	r2, [sp, #20]
 8007c24:	e7cc      	b.n	8007bc0 <_strtod_l+0x4c8>
 8007c26:	d0ec      	beq.n	8007c02 <_strtod_l+0x50a>
 8007c28:	426d      	negs	r5, r5
 8007c2a:	f015 020f 	ands.w	r2, r5, #15
 8007c2e:	d00a      	beq.n	8007c46 <_strtod_l+0x54e>
 8007c30:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <_strtod_l+0x584>)
 8007c32:	4640      	mov	r0, r8
 8007c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c38:	4649      	mov	r1, r9
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fd75 	bl	800072c <__aeabi_ddiv>
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	112d      	asrs	r5, r5, #4
 8007c48:	d0db      	beq.n	8007c02 <_strtod_l+0x50a>
 8007c4a:	2d1f      	cmp	r5, #31
 8007c4c:	dd1e      	ble.n	8007c8c <_strtod_l+0x594>
 8007c4e:	2600      	movs	r6, #0
 8007c50:	46b3      	mov	fp, r6
 8007c52:	960b      	str	r6, [sp, #44]	; 0x2c
 8007c54:	9608      	str	r6, [sp, #32]
 8007c56:	2322      	movs	r3, #34	; 0x22
 8007c58:	f04f 0800 	mov.w	r8, #0
 8007c5c:	f04f 0900 	mov.w	r9, #0
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	e78d      	b.n	8007b80 <_strtod_l+0x488>
 8007c64:	08009633 	.word	0x08009633
 8007c68:	0800985c 	.word	0x0800985c
 8007c6c:	0800962b 	.word	0x0800962b
 8007c70:	08009662 	.word	0x08009662
 8007c74:	7ff00000 	.word	0x7ff00000
 8007c78:	080099ed 	.word	0x080099ed
 8007c7c:	08009770 	.word	0x08009770
 8007c80:	08009748 	.word	0x08009748
 8007c84:	7ca00000 	.word	0x7ca00000
 8007c88:	7fefffff 	.word	0x7fefffff
 8007c8c:	f015 0310 	ands.w	r3, r5, #16
 8007c90:	bf18      	it	ne
 8007c92:	236a      	movne	r3, #106	; 0x6a
 8007c94:	4640      	mov	r0, r8
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	4649      	mov	r1, r9
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007f68 <_strtod_l+0x870>
 8007ca0:	07ea      	lsls	r2, r5, #31
 8007ca2:	d504      	bpl.n	8007cae <_strtod_l+0x5b6>
 8007ca4:	e9da 2300 	ldrd	r2, r3, [sl]
 8007ca8:	f7f8 fc16 	bl	80004d8 <__aeabi_dmul>
 8007cac:	2301      	movs	r3, #1
 8007cae:	106d      	asrs	r5, r5, #1
 8007cb0:	f10a 0a08 	add.w	sl, sl, #8
 8007cb4:	d1f4      	bne.n	8007ca0 <_strtod_l+0x5a8>
 8007cb6:	b10b      	cbz	r3, 8007cbc <_strtod_l+0x5c4>
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4689      	mov	r9, r1
 8007cbc:	9b05      	ldr	r3, [sp, #20]
 8007cbe:	b1bb      	cbz	r3, 8007cf0 <_strtod_l+0x5f8>
 8007cc0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007cc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	4649      	mov	r1, r9
 8007ccc:	dd10      	ble.n	8007cf0 <_strtod_l+0x5f8>
 8007cce:	2b1f      	cmp	r3, #31
 8007cd0:	f340 8128 	ble.w	8007f24 <_strtod_l+0x82c>
 8007cd4:	2b34      	cmp	r3, #52	; 0x34
 8007cd6:	bfd8      	it	le
 8007cd8:	f04f 33ff 	movle.w	r3, #4294967295
 8007cdc:	f04f 0800 	mov.w	r8, #0
 8007ce0:	bfcf      	iteee	gt
 8007ce2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007ce6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007cea:	4093      	lslle	r3, r2
 8007cec:	ea03 0901 	andle.w	r9, r3, r1
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7f8 fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1a6      	bne.n	8007c4e <_strtod_l+0x556>
 8007d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d02:	465a      	mov	r2, fp
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4620      	mov	r0, r4
 8007d08:	4633      	mov	r3, r6
 8007d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d0c:	f7ff f8dc 	bl	8006ec8 <__s2b>
 8007d10:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f43f af2a 	beq.w	8007b6c <_strtod_l+0x474>
 8007d18:	2600      	movs	r6, #0
 8007d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d1c:	9b08      	ldr	r3, [sp, #32]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	eba3 0307 	sub.w	r3, r3, r7
 8007d24:	bfa8      	it	ge
 8007d26:	2300      	movge	r3, #0
 8007d28:	46b3      	mov	fp, r6
 8007d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8007d2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d30:	9316      	str	r3, [sp, #88]	; 0x58
 8007d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d34:	4620      	mov	r0, r4
 8007d36:	6859      	ldr	r1, [r3, #4]
 8007d38:	f7ff f81e 	bl	8006d78 <_Balloc>
 8007d3c:	9008      	str	r0, [sp, #32]
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f43f af18 	beq.w	8007b74 <_strtod_l+0x47c>
 8007d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d46:	300c      	adds	r0, #12
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	f103 010c 	add.w	r1, r3, #12
 8007d4e:	3202      	adds	r2, #2
 8007d50:	0092      	lsls	r2, r2, #2
 8007d52:	f000 fd89 	bl	8008868 <memcpy>
 8007d56:	ab1c      	add	r3, sp, #112	; 0x70
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	4642      	mov	r2, r8
 8007d60:	464b      	mov	r3, r9
 8007d62:	4620      	mov	r0, r4
 8007d64:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007d68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007d6c:	f7ff fbd8 	bl	8007520 <__d2b>
 8007d70:	901a      	str	r0, [sp, #104]	; 0x68
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f43f aefe 	beq.w	8007b74 <_strtod_l+0x47c>
 8007d78:	2101      	movs	r1, #1
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7ff f93c 	bl	8006ff8 <__i2b>
 8007d80:	4683      	mov	fp, r0
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f43f aef6 	beq.w	8007b74 <_strtod_l+0x47c>
 8007d88:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007d8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	bfab      	itete	ge
 8007d90:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007d92:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007d94:	eb07 0a03 	addge.w	sl, r7, r3
 8007d98:	1bdd      	sublt	r5, r3, r7
 8007d9a:	9b05      	ldr	r3, [sp, #20]
 8007d9c:	bfa8      	it	ge
 8007d9e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007da0:	eba7 0703 	sub.w	r7, r7, r3
 8007da4:	4417      	add	r7, r2
 8007da6:	4b71      	ldr	r3, [pc, #452]	; (8007f6c <_strtod_l+0x874>)
 8007da8:	f107 37ff 	add.w	r7, r7, #4294967295
 8007dac:	bfb8      	it	lt
 8007dae:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007db2:	429f      	cmp	r7, r3
 8007db4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007db8:	f280 80c7 	bge.w	8007f4a <_strtod_l+0x852>
 8007dbc:	1bdb      	subs	r3, r3, r7
 8007dbe:	2b1f      	cmp	r3, #31
 8007dc0:	f04f 0101 	mov.w	r1, #1
 8007dc4:	eba2 0203 	sub.w	r2, r2, r3
 8007dc8:	f300 80b3 	bgt.w	8007f32 <_strtod_l+0x83a>
 8007dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9310      	str	r3, [sp, #64]	; 0x40
 8007dd6:	eb0a 0702 	add.w	r7, sl, r2
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	45ba      	cmp	sl, r7
 8007dde:	4415      	add	r5, r2
 8007de0:	441d      	add	r5, r3
 8007de2:	4653      	mov	r3, sl
 8007de4:	bfa8      	it	ge
 8007de6:	463b      	movge	r3, r7
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	bfa8      	it	ge
 8007dec:	462b      	movge	r3, r5
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfc2      	ittt	gt
 8007df2:	1aff      	subgt	r7, r7, r3
 8007df4:	1aed      	subgt	r5, r5, r3
 8007df6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dd17      	ble.n	8007e30 <_strtod_l+0x738>
 8007e00:	4659      	mov	r1, fp
 8007e02:	461a      	mov	r2, r3
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff f9b5 	bl	8007174 <__pow5mult>
 8007e0a:	4683      	mov	fp, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f aeb1 	beq.w	8007b74 <_strtod_l+0x47c>
 8007e12:	4601      	mov	r1, r0
 8007e14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff f904 	bl	8007024 <__multiply>
 8007e1c:	900a      	str	r0, [sp, #40]	; 0x28
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f aea8 	beq.w	8007b74 <_strtod_l+0x47c>
 8007e24:	4620      	mov	r0, r4
 8007e26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e28:	f7fe ffe6 	bl	8006df8 <_Bfree>
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	f300 808f 	bgt.w	8007f54 <_strtod_l+0x85c>
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dd08      	ble.n	8007e4e <_strtod_l+0x756>
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e40:	9908      	ldr	r1, [sp, #32]
 8007e42:	f7ff f997 	bl	8007174 <__pow5mult>
 8007e46:	9008      	str	r0, [sp, #32]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f43f ae93 	beq.w	8007b74 <_strtod_l+0x47c>
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	dd08      	ble.n	8007e64 <_strtod_l+0x76c>
 8007e52:	462a      	mov	r2, r5
 8007e54:	4620      	mov	r0, r4
 8007e56:	9908      	ldr	r1, [sp, #32]
 8007e58:	f7ff f9e6 	bl	8007228 <__lshift>
 8007e5c:	9008      	str	r0, [sp, #32]
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f ae88 	beq.w	8007b74 <_strtod_l+0x47c>
 8007e64:	f1ba 0f00 	cmp.w	sl, #0
 8007e68:	dd08      	ble.n	8007e7c <_strtod_l+0x784>
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff f9da 	bl	8007228 <__lshift>
 8007e74:	4683      	mov	fp, r0
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f ae7c 	beq.w	8007b74 <_strtod_l+0x47c>
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	9a08      	ldr	r2, [sp, #32]
 8007e80:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e82:	f7ff fa59 	bl	8007338 <__mdiff>
 8007e86:	4606      	mov	r6, r0
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f43f ae73 	beq.w	8007b74 <_strtod_l+0x47c>
 8007e8e:	2500      	movs	r5, #0
 8007e90:	68c3      	ldr	r3, [r0, #12]
 8007e92:	4659      	mov	r1, fp
 8007e94:	60c5      	str	r5, [r0, #12]
 8007e96:	930a      	str	r3, [sp, #40]	; 0x28
 8007e98:	f7ff fa32 	bl	8007300 <__mcmp>
 8007e9c:	42a8      	cmp	r0, r5
 8007e9e:	da6b      	bge.n	8007f78 <_strtod_l+0x880>
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	ea53 0308 	orrs.w	r3, r3, r8
 8007ea6:	f040 808f 	bne.w	8007fc8 <_strtod_l+0x8d0>
 8007eaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f040 808a 	bne.w	8007fc8 <_strtod_l+0x8d0>
 8007eb4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	051b      	lsls	r3, r3, #20
 8007ebc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ec0:	f240 8082 	bls.w	8007fc8 <_strtod_l+0x8d0>
 8007ec4:	6973      	ldr	r3, [r6, #20]
 8007ec6:	b913      	cbnz	r3, 8007ece <_strtod_l+0x7d6>
 8007ec8:	6933      	ldr	r3, [r6, #16]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	dd7c      	ble.n	8007fc8 <_strtod_l+0x8d0>
 8007ece:	4631      	mov	r1, r6
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff f9a8 	bl	8007228 <__lshift>
 8007ed8:	4659      	mov	r1, fp
 8007eda:	4606      	mov	r6, r0
 8007edc:	f7ff fa10 	bl	8007300 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dd71      	ble.n	8007fc8 <_strtod_l+0x8d0>
 8007ee4:	9905      	ldr	r1, [sp, #20]
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	4a21      	ldr	r2, [pc, #132]	; (8007f70 <_strtod_l+0x878>)
 8007eea:	2900      	cmp	r1, #0
 8007eec:	f000 808d 	beq.w	800800a <_strtod_l+0x912>
 8007ef0:	ea02 0109 	and.w	r1, r2, r9
 8007ef4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ef8:	f300 8087 	bgt.w	800800a <_strtod_l+0x912>
 8007efc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f00:	f77f aea9 	ble.w	8007c56 <_strtod_l+0x55e>
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <_strtod_l+0x87c>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f7f8 fae4 	bl	80004d8 <__aeabi_dmul>
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <_strtod_l+0x878>)
 8007f12:	4680      	mov	r8, r0
 8007f14:	400b      	ands	r3, r1
 8007f16:	4689      	mov	r9, r1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f47f ae35 	bne.w	8007b88 <_strtod_l+0x490>
 8007f1e:	2322      	movs	r3, #34	; 0x22
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	e631      	b.n	8007b88 <_strtod_l+0x490>
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	ea03 0808 	and.w	r8, r3, r8
 8007f30:	e6de      	b.n	8007cf0 <_strtod_l+0x5f8>
 8007f32:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007f36:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007f3a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007f3e:	37e2      	adds	r7, #226	; 0xe2
 8007f40:	fa01 f307 	lsl.w	r3, r1, r7
 8007f44:	9310      	str	r3, [sp, #64]	; 0x40
 8007f46:	9113      	str	r1, [sp, #76]	; 0x4c
 8007f48:	e745      	b.n	8007dd6 <_strtod_l+0x6de>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9310      	str	r3, [sp, #64]	; 0x40
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f52:	e740      	b.n	8007dd6 <_strtod_l+0x6de>
 8007f54:	463a      	mov	r2, r7
 8007f56:	4620      	mov	r0, r4
 8007f58:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f5a:	f7ff f965 	bl	8007228 <__lshift>
 8007f5e:	901a      	str	r0, [sp, #104]	; 0x68
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f47f af68 	bne.w	8007e36 <_strtod_l+0x73e>
 8007f66:	e605      	b.n	8007b74 <_strtod_l+0x47c>
 8007f68:	08009870 	.word	0x08009870
 8007f6c:	fffffc02 	.word	0xfffffc02
 8007f70:	7ff00000 	.word	0x7ff00000
 8007f74:	39500000 	.word	0x39500000
 8007f78:	46ca      	mov	sl, r9
 8007f7a:	d165      	bne.n	8008048 <_strtod_l+0x950>
 8007f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f82:	b352      	cbz	r2, 8007fda <_strtod_l+0x8e2>
 8007f84:	4a9e      	ldr	r2, [pc, #632]	; (8008200 <_strtod_l+0xb08>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d12a      	bne.n	8007fe0 <_strtod_l+0x8e8>
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	b1fb      	cbz	r3, 8007fd0 <_strtod_l+0x8d8>
 8007f90:	4b9c      	ldr	r3, [pc, #624]	; (8008204 <_strtod_l+0xb0c>)
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295
 8007f96:	ea09 0303 	and.w	r3, r9, r3
 8007f9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f9e:	d81a      	bhi.n	8007fd6 <_strtod_l+0x8de>
 8007fa0:	0d1b      	lsrs	r3, r3, #20
 8007fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d118      	bne.n	8007fe0 <_strtod_l+0x8e8>
 8007fae:	4b96      	ldr	r3, [pc, #600]	; (8008208 <_strtod_l+0xb10>)
 8007fb0:	459a      	cmp	sl, r3
 8007fb2:	d102      	bne.n	8007fba <_strtod_l+0x8c2>
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	f43f addd 	beq.w	8007b74 <_strtod_l+0x47c>
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	4b91      	ldr	r3, [pc, #580]	; (8008204 <_strtod_l+0xb0c>)
 8007fc0:	ea0a 0303 	and.w	r3, sl, r3
 8007fc4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d19a      	bne.n	8007f04 <_strtod_l+0x80c>
 8007fce:	e5db      	b.n	8007b88 <_strtod_l+0x490>
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd4:	e7e9      	b.n	8007faa <_strtod_l+0x8b2>
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	e7e7      	b.n	8007faa <_strtod_l+0x8b2>
 8007fda:	ea53 0308 	orrs.w	r3, r3, r8
 8007fde:	d081      	beq.n	8007ee4 <_strtod_l+0x7ec>
 8007fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fe2:	b1e3      	cbz	r3, 800801e <_strtod_l+0x926>
 8007fe4:	ea13 0f0a 	tst.w	r3, sl
 8007fe8:	d0ee      	beq.n	8007fc8 <_strtod_l+0x8d0>
 8007fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	9a05      	ldr	r2, [sp, #20]
 8007ff2:	b1c3      	cbz	r3, 8008026 <_strtod_l+0x92e>
 8007ff4:	f7ff fb5c 	bl	80076b0 <sulp>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ffe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008000:	f7f8 f8b4 	bl	800016c <__adddf3>
 8008004:	4680      	mov	r8, r0
 8008006:	4689      	mov	r9, r1
 8008008:	e7de      	b.n	8007fc8 <_strtod_l+0x8d0>
 800800a:	4013      	ands	r3, r2
 800800c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008010:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008014:	f04f 38ff 	mov.w	r8, #4294967295
 8008018:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800801c:	e7d4      	b.n	8007fc8 <_strtod_l+0x8d0>
 800801e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008020:	ea13 0f08 	tst.w	r3, r8
 8008024:	e7e0      	b.n	8007fe8 <_strtod_l+0x8f0>
 8008026:	f7ff fb43 	bl	80076b0 <sulp>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008030:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008032:	f7f8 f899 	bl	8000168 <__aeabi_dsub>
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	4680      	mov	r8, r0
 800803c:	4689      	mov	r9, r1
 800803e:	f7f8 fcb3 	bl	80009a8 <__aeabi_dcmpeq>
 8008042:	2800      	cmp	r0, #0
 8008044:	d0c0      	beq.n	8007fc8 <_strtod_l+0x8d0>
 8008046:	e606      	b.n	8007c56 <_strtod_l+0x55e>
 8008048:	4659      	mov	r1, fp
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff fabe 	bl	80075cc <__ratio>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008058:	2200      	movs	r2, #0
 800805a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800805e:	f7f8 fcb7 	bl	80009d0 <__aeabi_dcmple>
 8008062:	2800      	cmp	r0, #0
 8008064:	d06f      	beq.n	8008146 <_strtod_l+0xa4e>
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d17c      	bne.n	8008166 <_strtod_l+0xa6e>
 800806c:	f1b8 0f00 	cmp.w	r8, #0
 8008070:	d159      	bne.n	8008126 <_strtod_l+0xa2e>
 8008072:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008076:	2b00      	cmp	r3, #0
 8008078:	d17b      	bne.n	8008172 <_strtod_l+0xa7a>
 800807a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800807e:	2200      	movs	r2, #0
 8008080:	4b62      	ldr	r3, [pc, #392]	; (800820c <_strtod_l+0xb14>)
 8008082:	f7f8 fc9b 	bl	80009bc <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	d15a      	bne.n	8008140 <_strtod_l+0xa48>
 800808a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800808e:	2200      	movs	r2, #0
 8008090:	4b5f      	ldr	r3, [pc, #380]	; (8008210 <_strtod_l+0xb18>)
 8008092:	f7f8 fa21 	bl	80004d8 <__aeabi_dmul>
 8008096:	4605      	mov	r5, r0
 8008098:	460f      	mov	r7, r1
 800809a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800809e:	9506      	str	r5, [sp, #24]
 80080a0:	9307      	str	r3, [sp, #28]
 80080a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80080aa:	4b56      	ldr	r3, [pc, #344]	; (8008204 <_strtod_l+0xb0c>)
 80080ac:	4a55      	ldr	r2, [pc, #340]	; (8008204 <_strtod_l+0xb0c>)
 80080ae:	ea0a 0303 	and.w	r3, sl, r3
 80080b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80080b4:	4b57      	ldr	r3, [pc, #348]	; (8008214 <_strtod_l+0xb1c>)
 80080b6:	ea0a 0202 	and.w	r2, sl, r2
 80080ba:	429a      	cmp	r2, r3
 80080bc:	f040 80b0 	bne.w	8008220 <_strtod_l+0xb28>
 80080c0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	f7ff f9c2 	bl	8007450 <__ulp>
 80080cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080d0:	f7f8 fa02 	bl	80004d8 <__aeabi_dmul>
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	f7f8 f848 	bl	800016c <__adddf3>
 80080dc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008204 <_strtod_l+0xb0c>
 80080e0:	4a4d      	ldr	r2, [pc, #308]	; (8008218 <_strtod_l+0xb20>)
 80080e2:	ea01 0a0a 	and.w	sl, r1, sl
 80080e6:	4592      	cmp	sl, r2
 80080e8:	4680      	mov	r8, r0
 80080ea:	d948      	bls.n	800817e <_strtod_l+0xa86>
 80080ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080ee:	4b46      	ldr	r3, [pc, #280]	; (8008208 <_strtod_l+0xb10>)
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d103      	bne.n	80080fc <_strtod_l+0xa04>
 80080f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f6:	3301      	adds	r3, #1
 80080f8:	f43f ad3c 	beq.w	8007b74 <_strtod_l+0x47c>
 80080fc:	f04f 38ff 	mov.w	r8, #4294967295
 8008100:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008208 <_strtod_l+0xb10>
 8008104:	4620      	mov	r0, r4
 8008106:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008108:	f7fe fe76 	bl	8006df8 <_Bfree>
 800810c:	4620      	mov	r0, r4
 800810e:	9908      	ldr	r1, [sp, #32]
 8008110:	f7fe fe72 	bl	8006df8 <_Bfree>
 8008114:	4659      	mov	r1, fp
 8008116:	4620      	mov	r0, r4
 8008118:	f7fe fe6e 	bl	8006df8 <_Bfree>
 800811c:	4631      	mov	r1, r6
 800811e:	4620      	mov	r0, r4
 8008120:	f7fe fe6a 	bl	8006df8 <_Bfree>
 8008124:	e605      	b.n	8007d32 <_strtod_l+0x63a>
 8008126:	f1b8 0f01 	cmp.w	r8, #1
 800812a:	d103      	bne.n	8008134 <_strtod_l+0xa3c>
 800812c:	f1b9 0f00 	cmp.w	r9, #0
 8008130:	f43f ad91 	beq.w	8007c56 <_strtod_l+0x55e>
 8008134:	2200      	movs	r2, #0
 8008136:	4b39      	ldr	r3, [pc, #228]	; (800821c <_strtod_l+0xb24>)
 8008138:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800813a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800813e:	e016      	b.n	800816e <_strtod_l+0xa76>
 8008140:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008142:	4f33      	ldr	r7, [pc, #204]	; (8008210 <_strtod_l+0xb18>)
 8008144:	e7a9      	b.n	800809a <_strtod_l+0x9a2>
 8008146:	4b32      	ldr	r3, [pc, #200]	; (8008210 <_strtod_l+0xb18>)
 8008148:	2200      	movs	r2, #0
 800814a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800814e:	f7f8 f9c3 	bl	80004d8 <__aeabi_dmul>
 8008152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008154:	4605      	mov	r5, r0
 8008156:	460f      	mov	r7, r1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d09e      	beq.n	800809a <_strtod_l+0x9a2>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008164:	e79d      	b.n	80080a2 <_strtod_l+0x9aa>
 8008166:	2200      	movs	r2, #0
 8008168:	4b28      	ldr	r3, [pc, #160]	; (800820c <_strtod_l+0xb14>)
 800816a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800816e:	4f27      	ldr	r7, [pc, #156]	; (800820c <_strtod_l+0xb14>)
 8008170:	e797      	b.n	80080a2 <_strtod_l+0x9aa>
 8008172:	2200      	movs	r2, #0
 8008174:	4b29      	ldr	r3, [pc, #164]	; (800821c <_strtod_l+0xb24>)
 8008176:	4645      	mov	r5, r8
 8008178:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800817c:	e7f7      	b.n	800816e <_strtod_l+0xa76>
 800817e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008182:	9b05      	ldr	r3, [sp, #20]
 8008184:	46ca      	mov	sl, r9
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1bc      	bne.n	8008104 <_strtod_l+0xa0c>
 800818a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800818e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008190:	0d1b      	lsrs	r3, r3, #20
 8008192:	051b      	lsls	r3, r3, #20
 8008194:	429a      	cmp	r2, r3
 8008196:	d1b5      	bne.n	8008104 <_strtod_l+0xa0c>
 8008198:	4628      	mov	r0, r5
 800819a:	4639      	mov	r1, r7
 800819c:	f7f8 ff42 	bl	8001024 <__aeabi_d2lz>
 80081a0:	f7f8 f96c 	bl	800047c <__aeabi_l2d>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4628      	mov	r0, r5
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f7 ffdc 	bl	8000168 <__aeabi_dsub>
 80081b0:	460b      	mov	r3, r1
 80081b2:	4602      	mov	r2, r0
 80081b4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80081b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80081bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081be:	ea4a 0a08 	orr.w	sl, sl, r8
 80081c2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80081c6:	d06c      	beq.n	80082a2 <_strtod_l+0xbaa>
 80081c8:	a309      	add	r3, pc, #36	; (adr r3, 80081f0 <_strtod_l+0xaf8>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 fbf5 	bl	80009bc <__aeabi_dcmplt>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f47f acd8 	bne.w	8007b88 <_strtod_l+0x490>
 80081d8:	a307      	add	r3, pc, #28	; (adr r3, 80081f8 <_strtod_l+0xb00>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081e2:	f7f8 fc09 	bl	80009f8 <__aeabi_dcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d08c      	beq.n	8008104 <_strtod_l+0xa0c>
 80081ea:	e4cd      	b.n	8007b88 <_strtod_l+0x490>
 80081ec:	f3af 8000 	nop.w
 80081f0:	94a03595 	.word	0x94a03595
 80081f4:	3fdfffff 	.word	0x3fdfffff
 80081f8:	35afe535 	.word	0x35afe535
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	000fffff 	.word	0x000fffff
 8008204:	7ff00000 	.word	0x7ff00000
 8008208:	7fefffff 	.word	0x7fefffff
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	3fe00000 	.word	0x3fe00000
 8008214:	7fe00000 	.word	0x7fe00000
 8008218:	7c9fffff 	.word	0x7c9fffff
 800821c:	bff00000 	.word	0xbff00000
 8008220:	9b05      	ldr	r3, [sp, #20]
 8008222:	b333      	cbz	r3, 8008272 <_strtod_l+0xb7a>
 8008224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008226:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800822a:	d822      	bhi.n	8008272 <_strtod_l+0xb7a>
 800822c:	a328      	add	r3, pc, #160	; (adr r3, 80082d0 <_strtod_l+0xbd8>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	4628      	mov	r0, r5
 8008234:	4639      	mov	r1, r7
 8008236:	f7f8 fbcb 	bl	80009d0 <__aeabi_dcmple>
 800823a:	b1a0      	cbz	r0, 8008266 <_strtod_l+0xb6e>
 800823c:	4639      	mov	r1, r7
 800823e:	4628      	mov	r0, r5
 8008240:	f7f8 fc22 	bl	8000a88 <__aeabi_d2uiz>
 8008244:	2801      	cmp	r0, #1
 8008246:	bf38      	it	cc
 8008248:	2001      	movcc	r0, #1
 800824a:	f7f8 f8cb 	bl	80003e4 <__aeabi_ui2d>
 800824e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008250:	4605      	mov	r5, r0
 8008252:	460f      	mov	r7, r1
 8008254:	bb03      	cbnz	r3, 8008298 <_strtod_l+0xba0>
 8008256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800825a:	9014      	str	r0, [sp, #80]	; 0x50
 800825c:	9315      	str	r3, [sp, #84]	; 0x54
 800825e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008262:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800826a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800826e:	1a9b      	subs	r3, r3, r2
 8008270:	9311      	str	r3, [sp, #68]	; 0x44
 8008272:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008274:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008276:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800827a:	f7ff f8e9 	bl	8007450 <__ulp>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 f927 	bl	80004d8 <__aeabi_dmul>
 800828a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800828c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800828e:	f7f7 ff6d 	bl	800016c <__adddf3>
 8008292:	4680      	mov	r8, r0
 8008294:	4689      	mov	r9, r1
 8008296:	e774      	b.n	8008182 <_strtod_l+0xa8a>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80082a0:	e7dd      	b.n	800825e <_strtod_l+0xb66>
 80082a2:	a30d      	add	r3, pc, #52	; (adr r3, 80082d8 <_strtod_l+0xbe0>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 fb88 	bl	80009bc <__aeabi_dcmplt>
 80082ac:	e79b      	b.n	80081e6 <_strtod_l+0xaee>
 80082ae:	2300      	movs	r3, #0
 80082b0:	930e      	str	r3, [sp, #56]	; 0x38
 80082b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	f7ff ba5b 	b.w	8007772 <_strtod_l+0x7a>
 80082bc:	2a65      	cmp	r2, #101	; 0x65
 80082be:	f43f ab52 	beq.w	8007966 <_strtod_l+0x26e>
 80082c2:	2a45      	cmp	r2, #69	; 0x45
 80082c4:	f43f ab4f 	beq.w	8007966 <_strtod_l+0x26e>
 80082c8:	2301      	movs	r3, #1
 80082ca:	f7ff bb87 	b.w	80079dc <_strtod_l+0x2e4>
 80082ce:	bf00      	nop
 80082d0:	ffc00000 	.word	0xffc00000
 80082d4:	41dfffff 	.word	0x41dfffff
 80082d8:	94a03595 	.word	0x94a03595
 80082dc:	3fcfffff 	.word	0x3fcfffff

080082e0 <_strtod_r>:
 80082e0:	4b01      	ldr	r3, [pc, #4]	; (80082e8 <_strtod_r+0x8>)
 80082e2:	f7ff ba09 	b.w	80076f8 <_strtod_l>
 80082e6:	bf00      	nop
 80082e8:	20000078 	.word	0x20000078

080082ec <_strtol_l.constprop.0>:
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f2:	4686      	mov	lr, r0
 80082f4:	4690      	mov	r8, r2
 80082f6:	d001      	beq.n	80082fc <_strtol_l.constprop.0+0x10>
 80082f8:	2b24      	cmp	r3, #36	; 0x24
 80082fa:	d906      	bls.n	800830a <_strtol_l.constprop.0+0x1e>
 80082fc:	f7fd fd92 	bl	8005e24 <__errno>
 8008300:	2316      	movs	r3, #22
 8008302:	6003      	str	r3, [r0, #0]
 8008304:	2000      	movs	r0, #0
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	460d      	mov	r5, r1
 800830c:	4835      	ldr	r0, [pc, #212]	; (80083e4 <_strtol_l.constprop.0+0xf8>)
 800830e:	462a      	mov	r2, r5
 8008310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008314:	5d06      	ldrb	r6, [r0, r4]
 8008316:	f016 0608 	ands.w	r6, r6, #8
 800831a:	d1f8      	bne.n	800830e <_strtol_l.constprop.0+0x22>
 800831c:	2c2d      	cmp	r4, #45	; 0x2d
 800831e:	d12e      	bne.n	800837e <_strtol_l.constprop.0+0x92>
 8008320:	2601      	movs	r6, #1
 8008322:	782c      	ldrb	r4, [r5, #0]
 8008324:	1c95      	adds	r5, r2, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d057      	beq.n	80083da <_strtol_l.constprop.0+0xee>
 800832a:	2b10      	cmp	r3, #16
 800832c:	d109      	bne.n	8008342 <_strtol_l.constprop.0+0x56>
 800832e:	2c30      	cmp	r4, #48	; 0x30
 8008330:	d107      	bne.n	8008342 <_strtol_l.constprop.0+0x56>
 8008332:	782a      	ldrb	r2, [r5, #0]
 8008334:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008338:	2a58      	cmp	r2, #88	; 0x58
 800833a:	d149      	bne.n	80083d0 <_strtol_l.constprop.0+0xe4>
 800833c:	2310      	movs	r3, #16
 800833e:	786c      	ldrb	r4, [r5, #1]
 8008340:	3502      	adds	r5, #2
 8008342:	2200      	movs	r2, #0
 8008344:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008348:	f10c 3cff 	add.w	ip, ip, #4294967295
 800834c:	fbbc f9f3 	udiv	r9, ip, r3
 8008350:	4610      	mov	r0, r2
 8008352:	fb03 ca19 	mls	sl, r3, r9, ip
 8008356:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800835a:	2f09      	cmp	r7, #9
 800835c:	d814      	bhi.n	8008388 <_strtol_l.constprop.0+0x9c>
 800835e:	463c      	mov	r4, r7
 8008360:	42a3      	cmp	r3, r4
 8008362:	dd20      	ble.n	80083a6 <_strtol_l.constprop.0+0xba>
 8008364:	1c57      	adds	r7, r2, #1
 8008366:	d007      	beq.n	8008378 <_strtol_l.constprop.0+0x8c>
 8008368:	4581      	cmp	r9, r0
 800836a:	d319      	bcc.n	80083a0 <_strtol_l.constprop.0+0xb4>
 800836c:	d101      	bne.n	8008372 <_strtol_l.constprop.0+0x86>
 800836e:	45a2      	cmp	sl, r4
 8008370:	db16      	blt.n	80083a0 <_strtol_l.constprop.0+0xb4>
 8008372:	2201      	movs	r2, #1
 8008374:	fb00 4003 	mla	r0, r0, r3, r4
 8008378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800837c:	e7eb      	b.n	8008356 <_strtol_l.constprop.0+0x6a>
 800837e:	2c2b      	cmp	r4, #43	; 0x2b
 8008380:	bf04      	itt	eq
 8008382:	782c      	ldrbeq	r4, [r5, #0]
 8008384:	1c95      	addeq	r5, r2, #2
 8008386:	e7ce      	b.n	8008326 <_strtol_l.constprop.0+0x3a>
 8008388:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800838c:	2f19      	cmp	r7, #25
 800838e:	d801      	bhi.n	8008394 <_strtol_l.constprop.0+0xa8>
 8008390:	3c37      	subs	r4, #55	; 0x37
 8008392:	e7e5      	b.n	8008360 <_strtol_l.constprop.0+0x74>
 8008394:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008398:	2f19      	cmp	r7, #25
 800839a:	d804      	bhi.n	80083a6 <_strtol_l.constprop.0+0xba>
 800839c:	3c57      	subs	r4, #87	; 0x57
 800839e:	e7df      	b.n	8008360 <_strtol_l.constprop.0+0x74>
 80083a0:	f04f 32ff 	mov.w	r2, #4294967295
 80083a4:	e7e8      	b.n	8008378 <_strtol_l.constprop.0+0x8c>
 80083a6:	1c53      	adds	r3, r2, #1
 80083a8:	d108      	bne.n	80083bc <_strtol_l.constprop.0+0xd0>
 80083aa:	2322      	movs	r3, #34	; 0x22
 80083ac:	4660      	mov	r0, ip
 80083ae:	f8ce 3000 	str.w	r3, [lr]
 80083b2:	f1b8 0f00 	cmp.w	r8, #0
 80083b6:	d0a6      	beq.n	8008306 <_strtol_l.constprop.0+0x1a>
 80083b8:	1e69      	subs	r1, r5, #1
 80083ba:	e006      	b.n	80083ca <_strtol_l.constprop.0+0xde>
 80083bc:	b106      	cbz	r6, 80083c0 <_strtol_l.constprop.0+0xd4>
 80083be:	4240      	negs	r0, r0
 80083c0:	f1b8 0f00 	cmp.w	r8, #0
 80083c4:	d09f      	beq.n	8008306 <_strtol_l.constprop.0+0x1a>
 80083c6:	2a00      	cmp	r2, #0
 80083c8:	d1f6      	bne.n	80083b8 <_strtol_l.constprop.0+0xcc>
 80083ca:	f8c8 1000 	str.w	r1, [r8]
 80083ce:	e79a      	b.n	8008306 <_strtol_l.constprop.0+0x1a>
 80083d0:	2430      	movs	r4, #48	; 0x30
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1b5      	bne.n	8008342 <_strtol_l.constprop.0+0x56>
 80083d6:	2308      	movs	r3, #8
 80083d8:	e7b3      	b.n	8008342 <_strtol_l.constprop.0+0x56>
 80083da:	2c30      	cmp	r4, #48	; 0x30
 80083dc:	d0a9      	beq.n	8008332 <_strtol_l.constprop.0+0x46>
 80083de:	230a      	movs	r3, #10
 80083e0:	e7af      	b.n	8008342 <_strtol_l.constprop.0+0x56>
 80083e2:	bf00      	nop
 80083e4:	08009899 	.word	0x08009899

080083e8 <_strtol_r>:
 80083e8:	f7ff bf80 	b.w	80082ec <_strtol_l.constprop.0>

080083ec <__ssputs_r>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	461f      	mov	r7, r3
 80083f2:	688e      	ldr	r6, [r1, #8]
 80083f4:	4682      	mov	sl, r0
 80083f6:	42be      	cmp	r6, r7
 80083f8:	460c      	mov	r4, r1
 80083fa:	4690      	mov	r8, r2
 80083fc:	680b      	ldr	r3, [r1, #0]
 80083fe:	d82c      	bhi.n	800845a <__ssputs_r+0x6e>
 8008400:	898a      	ldrh	r2, [r1, #12]
 8008402:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008406:	d026      	beq.n	8008456 <__ssputs_r+0x6a>
 8008408:	6965      	ldr	r5, [r4, #20]
 800840a:	6909      	ldr	r1, [r1, #16]
 800840c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008410:	eba3 0901 	sub.w	r9, r3, r1
 8008414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008418:	1c7b      	adds	r3, r7, #1
 800841a:	444b      	add	r3, r9
 800841c:	106d      	asrs	r5, r5, #1
 800841e:	429d      	cmp	r5, r3
 8008420:	bf38      	it	cc
 8008422:	461d      	movcc	r5, r3
 8008424:	0553      	lsls	r3, r2, #21
 8008426:	d527      	bpl.n	8008478 <__ssputs_r+0x8c>
 8008428:	4629      	mov	r1, r5
 800842a:	f7fe fc19 	bl	8006c60 <_malloc_r>
 800842e:	4606      	mov	r6, r0
 8008430:	b360      	cbz	r0, 800848c <__ssputs_r+0xa0>
 8008432:	464a      	mov	r2, r9
 8008434:	6921      	ldr	r1, [r4, #16]
 8008436:	f000 fa17 	bl	8008868 <memcpy>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	6126      	str	r6, [r4, #16]
 8008448:	444e      	add	r6, r9
 800844a:	6026      	str	r6, [r4, #0]
 800844c:	463e      	mov	r6, r7
 800844e:	6165      	str	r5, [r4, #20]
 8008450:	eba5 0509 	sub.w	r5, r5, r9
 8008454:	60a5      	str	r5, [r4, #8]
 8008456:	42be      	cmp	r6, r7
 8008458:	d900      	bls.n	800845c <__ssputs_r+0x70>
 800845a:	463e      	mov	r6, r7
 800845c:	4632      	mov	r2, r6
 800845e:	4641      	mov	r1, r8
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	f000 f9c5 	bl	80087f0 <memmove>
 8008466:	2000      	movs	r0, #0
 8008468:	68a3      	ldr	r3, [r4, #8]
 800846a:	1b9b      	subs	r3, r3, r6
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	4433      	add	r3, r6
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	462a      	mov	r2, r5
 800847a:	f000 fda6 	bl	8008fca <_realloc_r>
 800847e:	4606      	mov	r6, r0
 8008480:	2800      	cmp	r0, #0
 8008482:	d1e0      	bne.n	8008446 <__ssputs_r+0x5a>
 8008484:	4650      	mov	r0, sl
 8008486:	6921      	ldr	r1, [r4, #16]
 8008488:	f7fe fb7a 	bl	8006b80 <_free_r>
 800848c:	230c      	movs	r3, #12
 800848e:	f8ca 3000 	str.w	r3, [sl]
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	e7e9      	b.n	8008474 <__ssputs_r+0x88>

080084a0 <_svfiprintf_r>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	4698      	mov	r8, r3
 80084a6:	898b      	ldrh	r3, [r1, #12]
 80084a8:	4607      	mov	r7, r0
 80084aa:	061b      	lsls	r3, r3, #24
 80084ac:	460d      	mov	r5, r1
 80084ae:	4614      	mov	r4, r2
 80084b0:	b09d      	sub	sp, #116	; 0x74
 80084b2:	d50e      	bpl.n	80084d2 <_svfiprintf_r+0x32>
 80084b4:	690b      	ldr	r3, [r1, #16]
 80084b6:	b963      	cbnz	r3, 80084d2 <_svfiprintf_r+0x32>
 80084b8:	2140      	movs	r1, #64	; 0x40
 80084ba:	f7fe fbd1 	bl	8006c60 <_malloc_r>
 80084be:	6028      	str	r0, [r5, #0]
 80084c0:	6128      	str	r0, [r5, #16]
 80084c2:	b920      	cbnz	r0, 80084ce <_svfiprintf_r+0x2e>
 80084c4:	230c      	movs	r3, #12
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	e0d0      	b.n	8008670 <_svfiprintf_r+0x1d0>
 80084ce:	2340      	movs	r3, #64	; 0x40
 80084d0:	616b      	str	r3, [r5, #20]
 80084d2:	2300      	movs	r3, #0
 80084d4:	9309      	str	r3, [sp, #36]	; 0x24
 80084d6:	2320      	movs	r3, #32
 80084d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084dc:	2330      	movs	r3, #48	; 0x30
 80084de:	f04f 0901 	mov.w	r9, #1
 80084e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008688 <_svfiprintf_r+0x1e8>
 80084ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ee:	4623      	mov	r3, r4
 80084f0:	469a      	mov	sl, r3
 80084f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f6:	b10a      	cbz	r2, 80084fc <_svfiprintf_r+0x5c>
 80084f8:	2a25      	cmp	r2, #37	; 0x25
 80084fa:	d1f9      	bne.n	80084f0 <_svfiprintf_r+0x50>
 80084fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008500:	d00b      	beq.n	800851a <_svfiprintf_r+0x7a>
 8008502:	465b      	mov	r3, fp
 8008504:	4622      	mov	r2, r4
 8008506:	4629      	mov	r1, r5
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff ff6f 	bl	80083ec <__ssputs_r>
 800850e:	3001      	adds	r0, #1
 8008510:	f000 80a9 	beq.w	8008666 <_svfiprintf_r+0x1c6>
 8008514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008516:	445a      	add	r2, fp
 8008518:	9209      	str	r2, [sp, #36]	; 0x24
 800851a:	f89a 3000 	ldrb.w	r3, [sl]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80a1 	beq.w	8008666 <_svfiprintf_r+0x1c6>
 8008524:	2300      	movs	r3, #0
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800852e:	f10a 0a01 	add.w	sl, sl, #1
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800853a:	931a      	str	r3, [sp, #104]	; 0x68
 800853c:	4654      	mov	r4, sl
 800853e:	2205      	movs	r2, #5
 8008540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008544:	4850      	ldr	r0, [pc, #320]	; (8008688 <_svfiprintf_r+0x1e8>)
 8008546:	f7fd fc9a 	bl	8005e7e <memchr>
 800854a:	9a04      	ldr	r2, [sp, #16]
 800854c:	b9d8      	cbnz	r0, 8008586 <_svfiprintf_r+0xe6>
 800854e:	06d0      	lsls	r0, r2, #27
 8008550:	bf44      	itt	mi
 8008552:	2320      	movmi	r3, #32
 8008554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008558:	0711      	lsls	r1, r2, #28
 800855a:	bf44      	itt	mi
 800855c:	232b      	movmi	r3, #43	; 0x2b
 800855e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008562:	f89a 3000 	ldrb.w	r3, [sl]
 8008566:	2b2a      	cmp	r3, #42	; 0x2a
 8008568:	d015      	beq.n	8008596 <_svfiprintf_r+0xf6>
 800856a:	4654      	mov	r4, sl
 800856c:	2000      	movs	r0, #0
 800856e:	f04f 0c0a 	mov.w	ip, #10
 8008572:	9a07      	ldr	r2, [sp, #28]
 8008574:	4621      	mov	r1, r4
 8008576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857a:	3b30      	subs	r3, #48	; 0x30
 800857c:	2b09      	cmp	r3, #9
 800857e:	d94d      	bls.n	800861c <_svfiprintf_r+0x17c>
 8008580:	b1b0      	cbz	r0, 80085b0 <_svfiprintf_r+0x110>
 8008582:	9207      	str	r2, [sp, #28]
 8008584:	e014      	b.n	80085b0 <_svfiprintf_r+0x110>
 8008586:	eba0 0308 	sub.w	r3, r0, r8
 800858a:	fa09 f303 	lsl.w	r3, r9, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	46a2      	mov	sl, r4
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	e7d2      	b.n	800853c <_svfiprintf_r+0x9c>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	1d19      	adds	r1, r3, #4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	9103      	str	r1, [sp, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfbb      	ittet	lt
 80085a2:	425b      	neglt	r3, r3
 80085a4:	f042 0202 	orrlt.w	r2, r2, #2
 80085a8:	9307      	strge	r3, [sp, #28]
 80085aa:	9307      	strlt	r3, [sp, #28]
 80085ac:	bfb8      	it	lt
 80085ae:	9204      	strlt	r2, [sp, #16]
 80085b0:	7823      	ldrb	r3, [r4, #0]
 80085b2:	2b2e      	cmp	r3, #46	; 0x2e
 80085b4:	d10c      	bne.n	80085d0 <_svfiprintf_r+0x130>
 80085b6:	7863      	ldrb	r3, [r4, #1]
 80085b8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ba:	d134      	bne.n	8008626 <_svfiprintf_r+0x186>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	3402      	adds	r4, #2
 80085c0:	1d1a      	adds	r2, r3, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	9203      	str	r2, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfb8      	it	lt
 80085ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800868c <_svfiprintf_r+0x1ec>
 80085d4:	2203      	movs	r2, #3
 80085d6:	4650      	mov	r0, sl
 80085d8:	7821      	ldrb	r1, [r4, #0]
 80085da:	f7fd fc50 	bl	8005e7e <memchr>
 80085de:	b138      	cbz	r0, 80085f0 <_svfiprintf_r+0x150>
 80085e0:	2240      	movs	r2, #64	; 0x40
 80085e2:	9b04      	ldr	r3, [sp, #16]
 80085e4:	eba0 000a 	sub.w	r0, r0, sl
 80085e8:	4082      	lsls	r2, r0
 80085ea:	4313      	orrs	r3, r2
 80085ec:	3401      	adds	r4, #1
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	2206      	movs	r2, #6
 80085f6:	4826      	ldr	r0, [pc, #152]	; (8008690 <_svfiprintf_r+0x1f0>)
 80085f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085fc:	f7fd fc3f 	bl	8005e7e <memchr>
 8008600:	2800      	cmp	r0, #0
 8008602:	d038      	beq.n	8008676 <_svfiprintf_r+0x1d6>
 8008604:	4b23      	ldr	r3, [pc, #140]	; (8008694 <_svfiprintf_r+0x1f4>)
 8008606:	bb1b      	cbnz	r3, 8008650 <_svfiprintf_r+0x1b0>
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	3307      	adds	r3, #7
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	4433      	add	r3, r6
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	e768      	b.n	80084ee <_svfiprintf_r+0x4e>
 800861c:	460c      	mov	r4, r1
 800861e:	2001      	movs	r0, #1
 8008620:	fb0c 3202 	mla	r2, ip, r2, r3
 8008624:	e7a6      	b.n	8008574 <_svfiprintf_r+0xd4>
 8008626:	2300      	movs	r3, #0
 8008628:	f04f 0c0a 	mov.w	ip, #10
 800862c:	4619      	mov	r1, r3
 800862e:	3401      	adds	r4, #1
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4620      	mov	r0, r4
 8008634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008638:	3a30      	subs	r2, #48	; 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d903      	bls.n	8008646 <_svfiprintf_r+0x1a6>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c6      	beq.n	80085d0 <_svfiprintf_r+0x130>
 8008642:	9105      	str	r1, [sp, #20]
 8008644:	e7c4      	b.n	80085d0 <_svfiprintf_r+0x130>
 8008646:	4604      	mov	r4, r0
 8008648:	2301      	movs	r3, #1
 800864a:	fb0c 2101 	mla	r1, ip, r1, r2
 800864e:	e7f0      	b.n	8008632 <_svfiprintf_r+0x192>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	462a      	mov	r2, r5
 8008656:	4638      	mov	r0, r7
 8008658:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <_svfiprintf_r+0x1f8>)
 800865a:	a904      	add	r1, sp, #16
 800865c:	f7fc fc7a 	bl	8004f54 <_printf_float>
 8008660:	1c42      	adds	r2, r0, #1
 8008662:	4606      	mov	r6, r0
 8008664:	d1d6      	bne.n	8008614 <_svfiprintf_r+0x174>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	065b      	lsls	r3, r3, #25
 800866a:	f53f af2d 	bmi.w	80084c8 <_svfiprintf_r+0x28>
 800866e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008670:	b01d      	add	sp, #116	; 0x74
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	ab03      	add	r3, sp, #12
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	462a      	mov	r2, r5
 800867c:	4638      	mov	r0, r7
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <_svfiprintf_r+0x1f8>)
 8008680:	a904      	add	r1, sp, #16
 8008682:	f7fc ff07 	bl	8005494 <_printf_i>
 8008686:	e7eb      	b.n	8008660 <_svfiprintf_r+0x1c0>
 8008688:	08009999 	.word	0x08009999
 800868c:	0800999f 	.word	0x0800999f
 8008690:	080099a3 	.word	0x080099a3
 8008694:	08004f55 	.word	0x08004f55
 8008698:	080083ed 	.word	0x080083ed

0800869c <__sflush_r>:
 800869c:	898a      	ldrh	r2, [r1, #12]
 800869e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a0:	4605      	mov	r5, r0
 80086a2:	0710      	lsls	r0, r2, #28
 80086a4:	460c      	mov	r4, r1
 80086a6:	d457      	bmi.n	8008758 <__sflush_r+0xbc>
 80086a8:	684b      	ldr	r3, [r1, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dc04      	bgt.n	80086b8 <__sflush_r+0x1c>
 80086ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dc01      	bgt.n	80086b8 <__sflush_r+0x1c>
 80086b4:	2000      	movs	r0, #0
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d0fa      	beq.n	80086b4 <__sflush_r+0x18>
 80086be:	2300      	movs	r3, #0
 80086c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086c4:	682f      	ldr	r7, [r5, #0]
 80086c6:	6a21      	ldr	r1, [r4, #32]
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	d032      	beq.n	8008732 <__sflush_r+0x96>
 80086cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	075a      	lsls	r2, r3, #29
 80086d2:	d505      	bpl.n	80086e0 <__sflush_r+0x44>
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	1ac0      	subs	r0, r0, r3
 80086d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086da:	b10b      	cbz	r3, 80086e0 <__sflush_r+0x44>
 80086dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086de:	1ac0      	subs	r0, r0, r3
 80086e0:	2300      	movs	r3, #0
 80086e2:	4602      	mov	r2, r0
 80086e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086e6:	4628      	mov	r0, r5
 80086e8:	6a21      	ldr	r1, [r4, #32]
 80086ea:	47b0      	blx	r6
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	d106      	bne.n	8008700 <__sflush_r+0x64>
 80086f2:	6829      	ldr	r1, [r5, #0]
 80086f4:	291d      	cmp	r1, #29
 80086f6:	d82b      	bhi.n	8008750 <__sflush_r+0xb4>
 80086f8:	4a28      	ldr	r2, [pc, #160]	; (800879c <__sflush_r+0x100>)
 80086fa:	410a      	asrs	r2, r1
 80086fc:	07d6      	lsls	r6, r2, #31
 80086fe:	d427      	bmi.n	8008750 <__sflush_r+0xb4>
 8008700:	2200      	movs	r2, #0
 8008702:	6062      	str	r2, [r4, #4]
 8008704:	6922      	ldr	r2, [r4, #16]
 8008706:	04d9      	lsls	r1, r3, #19
 8008708:	6022      	str	r2, [r4, #0]
 800870a:	d504      	bpl.n	8008716 <__sflush_r+0x7a>
 800870c:	1c42      	adds	r2, r0, #1
 800870e:	d101      	bne.n	8008714 <__sflush_r+0x78>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b903      	cbnz	r3, 8008716 <__sflush_r+0x7a>
 8008714:	6560      	str	r0, [r4, #84]	; 0x54
 8008716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008718:	602f      	str	r7, [r5, #0]
 800871a:	2900      	cmp	r1, #0
 800871c:	d0ca      	beq.n	80086b4 <__sflush_r+0x18>
 800871e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008722:	4299      	cmp	r1, r3
 8008724:	d002      	beq.n	800872c <__sflush_r+0x90>
 8008726:	4628      	mov	r0, r5
 8008728:	f7fe fa2a 	bl	8006b80 <_free_r>
 800872c:	2000      	movs	r0, #0
 800872e:	6360      	str	r0, [r4, #52]	; 0x34
 8008730:	e7c1      	b.n	80086b6 <__sflush_r+0x1a>
 8008732:	2301      	movs	r3, #1
 8008734:	4628      	mov	r0, r5
 8008736:	47b0      	blx	r6
 8008738:	1c41      	adds	r1, r0, #1
 800873a:	d1c8      	bne.n	80086ce <__sflush_r+0x32>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0c5      	beq.n	80086ce <__sflush_r+0x32>
 8008742:	2b1d      	cmp	r3, #29
 8008744:	d001      	beq.n	800874a <__sflush_r+0xae>
 8008746:	2b16      	cmp	r3, #22
 8008748:	d101      	bne.n	800874e <__sflush_r+0xb2>
 800874a:	602f      	str	r7, [r5, #0]
 800874c:	e7b2      	b.n	80086b4 <__sflush_r+0x18>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	e7ae      	b.n	80086b6 <__sflush_r+0x1a>
 8008758:	690f      	ldr	r7, [r1, #16]
 800875a:	2f00      	cmp	r7, #0
 800875c:	d0aa      	beq.n	80086b4 <__sflush_r+0x18>
 800875e:	0793      	lsls	r3, r2, #30
 8008760:	bf18      	it	ne
 8008762:	2300      	movne	r3, #0
 8008764:	680e      	ldr	r6, [r1, #0]
 8008766:	bf08      	it	eq
 8008768:	694b      	ldreq	r3, [r1, #20]
 800876a:	1bf6      	subs	r6, r6, r7
 800876c:	600f      	str	r7, [r1, #0]
 800876e:	608b      	str	r3, [r1, #8]
 8008770:	2e00      	cmp	r6, #0
 8008772:	dd9f      	ble.n	80086b4 <__sflush_r+0x18>
 8008774:	4633      	mov	r3, r6
 8008776:	463a      	mov	r2, r7
 8008778:	4628      	mov	r0, r5
 800877a:	6a21      	ldr	r1, [r4, #32]
 800877c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008780:	47e0      	blx	ip
 8008782:	2800      	cmp	r0, #0
 8008784:	dc06      	bgt.n	8008794 <__sflush_r+0xf8>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	e790      	b.n	80086b6 <__sflush_r+0x1a>
 8008794:	4407      	add	r7, r0
 8008796:	1a36      	subs	r6, r6, r0
 8008798:	e7ea      	b.n	8008770 <__sflush_r+0xd4>
 800879a:	bf00      	nop
 800879c:	dfbffffe 	.word	0xdfbffffe

080087a0 <_fflush_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	4605      	mov	r5, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b913      	cbnz	r3, 80087b0 <_fflush_r+0x10>
 80087aa:	2500      	movs	r5, #0
 80087ac:	4628      	mov	r0, r5
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	b118      	cbz	r0, 80087ba <_fflush_r+0x1a>
 80087b2:	6a03      	ldr	r3, [r0, #32]
 80087b4:	b90b      	cbnz	r3, 80087ba <_fflush_r+0x1a>
 80087b6:	f7fd fa29 	bl	8005c0c <__sinit>
 80087ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f3      	beq.n	80087aa <_fflush_r+0xa>
 80087c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087c4:	07d0      	lsls	r0, r2, #31
 80087c6:	d404      	bmi.n	80087d2 <_fflush_r+0x32>
 80087c8:	0599      	lsls	r1, r3, #22
 80087ca:	d402      	bmi.n	80087d2 <_fflush_r+0x32>
 80087cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ce:	f7fd fb54 	bl	8005e7a <__retarget_lock_acquire_recursive>
 80087d2:	4628      	mov	r0, r5
 80087d4:	4621      	mov	r1, r4
 80087d6:	f7ff ff61 	bl	800869c <__sflush_r>
 80087da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087dc:	4605      	mov	r5, r0
 80087de:	07da      	lsls	r2, r3, #31
 80087e0:	d4e4      	bmi.n	80087ac <_fflush_r+0xc>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	059b      	lsls	r3, r3, #22
 80087e6:	d4e1      	bmi.n	80087ac <_fflush_r+0xc>
 80087e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ea:	f7fd fb47 	bl	8005e7c <__retarget_lock_release_recursive>
 80087ee:	e7dd      	b.n	80087ac <_fflush_r+0xc>

080087f0 <memmove>:
 80087f0:	4288      	cmp	r0, r1
 80087f2:	b510      	push	{r4, lr}
 80087f4:	eb01 0402 	add.w	r4, r1, r2
 80087f8:	d902      	bls.n	8008800 <memmove+0x10>
 80087fa:	4284      	cmp	r4, r0
 80087fc:	4623      	mov	r3, r4
 80087fe:	d807      	bhi.n	8008810 <memmove+0x20>
 8008800:	1e43      	subs	r3, r0, #1
 8008802:	42a1      	cmp	r1, r4
 8008804:	d008      	beq.n	8008818 <memmove+0x28>
 8008806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800880a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800880e:	e7f8      	b.n	8008802 <memmove+0x12>
 8008810:	4601      	mov	r1, r0
 8008812:	4402      	add	r2, r0
 8008814:	428a      	cmp	r2, r1
 8008816:	d100      	bne.n	800881a <memmove+0x2a>
 8008818:	bd10      	pop	{r4, pc}
 800881a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800881e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008822:	e7f7      	b.n	8008814 <memmove+0x24>

08008824 <strncmp>:
 8008824:	b510      	push	{r4, lr}
 8008826:	b16a      	cbz	r2, 8008844 <strncmp+0x20>
 8008828:	3901      	subs	r1, #1
 800882a:	1884      	adds	r4, r0, r2
 800882c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008830:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008834:	429a      	cmp	r2, r3
 8008836:	d103      	bne.n	8008840 <strncmp+0x1c>
 8008838:	42a0      	cmp	r0, r4
 800883a:	d001      	beq.n	8008840 <strncmp+0x1c>
 800883c:	2a00      	cmp	r2, #0
 800883e:	d1f5      	bne.n	800882c <strncmp+0x8>
 8008840:	1ad0      	subs	r0, r2, r3
 8008842:	bd10      	pop	{r4, pc}
 8008844:	4610      	mov	r0, r2
 8008846:	e7fc      	b.n	8008842 <strncmp+0x1e>

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	2300      	movs	r3, #0
 800884c:	4d05      	ldr	r5, [pc, #20]	; (8008864 <_sbrk_r+0x1c>)
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f9 fa28 	bl	8001ca8 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000484 	.word	0x20000484

08008868 <memcpy>:
 8008868:	440a      	add	r2, r1
 800886a:	4291      	cmp	r1, r2
 800886c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008870:	d100      	bne.n	8008874 <memcpy+0xc>
 8008872:	4770      	bx	lr
 8008874:	b510      	push	{r4, lr}
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	4291      	cmp	r1, r2
 800887c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008880:	d1f9      	bne.n	8008876 <memcpy+0xe>
 8008882:	bd10      	pop	{r4, pc}

08008884 <nan>:
 8008884:	2000      	movs	r0, #0
 8008886:	4901      	ldr	r1, [pc, #4]	; (800888c <nan+0x8>)
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	7ff80000 	.word	0x7ff80000

08008890 <__assert_func>:
 8008890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008892:	4614      	mov	r4, r2
 8008894:	461a      	mov	r2, r3
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <__assert_func+0x2c>)
 8008898:	4605      	mov	r5, r0
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68d8      	ldr	r0, [r3, #12]
 800889e:	b14c      	cbz	r4, 80088b4 <__assert_func+0x24>
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <__assert_func+0x30>)
 80088a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088a6:	9100      	str	r1, [sp, #0]
 80088a8:	462b      	mov	r3, r5
 80088aa:	4906      	ldr	r1, [pc, #24]	; (80088c4 <__assert_func+0x34>)
 80088ac:	f000 fbca 	bl	8009044 <fiprintf>
 80088b0:	f000 fbda 	bl	8009068 <abort>
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <__assert_func+0x38>)
 80088b6:	461c      	mov	r4, r3
 80088b8:	e7f3      	b.n	80088a2 <__assert_func+0x12>
 80088ba:	bf00      	nop
 80088bc:	20000074 	.word	0x20000074
 80088c0:	080099b2 	.word	0x080099b2
 80088c4:	080099bf 	.word	0x080099bf
 80088c8:	080099ed 	.word	0x080099ed

080088cc <_calloc_r>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	fba1 5402 	umull	r5, r4, r1, r2
 80088d2:	b934      	cbnz	r4, 80088e2 <_calloc_r+0x16>
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7fe f9c3 	bl	8006c60 <_malloc_r>
 80088da:	4606      	mov	r6, r0
 80088dc:	b928      	cbnz	r0, 80088ea <_calloc_r+0x1e>
 80088de:	4630      	mov	r0, r6
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	220c      	movs	r2, #12
 80088e4:	2600      	movs	r6, #0
 80088e6:	6002      	str	r2, [r0, #0]
 80088e8:	e7f9      	b.n	80088de <_calloc_r+0x12>
 80088ea:	462a      	mov	r2, r5
 80088ec:	4621      	mov	r1, r4
 80088ee:	f7fd fa47 	bl	8005d80 <memset>
 80088f2:	e7f4      	b.n	80088de <_calloc_r+0x12>

080088f4 <rshift>:
 80088f4:	6903      	ldr	r3, [r0, #16]
 80088f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088fe:	f100 0414 	add.w	r4, r0, #20
 8008902:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008906:	dd46      	ble.n	8008996 <rshift+0xa2>
 8008908:	f011 011f 	ands.w	r1, r1, #31
 800890c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008910:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008914:	d10c      	bne.n	8008930 <rshift+0x3c>
 8008916:	4629      	mov	r1, r5
 8008918:	f100 0710 	add.w	r7, r0, #16
 800891c:	42b1      	cmp	r1, r6
 800891e:	d335      	bcc.n	800898c <rshift+0x98>
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	1eea      	subs	r2, r5, #3
 8008926:	4296      	cmp	r6, r2
 8008928:	bf38      	it	cc
 800892a:	2300      	movcc	r3, #0
 800892c:	4423      	add	r3, r4
 800892e:	e015      	b.n	800895c <rshift+0x68>
 8008930:	46a1      	mov	r9, r4
 8008932:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008936:	f1c1 0820 	rsb	r8, r1, #32
 800893a:	40cf      	lsrs	r7, r1
 800893c:	f105 0e04 	add.w	lr, r5, #4
 8008940:	4576      	cmp	r6, lr
 8008942:	46f4      	mov	ip, lr
 8008944:	d816      	bhi.n	8008974 <rshift+0x80>
 8008946:	1a9a      	subs	r2, r3, r2
 8008948:	0092      	lsls	r2, r2, #2
 800894a:	3a04      	subs	r2, #4
 800894c:	3501      	adds	r5, #1
 800894e:	42ae      	cmp	r6, r5
 8008950:	bf38      	it	cc
 8008952:	2200      	movcc	r2, #0
 8008954:	18a3      	adds	r3, r4, r2
 8008956:	50a7      	str	r7, [r4, r2]
 8008958:	b107      	cbz	r7, 800895c <rshift+0x68>
 800895a:	3304      	adds	r3, #4
 800895c:	42a3      	cmp	r3, r4
 800895e:	eba3 0204 	sub.w	r2, r3, r4
 8008962:	bf08      	it	eq
 8008964:	2300      	moveq	r3, #0
 8008966:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800896a:	6102      	str	r2, [r0, #16]
 800896c:	bf08      	it	eq
 800896e:	6143      	streq	r3, [r0, #20]
 8008970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008974:	f8dc c000 	ldr.w	ip, [ip]
 8008978:	fa0c fc08 	lsl.w	ip, ip, r8
 800897c:	ea4c 0707 	orr.w	r7, ip, r7
 8008980:	f849 7b04 	str.w	r7, [r9], #4
 8008984:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008988:	40cf      	lsrs	r7, r1
 800898a:	e7d9      	b.n	8008940 <rshift+0x4c>
 800898c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008990:	f847 cf04 	str.w	ip, [r7, #4]!
 8008994:	e7c2      	b.n	800891c <rshift+0x28>
 8008996:	4623      	mov	r3, r4
 8008998:	e7e0      	b.n	800895c <rshift+0x68>

0800899a <__hexdig_fun>:
 800899a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800899e:	2b09      	cmp	r3, #9
 80089a0:	d802      	bhi.n	80089a8 <__hexdig_fun+0xe>
 80089a2:	3820      	subs	r0, #32
 80089a4:	b2c0      	uxtb	r0, r0
 80089a6:	4770      	bx	lr
 80089a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d801      	bhi.n	80089b4 <__hexdig_fun+0x1a>
 80089b0:	3847      	subs	r0, #71	; 0x47
 80089b2:	e7f7      	b.n	80089a4 <__hexdig_fun+0xa>
 80089b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d801      	bhi.n	80089c0 <__hexdig_fun+0x26>
 80089bc:	3827      	subs	r0, #39	; 0x27
 80089be:	e7f1      	b.n	80089a4 <__hexdig_fun+0xa>
 80089c0:	2000      	movs	r0, #0
 80089c2:	4770      	bx	lr

080089c4 <__gethex>:
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	4681      	mov	r9, r0
 80089ca:	468a      	mov	sl, r1
 80089cc:	4617      	mov	r7, r2
 80089ce:	680a      	ldr	r2, [r1, #0]
 80089d0:	b085      	sub	sp, #20
 80089d2:	f102 0b02 	add.w	fp, r2, #2
 80089d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	32fe      	adds	r2, #254	; 0xfe
 80089e2:	eb02 030b 	add.w	r3, r2, fp
 80089e6:	46d8      	mov	r8, fp
 80089e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80089ec:	9301      	str	r3, [sp, #4]
 80089ee:	2830      	cmp	r0, #48	; 0x30
 80089f0:	d0f7      	beq.n	80089e2 <__gethex+0x1e>
 80089f2:	f7ff ffd2 	bl	800899a <__hexdig_fun>
 80089f6:	4604      	mov	r4, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d138      	bne.n	8008a6e <__gethex+0xaa>
 80089fc:	2201      	movs	r2, #1
 80089fe:	4640      	mov	r0, r8
 8008a00:	49a7      	ldr	r1, [pc, #668]	; (8008ca0 <__gethex+0x2dc>)
 8008a02:	f7ff ff0f 	bl	8008824 <strncmp>
 8008a06:	4606      	mov	r6, r0
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d169      	bne.n	8008ae0 <__gethex+0x11c>
 8008a0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008a10:	465d      	mov	r5, fp
 8008a12:	f7ff ffc2 	bl	800899a <__hexdig_fun>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d064      	beq.n	8008ae4 <__gethex+0x120>
 8008a1a:	465a      	mov	r2, fp
 8008a1c:	7810      	ldrb	r0, [r2, #0]
 8008a1e:	4690      	mov	r8, r2
 8008a20:	2830      	cmp	r0, #48	; 0x30
 8008a22:	f102 0201 	add.w	r2, r2, #1
 8008a26:	d0f9      	beq.n	8008a1c <__gethex+0x58>
 8008a28:	f7ff ffb7 	bl	800899a <__hexdig_fun>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	fab0 f480 	clz	r4, r0
 8008a32:	465e      	mov	r6, fp
 8008a34:	0964      	lsrs	r4, r4, #5
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4615      	mov	r5, r2
 8008a3c:	7828      	ldrb	r0, [r5, #0]
 8008a3e:	3201      	adds	r2, #1
 8008a40:	f7ff ffab 	bl	800899a <__hexdig_fun>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d1f8      	bne.n	8008a3a <__gethex+0x76>
 8008a48:	2201      	movs	r2, #1
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	4994      	ldr	r1, [pc, #592]	; (8008ca0 <__gethex+0x2dc>)
 8008a4e:	f7ff fee9 	bl	8008824 <strncmp>
 8008a52:	b978      	cbnz	r0, 8008a74 <__gethex+0xb0>
 8008a54:	b946      	cbnz	r6, 8008a68 <__gethex+0xa4>
 8008a56:	1c6e      	adds	r6, r5, #1
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	7828      	ldrb	r0, [r5, #0]
 8008a5e:	3201      	adds	r2, #1
 8008a60:	f7ff ff9b 	bl	800899a <__hexdig_fun>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d1f8      	bne.n	8008a5a <__gethex+0x96>
 8008a68:	1b73      	subs	r3, r6, r5
 8008a6a:	009e      	lsls	r6, r3, #2
 8008a6c:	e004      	b.n	8008a78 <__gethex+0xb4>
 8008a6e:	2400      	movs	r4, #0
 8008a70:	4626      	mov	r6, r4
 8008a72:	e7e1      	b.n	8008a38 <__gethex+0x74>
 8008a74:	2e00      	cmp	r6, #0
 8008a76:	d1f7      	bne.n	8008a68 <__gethex+0xa4>
 8008a78:	782b      	ldrb	r3, [r5, #0]
 8008a7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a7e:	2b50      	cmp	r3, #80	; 0x50
 8008a80:	d13d      	bne.n	8008afe <__gethex+0x13a>
 8008a82:	786b      	ldrb	r3, [r5, #1]
 8008a84:	2b2b      	cmp	r3, #43	; 0x2b
 8008a86:	d02f      	beq.n	8008ae8 <__gethex+0x124>
 8008a88:	2b2d      	cmp	r3, #45	; 0x2d
 8008a8a:	d031      	beq.n	8008af0 <__gethex+0x12c>
 8008a8c:	f04f 0b00 	mov.w	fp, #0
 8008a90:	1c69      	adds	r1, r5, #1
 8008a92:	7808      	ldrb	r0, [r1, #0]
 8008a94:	f7ff ff81 	bl	800899a <__hexdig_fun>
 8008a98:	1e42      	subs	r2, r0, #1
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	2a18      	cmp	r2, #24
 8008a9e:	d82e      	bhi.n	8008afe <__gethex+0x13a>
 8008aa0:	f1a0 0210 	sub.w	r2, r0, #16
 8008aa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008aa8:	f7ff ff77 	bl	800899a <__hexdig_fun>
 8008aac:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ab0:	fa5f fc8c 	uxtb.w	ip, ip
 8008ab4:	f1bc 0f18 	cmp.w	ip, #24
 8008ab8:	d91d      	bls.n	8008af6 <__gethex+0x132>
 8008aba:	f1bb 0f00 	cmp.w	fp, #0
 8008abe:	d000      	beq.n	8008ac2 <__gethex+0xfe>
 8008ac0:	4252      	negs	r2, r2
 8008ac2:	4416      	add	r6, r2
 8008ac4:	f8ca 1000 	str.w	r1, [sl]
 8008ac8:	b1dc      	cbz	r4, 8008b02 <__gethex+0x13e>
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bf14      	ite	ne
 8008ad0:	f04f 0800 	movne.w	r8, #0
 8008ad4:	f04f 0806 	moveq.w	r8, #6
 8008ad8:	4640      	mov	r0, r8
 8008ada:	b005      	add	sp, #20
 8008adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae0:	4645      	mov	r5, r8
 8008ae2:	4626      	mov	r6, r4
 8008ae4:	2401      	movs	r4, #1
 8008ae6:	e7c7      	b.n	8008a78 <__gethex+0xb4>
 8008ae8:	f04f 0b00 	mov.w	fp, #0
 8008aec:	1ca9      	adds	r1, r5, #2
 8008aee:	e7d0      	b.n	8008a92 <__gethex+0xce>
 8008af0:	f04f 0b01 	mov.w	fp, #1
 8008af4:	e7fa      	b.n	8008aec <__gethex+0x128>
 8008af6:	230a      	movs	r3, #10
 8008af8:	fb03 0002 	mla	r0, r3, r2, r0
 8008afc:	e7d0      	b.n	8008aa0 <__gethex+0xdc>
 8008afe:	4629      	mov	r1, r5
 8008b00:	e7e0      	b.n	8008ac4 <__gethex+0x100>
 8008b02:	4621      	mov	r1, r4
 8008b04:	eba5 0308 	sub.w	r3, r5, r8
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	2b07      	cmp	r3, #7
 8008b0c:	dc0a      	bgt.n	8008b24 <__gethex+0x160>
 8008b0e:	4648      	mov	r0, r9
 8008b10:	f7fe f932 	bl	8006d78 <_Balloc>
 8008b14:	4604      	mov	r4, r0
 8008b16:	b940      	cbnz	r0, 8008b2a <__gethex+0x166>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	21e4      	movs	r1, #228	; 0xe4
 8008b1c:	4b61      	ldr	r3, [pc, #388]	; (8008ca4 <__gethex+0x2e0>)
 8008b1e:	4862      	ldr	r0, [pc, #392]	; (8008ca8 <__gethex+0x2e4>)
 8008b20:	f7ff feb6 	bl	8008890 <__assert_func>
 8008b24:	3101      	adds	r1, #1
 8008b26:	105b      	asrs	r3, r3, #1
 8008b28:	e7ef      	b.n	8008b0a <__gethex+0x146>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	469b      	mov	fp, r3
 8008b2e:	f100 0a14 	add.w	sl, r0, #20
 8008b32:	f8cd a004 	str.w	sl, [sp, #4]
 8008b36:	45a8      	cmp	r8, r5
 8008b38:	d344      	bcc.n	8008bc4 <__gethex+0x200>
 8008b3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b3e:	4658      	mov	r0, fp
 8008b40:	f848 bb04 	str.w	fp, [r8], #4
 8008b44:	eba8 080a 	sub.w	r8, r8, sl
 8008b48:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008b4c:	6122      	str	r2, [r4, #16]
 8008b4e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008b52:	f7fe fa03 	bl	8006f5c <__hi0bits>
 8008b56:	683d      	ldr	r5, [r7, #0]
 8008b58:	eba8 0800 	sub.w	r8, r8, r0
 8008b5c:	45a8      	cmp	r8, r5
 8008b5e:	dd59      	ble.n	8008c14 <__gethex+0x250>
 8008b60:	eba8 0805 	sub.w	r8, r8, r5
 8008b64:	4641      	mov	r1, r8
 8008b66:	4620      	mov	r0, r4
 8008b68:	f7fe fd81 	bl	800766e <__any_on>
 8008b6c:	4683      	mov	fp, r0
 8008b6e:	b1b8      	cbz	r0, 8008ba0 <__gethex+0x1dc>
 8008b70:	f04f 0b01 	mov.w	fp, #1
 8008b74:	f108 33ff 	add.w	r3, r8, #4294967295
 8008b78:	1159      	asrs	r1, r3, #5
 8008b7a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b7e:	f003 021f 	and.w	r2, r3, #31
 8008b82:	fa0b f202 	lsl.w	r2, fp, r2
 8008b86:	420a      	tst	r2, r1
 8008b88:	d00a      	beq.n	8008ba0 <__gethex+0x1dc>
 8008b8a:	455b      	cmp	r3, fp
 8008b8c:	dd06      	ble.n	8008b9c <__gethex+0x1d8>
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f1a8 0102 	sub.w	r1, r8, #2
 8008b94:	f7fe fd6b 	bl	800766e <__any_on>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d138      	bne.n	8008c0e <__gethex+0x24a>
 8008b9c:	f04f 0b02 	mov.w	fp, #2
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f7ff fea6 	bl	80088f4 <rshift>
 8008ba8:	4446      	add	r6, r8
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	42b3      	cmp	r3, r6
 8008bae:	da41      	bge.n	8008c34 <__gethex+0x270>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	f7fe f920 	bl	8006df8 <_Bfree>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	e789      	b.n	8008ad8 <__gethex+0x114>
 8008bc4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008bc8:	2a2e      	cmp	r2, #46	; 0x2e
 8008bca:	d014      	beq.n	8008bf6 <__gethex+0x232>
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d106      	bne.n	8008bde <__gethex+0x21a>
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	f843 bb04 	str.w	fp, [r3], #4
 8008bd6:	f04f 0b00 	mov.w	fp, #0
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	465b      	mov	r3, fp
 8008bde:	7828      	ldrb	r0, [r5, #0]
 8008be0:	9303      	str	r3, [sp, #12]
 8008be2:	f7ff feda 	bl	800899a <__hexdig_fun>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	f000 000f 	and.w	r0, r0, #15
 8008bec:	4098      	lsls	r0, r3
 8008bee:	ea4b 0b00 	orr.w	fp, fp, r0
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	e79f      	b.n	8008b36 <__gethex+0x172>
 8008bf6:	45a8      	cmp	r8, r5
 8008bf8:	d8e8      	bhi.n	8008bcc <__gethex+0x208>
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	4928      	ldr	r1, [pc, #160]	; (8008ca0 <__gethex+0x2dc>)
 8008c00:	9303      	str	r3, [sp, #12]
 8008c02:	f7ff fe0f 	bl	8008824 <strncmp>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d1df      	bne.n	8008bcc <__gethex+0x208>
 8008c0c:	e793      	b.n	8008b36 <__gethex+0x172>
 8008c0e:	f04f 0b03 	mov.w	fp, #3
 8008c12:	e7c5      	b.n	8008ba0 <__gethex+0x1dc>
 8008c14:	da0b      	bge.n	8008c2e <__gethex+0x26a>
 8008c16:	eba5 0808 	sub.w	r8, r5, r8
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	4648      	mov	r0, r9
 8008c20:	f7fe fb02 	bl	8007228 <__lshift>
 8008c24:	4604      	mov	r4, r0
 8008c26:	eba6 0608 	sub.w	r6, r6, r8
 8008c2a:	f100 0a14 	add.w	sl, r0, #20
 8008c2e:	f04f 0b00 	mov.w	fp, #0
 8008c32:	e7ba      	b.n	8008baa <__gethex+0x1e6>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	42b3      	cmp	r3, r6
 8008c38:	dd74      	ble.n	8008d24 <__gethex+0x360>
 8008c3a:	1b9e      	subs	r6, r3, r6
 8008c3c:	42b5      	cmp	r5, r6
 8008c3e:	dc35      	bgt.n	8008cac <__gethex+0x2e8>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d023      	beq.n	8008c8e <__gethex+0x2ca>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d025      	beq.n	8008c96 <__gethex+0x2d2>
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d115      	bne.n	8008c7a <__gethex+0x2b6>
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	d113      	bne.n	8008c7a <__gethex+0x2b6>
 8008c52:	2d01      	cmp	r5, #1
 8008c54:	d10b      	bne.n	8008c6e <__gethex+0x2aa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	9a02      	ldr	r2, [sp, #8]
 8008c5a:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	2301      	movs	r3, #1
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	f8ca 3000 	str.w	r3, [sl]
 8008c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c6a:	601c      	str	r4, [r3, #0]
 8008c6c:	e734      	b.n	8008ad8 <__gethex+0x114>
 8008c6e:	4620      	mov	r0, r4
 8008c70:	1e69      	subs	r1, r5, #1
 8008c72:	f7fe fcfc 	bl	800766e <__any_on>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1ed      	bne.n	8008c56 <__gethex+0x292>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4648      	mov	r0, r9
 8008c7e:	f7fe f8bb 	bl	8006df8 <_Bfree>
 8008c82:	2300      	movs	r3, #0
 8008c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c86:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	e724      	b.n	8008ad8 <__gethex+0x114>
 8008c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f2      	bne.n	8008c7a <__gethex+0x2b6>
 8008c94:	e7df      	b.n	8008c56 <__gethex+0x292>
 8008c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1dc      	bne.n	8008c56 <__gethex+0x292>
 8008c9c:	e7ed      	b.n	8008c7a <__gethex+0x2b6>
 8008c9e:	bf00      	nop
 8008ca0:	08009844 	.word	0x08009844
 8008ca4:	080096db 	.word	0x080096db
 8008ca8:	080099ee 	.word	0x080099ee
 8008cac:	f106 38ff 	add.w	r8, r6, #4294967295
 8008cb0:	f1bb 0f00 	cmp.w	fp, #0
 8008cb4:	d133      	bne.n	8008d1e <__gethex+0x35a>
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	d004      	beq.n	8008cc6 <__gethex+0x302>
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7fe fcd5 	bl	800766e <__any_on>
 8008cc4:	4683      	mov	fp, r0
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008ccc:	f008 081f 	and.w	r8, r8, #31
 8008cd0:	fa03 f308 	lsl.w	r3, r3, r8
 8008cd4:	f04f 0802 	mov.w	r8, #2
 8008cd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4213      	tst	r3, r2
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bf18      	it	ne
 8008ce4:	f04b 0b02 	orrne.w	fp, fp, #2
 8008ce8:	1bad      	subs	r5, r5, r6
 8008cea:	f7ff fe03 	bl	80088f4 <rshift>
 8008cee:	687e      	ldr	r6, [r7, #4]
 8008cf0:	f1bb 0f00 	cmp.w	fp, #0
 8008cf4:	d04a      	beq.n	8008d8c <__gethex+0x3c8>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d016      	beq.n	8008d2a <__gethex+0x366>
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	d018      	beq.n	8008d32 <__gethex+0x36e>
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d109      	bne.n	8008d18 <__gethex+0x354>
 8008d04:	f01b 0f02 	tst.w	fp, #2
 8008d08:	d006      	beq.n	8008d18 <__gethex+0x354>
 8008d0a:	f8da 3000 	ldr.w	r3, [sl]
 8008d0e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008d12:	f01b 0f01 	tst.w	fp, #1
 8008d16:	d10f      	bne.n	8008d38 <__gethex+0x374>
 8008d18:	f048 0810 	orr.w	r8, r8, #16
 8008d1c:	e036      	b.n	8008d8c <__gethex+0x3c8>
 8008d1e:	f04f 0b01 	mov.w	fp, #1
 8008d22:	e7d0      	b.n	8008cc6 <__gethex+0x302>
 8008d24:	f04f 0801 	mov.w	r8, #1
 8008d28:	e7e2      	b.n	8008cf0 <__gethex+0x32c>
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d2c:	f1c3 0301 	rsb	r3, r3, #1
 8008d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0ef      	beq.n	8008d18 <__gethex+0x354>
 8008d38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d3c:	f104 0214 	add.w	r2, r4, #20
 8008d40:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	2300      	movs	r3, #0
 8008d48:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008d4c:	4694      	mov	ip, r2
 8008d4e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008d52:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008d56:	d01e      	beq.n	8008d96 <__gethex+0x3d2>
 8008d58:	3101      	adds	r1, #1
 8008d5a:	f8cc 1000 	str.w	r1, [ip]
 8008d5e:	f1b8 0f02 	cmp.w	r8, #2
 8008d62:	f104 0214 	add.w	r2, r4, #20
 8008d66:	d13d      	bne.n	8008de4 <__gethex+0x420>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	42ab      	cmp	r3, r5
 8008d6e:	d10b      	bne.n	8008d88 <__gethex+0x3c4>
 8008d70:	2301      	movs	r3, #1
 8008d72:	1169      	asrs	r1, r5, #5
 8008d74:	f005 051f 	and.w	r5, r5, #31
 8008d78:	fa03 f505 	lsl.w	r5, r3, r5
 8008d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d80:	421d      	tst	r5, r3
 8008d82:	bf18      	it	ne
 8008d84:	f04f 0801 	movne.w	r8, #1
 8008d88:	f048 0820 	orr.w	r8, r8, #32
 8008d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d8e:	601c      	str	r4, [r3, #0]
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	601e      	str	r6, [r3, #0]
 8008d94:	e6a0      	b.n	8008ad8 <__gethex+0x114>
 8008d96:	4290      	cmp	r0, r2
 8008d98:	f842 3c04 	str.w	r3, [r2, #-4]
 8008d9c:	d8d6      	bhi.n	8008d4c <__gethex+0x388>
 8008d9e:	68a2      	ldr	r2, [r4, #8]
 8008da0:	4593      	cmp	fp, r2
 8008da2:	db17      	blt.n	8008dd4 <__gethex+0x410>
 8008da4:	6861      	ldr	r1, [r4, #4]
 8008da6:	4648      	mov	r0, r9
 8008da8:	3101      	adds	r1, #1
 8008daa:	f7fd ffe5 	bl	8006d78 <_Balloc>
 8008dae:	4682      	mov	sl, r0
 8008db0:	b918      	cbnz	r0, 8008dba <__gethex+0x3f6>
 8008db2:	4602      	mov	r2, r0
 8008db4:	2184      	movs	r1, #132	; 0x84
 8008db6:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <__gethex+0x45c>)
 8008db8:	e6b1      	b.n	8008b1e <__gethex+0x15a>
 8008dba:	6922      	ldr	r2, [r4, #16]
 8008dbc:	f104 010c 	add.w	r1, r4, #12
 8008dc0:	3202      	adds	r2, #2
 8008dc2:	0092      	lsls	r2, r2, #2
 8008dc4:	300c      	adds	r0, #12
 8008dc6:	f7ff fd4f 	bl	8008868 <memcpy>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f7fe f813 	bl	8006df8 <_Bfree>
 8008dd2:	4654      	mov	r4, sl
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	1c51      	adds	r1, r2, #1
 8008dd8:	6121      	str	r1, [r4, #16]
 8008dda:	2101      	movs	r1, #1
 8008ddc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008de0:	6151      	str	r1, [r2, #20]
 8008de2:	e7bc      	b.n	8008d5e <__gethex+0x39a>
 8008de4:	6921      	ldr	r1, [r4, #16]
 8008de6:	4559      	cmp	r1, fp
 8008de8:	dd0b      	ble.n	8008e02 <__gethex+0x43e>
 8008dea:	2101      	movs	r1, #1
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7ff fd81 	bl	80088f4 <rshift>
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	3601      	adds	r6, #1
 8008df6:	42b3      	cmp	r3, r6
 8008df8:	f6ff aeda 	blt.w	8008bb0 <__gethex+0x1ec>
 8008dfc:	f04f 0801 	mov.w	r8, #1
 8008e00:	e7c2      	b.n	8008d88 <__gethex+0x3c4>
 8008e02:	f015 051f 	ands.w	r5, r5, #31
 8008e06:	d0f9      	beq.n	8008dfc <__gethex+0x438>
 8008e08:	9b01      	ldr	r3, [sp, #4]
 8008e0a:	f1c5 0520 	rsb	r5, r5, #32
 8008e0e:	441a      	add	r2, r3
 8008e10:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008e14:	f7fe f8a2 	bl	8006f5c <__hi0bits>
 8008e18:	42a8      	cmp	r0, r5
 8008e1a:	dbe6      	blt.n	8008dea <__gethex+0x426>
 8008e1c:	e7ee      	b.n	8008dfc <__gethex+0x438>
 8008e1e:	bf00      	nop
 8008e20:	080096db 	.word	0x080096db

08008e24 <L_shift>:
 8008e24:	f1c2 0208 	rsb	r2, r2, #8
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	f1c2 0620 	rsb	r6, r2, #32
 8008e30:	6843      	ldr	r3, [r0, #4]
 8008e32:	6804      	ldr	r4, [r0, #0]
 8008e34:	fa03 f506 	lsl.w	r5, r3, r6
 8008e38:	432c      	orrs	r4, r5
 8008e3a:	40d3      	lsrs	r3, r2
 8008e3c:	6004      	str	r4, [r0, #0]
 8008e3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e42:	4288      	cmp	r0, r1
 8008e44:	d3f4      	bcc.n	8008e30 <L_shift+0xc>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}

08008e48 <__match>:
 8008e48:	b530      	push	{r4, r5, lr}
 8008e4a:	6803      	ldr	r3, [r0, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	b914      	cbnz	r4, 8008e5a <__match+0x12>
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	2001      	movs	r0, #1
 8008e58:	bd30      	pop	{r4, r5, pc}
 8008e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e62:	2d19      	cmp	r5, #25
 8008e64:	bf98      	it	ls
 8008e66:	3220      	addls	r2, #32
 8008e68:	42a2      	cmp	r2, r4
 8008e6a:	d0f0      	beq.n	8008e4e <__match+0x6>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e7f3      	b.n	8008e58 <__match+0x10>

08008e70 <__hexnan>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	2500      	movs	r5, #0
 8008e76:	680b      	ldr	r3, [r1, #0]
 8008e78:	4682      	mov	sl, r0
 8008e7a:	115e      	asrs	r6, r3, #5
 8008e7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e80:	f013 031f 	ands.w	r3, r3, #31
 8008e84:	bf18      	it	ne
 8008e86:	3604      	addne	r6, #4
 8008e88:	1f37      	subs	r7, r6, #4
 8008e8a:	4690      	mov	r8, r2
 8008e8c:	46b9      	mov	r9, r7
 8008e8e:	463c      	mov	r4, r7
 8008e90:	46ab      	mov	fp, r5
 8008e92:	b087      	sub	sp, #28
 8008e94:	6801      	ldr	r1, [r0, #0]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e9c:	9502      	str	r5, [sp, #8]
 8008e9e:	784a      	ldrb	r2, [r1, #1]
 8008ea0:	1c4b      	adds	r3, r1, #1
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	b342      	cbz	r2, 8008ef8 <__hexnan+0x88>
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	9204      	str	r2, [sp, #16]
 8008eac:	f7ff fd75 	bl	800899a <__hexdig_fun>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d14f      	bne.n	8008f54 <__hexnan+0xe4>
 8008eb4:	9a04      	ldr	r2, [sp, #16]
 8008eb6:	9905      	ldr	r1, [sp, #20]
 8008eb8:	2a20      	cmp	r2, #32
 8008eba:	d818      	bhi.n	8008eee <__hexnan+0x7e>
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	459b      	cmp	fp, r3
 8008ec0:	dd13      	ble.n	8008eea <__hexnan+0x7a>
 8008ec2:	454c      	cmp	r4, r9
 8008ec4:	d206      	bcs.n	8008ed4 <__hexnan+0x64>
 8008ec6:	2d07      	cmp	r5, #7
 8008ec8:	dc04      	bgt.n	8008ed4 <__hexnan+0x64>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff ffa8 	bl	8008e24 <L_shift>
 8008ed4:	4544      	cmp	r4, r8
 8008ed6:	d950      	bls.n	8008f7a <__hexnan+0x10a>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f1a4 0904 	sub.w	r9, r4, #4
 8008ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	464c      	mov	r4, r9
 8008ee6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eea:	9903      	ldr	r1, [sp, #12]
 8008eec:	e7d7      	b.n	8008e9e <__hexnan+0x2e>
 8008eee:	2a29      	cmp	r2, #41	; 0x29
 8008ef0:	d155      	bne.n	8008f9e <__hexnan+0x12e>
 8008ef2:	3102      	adds	r1, #2
 8008ef4:	f8ca 1000 	str.w	r1, [sl]
 8008ef8:	f1bb 0f00 	cmp.w	fp, #0
 8008efc:	d04f      	beq.n	8008f9e <__hexnan+0x12e>
 8008efe:	454c      	cmp	r4, r9
 8008f00:	d206      	bcs.n	8008f10 <__hexnan+0xa0>
 8008f02:	2d07      	cmp	r5, #7
 8008f04:	dc04      	bgt.n	8008f10 <__hexnan+0xa0>
 8008f06:	462a      	mov	r2, r5
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff ff8a 	bl	8008e24 <L_shift>
 8008f10:	4544      	cmp	r4, r8
 8008f12:	d934      	bls.n	8008f7e <__hexnan+0x10e>
 8008f14:	4623      	mov	r3, r4
 8008f16:	f1a8 0204 	sub.w	r2, r8, #4
 8008f1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f1e:	429f      	cmp	r7, r3
 8008f20:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f24:	d2f9      	bcs.n	8008f1a <__hexnan+0xaa>
 8008f26:	1b3b      	subs	r3, r7, r4
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	3e03      	subs	r6, #3
 8008f30:	3401      	adds	r4, #1
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	bf38      	it	cc
 8008f36:	2304      	movcc	r3, #4
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4443      	add	r3, r8
 8008f3c:	f843 2b04 	str.w	r2, [r3], #4
 8008f40:	429f      	cmp	r7, r3
 8008f42:	d2fb      	bcs.n	8008f3c <__hexnan+0xcc>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	b91b      	cbnz	r3, 8008f50 <__hexnan+0xe0>
 8008f48:	4547      	cmp	r7, r8
 8008f4a:	d126      	bne.n	8008f9a <__hexnan+0x12a>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	2005      	movs	r0, #5
 8008f52:	e025      	b.n	8008fa0 <__hexnan+0x130>
 8008f54:	3501      	adds	r5, #1
 8008f56:	2d08      	cmp	r5, #8
 8008f58:	f10b 0b01 	add.w	fp, fp, #1
 8008f5c:	dd06      	ble.n	8008f6c <__hexnan+0xfc>
 8008f5e:	4544      	cmp	r4, r8
 8008f60:	d9c3      	bls.n	8008eea <__hexnan+0x7a>
 8008f62:	2300      	movs	r3, #0
 8008f64:	2501      	movs	r5, #1
 8008f66:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f6a:	3c04      	subs	r4, #4
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	f000 000f 	and.w	r0, r0, #15
 8008f72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f76:	6020      	str	r0, [r4, #0]
 8008f78:	e7b7      	b.n	8008eea <__hexnan+0x7a>
 8008f7a:	2508      	movs	r5, #8
 8008f7c:	e7b5      	b.n	8008eea <__hexnan+0x7a>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0df      	beq.n	8008f44 <__hexnan+0xd4>
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	f1c3 0320 	rsb	r3, r3, #32
 8008f8c:	40da      	lsrs	r2, r3
 8008f8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f92:	4013      	ands	r3, r2
 8008f94:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f98:	e7d4      	b.n	8008f44 <__hexnan+0xd4>
 8008f9a:	3f04      	subs	r7, #4
 8008f9c:	e7d2      	b.n	8008f44 <__hexnan+0xd4>
 8008f9e:	2004      	movs	r0, #4
 8008fa0:	b007      	add	sp, #28
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa6 <__ascii_mbtowc>:
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	b901      	cbnz	r1, 8008fac <__ascii_mbtowc+0x6>
 8008faa:	a901      	add	r1, sp, #4
 8008fac:	b142      	cbz	r2, 8008fc0 <__ascii_mbtowc+0x1a>
 8008fae:	b14b      	cbz	r3, 8008fc4 <__ascii_mbtowc+0x1e>
 8008fb0:	7813      	ldrb	r3, [r2, #0]
 8008fb2:	600b      	str	r3, [r1, #0]
 8008fb4:	7812      	ldrb	r2, [r2, #0]
 8008fb6:	1e10      	subs	r0, r2, #0
 8008fb8:	bf18      	it	ne
 8008fba:	2001      	movne	r0, #1
 8008fbc:	b002      	add	sp, #8
 8008fbe:	4770      	bx	lr
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	e7fb      	b.n	8008fbc <__ascii_mbtowc+0x16>
 8008fc4:	f06f 0001 	mvn.w	r0, #1
 8008fc8:	e7f8      	b.n	8008fbc <__ascii_mbtowc+0x16>

08008fca <_realloc_r>:
 8008fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fce:	4680      	mov	r8, r0
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	460e      	mov	r6, r1
 8008fd4:	b921      	cbnz	r1, 8008fe0 <_realloc_r+0x16>
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	f7fd be40 	b.w	8006c60 <_malloc_r>
 8008fe0:	b92a      	cbnz	r2, 8008fee <_realloc_r+0x24>
 8008fe2:	f7fd fdcd 	bl	8006b80 <_free_r>
 8008fe6:	4625      	mov	r5, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fee:	f000 f842 	bl	8009076 <_malloc_usable_size_r>
 8008ff2:	4284      	cmp	r4, r0
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	d802      	bhi.n	8008ffe <_realloc_r+0x34>
 8008ff8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ffc:	d812      	bhi.n	8009024 <_realloc_r+0x5a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4640      	mov	r0, r8
 8009002:	f7fd fe2d 	bl	8006c60 <_malloc_r>
 8009006:	4605      	mov	r5, r0
 8009008:	2800      	cmp	r0, #0
 800900a:	d0ed      	beq.n	8008fe8 <_realloc_r+0x1e>
 800900c:	42bc      	cmp	r4, r7
 800900e:	4622      	mov	r2, r4
 8009010:	4631      	mov	r1, r6
 8009012:	bf28      	it	cs
 8009014:	463a      	movcs	r2, r7
 8009016:	f7ff fc27 	bl	8008868 <memcpy>
 800901a:	4631      	mov	r1, r6
 800901c:	4640      	mov	r0, r8
 800901e:	f7fd fdaf 	bl	8006b80 <_free_r>
 8009022:	e7e1      	b.n	8008fe8 <_realloc_r+0x1e>
 8009024:	4635      	mov	r5, r6
 8009026:	e7df      	b.n	8008fe8 <_realloc_r+0x1e>

08009028 <__ascii_wctomb>:
 8009028:	4603      	mov	r3, r0
 800902a:	4608      	mov	r0, r1
 800902c:	b141      	cbz	r1, 8009040 <__ascii_wctomb+0x18>
 800902e:	2aff      	cmp	r2, #255	; 0xff
 8009030:	d904      	bls.n	800903c <__ascii_wctomb+0x14>
 8009032:	228a      	movs	r2, #138	; 0x8a
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	4770      	bx	lr
 800903c:	2001      	movs	r0, #1
 800903e:	700a      	strb	r2, [r1, #0]
 8009040:	4770      	bx	lr
	...

08009044 <fiprintf>:
 8009044:	b40e      	push	{r1, r2, r3}
 8009046:	b503      	push	{r0, r1, lr}
 8009048:	4601      	mov	r1, r0
 800904a:	ab03      	add	r3, sp, #12
 800904c:	4805      	ldr	r0, [pc, #20]	; (8009064 <fiprintf+0x20>)
 800904e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009052:	6800      	ldr	r0, [r0, #0]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	f000 f83d 	bl	80090d4 <_vfiprintf_r>
 800905a:	b002      	add	sp, #8
 800905c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009060:	b003      	add	sp, #12
 8009062:	4770      	bx	lr
 8009064:	20000074 	.word	0x20000074

08009068 <abort>:
 8009068:	2006      	movs	r0, #6
 800906a:	b508      	push	{r3, lr}
 800906c:	f000 fa0a 	bl	8009484 <raise>
 8009070:	2001      	movs	r0, #1
 8009072:	f7f8 fda6 	bl	8001bc2 <_exit>

08009076 <_malloc_usable_size_r>:
 8009076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800907a:	1f18      	subs	r0, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	bfbc      	itt	lt
 8009080:	580b      	ldrlt	r3, [r1, r0]
 8009082:	18c0      	addlt	r0, r0, r3
 8009084:	4770      	bx	lr

08009086 <__sfputc_r>:
 8009086:	6893      	ldr	r3, [r2, #8]
 8009088:	b410      	push	{r4}
 800908a:	3b01      	subs	r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	6093      	str	r3, [r2, #8]
 8009090:	da07      	bge.n	80090a2 <__sfputc_r+0x1c>
 8009092:	6994      	ldr	r4, [r2, #24]
 8009094:	42a3      	cmp	r3, r4
 8009096:	db01      	blt.n	800909c <__sfputc_r+0x16>
 8009098:	290a      	cmp	r1, #10
 800909a:	d102      	bne.n	80090a2 <__sfputc_r+0x1c>
 800909c:	bc10      	pop	{r4}
 800909e:	f000 b933 	b.w	8009308 <__swbuf_r>
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	1c58      	adds	r0, r3, #1
 80090a6:	6010      	str	r0, [r2, #0]
 80090a8:	7019      	strb	r1, [r3, #0]
 80090aa:	4608      	mov	r0, r1
 80090ac:	bc10      	pop	{r4}
 80090ae:	4770      	bx	lr

080090b0 <__sfputs_r>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	4606      	mov	r6, r0
 80090b4:	460f      	mov	r7, r1
 80090b6:	4614      	mov	r4, r2
 80090b8:	18d5      	adds	r5, r2, r3
 80090ba:	42ac      	cmp	r4, r5
 80090bc:	d101      	bne.n	80090c2 <__sfputs_r+0x12>
 80090be:	2000      	movs	r0, #0
 80090c0:	e007      	b.n	80090d2 <__sfputs_r+0x22>
 80090c2:	463a      	mov	r2, r7
 80090c4:	4630      	mov	r0, r6
 80090c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ca:	f7ff ffdc 	bl	8009086 <__sfputc_r>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	d1f3      	bne.n	80090ba <__sfputs_r+0xa>
 80090d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090d4 <_vfiprintf_r>:
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	460d      	mov	r5, r1
 80090da:	4614      	mov	r4, r2
 80090dc:	4698      	mov	r8, r3
 80090de:	4606      	mov	r6, r0
 80090e0:	b09d      	sub	sp, #116	; 0x74
 80090e2:	b118      	cbz	r0, 80090ec <_vfiprintf_r+0x18>
 80090e4:	6a03      	ldr	r3, [r0, #32]
 80090e6:	b90b      	cbnz	r3, 80090ec <_vfiprintf_r+0x18>
 80090e8:	f7fc fd90 	bl	8005c0c <__sinit>
 80090ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ee:	07d9      	lsls	r1, r3, #31
 80090f0:	d405      	bmi.n	80090fe <_vfiprintf_r+0x2a>
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	059a      	lsls	r2, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_vfiprintf_r+0x2a>
 80090f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090fa:	f7fc febe 	bl	8005e7a <__retarget_lock_acquire_recursive>
 80090fe:	89ab      	ldrh	r3, [r5, #12]
 8009100:	071b      	lsls	r3, r3, #28
 8009102:	d501      	bpl.n	8009108 <_vfiprintf_r+0x34>
 8009104:	692b      	ldr	r3, [r5, #16]
 8009106:	b99b      	cbnz	r3, 8009130 <_vfiprintf_r+0x5c>
 8009108:	4629      	mov	r1, r5
 800910a:	4630      	mov	r0, r6
 800910c:	f000 f93a 	bl	8009384 <__swsetup_r>
 8009110:	b170      	cbz	r0, 8009130 <_vfiprintf_r+0x5c>
 8009112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009114:	07dc      	lsls	r4, r3, #31
 8009116:	d504      	bpl.n	8009122 <_vfiprintf_r+0x4e>
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	b01d      	add	sp, #116	; 0x74
 800911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	0598      	lsls	r0, r3, #22
 8009126:	d4f7      	bmi.n	8009118 <_vfiprintf_r+0x44>
 8009128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800912a:	f7fc fea7 	bl	8005e7c <__retarget_lock_release_recursive>
 800912e:	e7f3      	b.n	8009118 <_vfiprintf_r+0x44>
 8009130:	2300      	movs	r3, #0
 8009132:	9309      	str	r3, [sp, #36]	; 0x24
 8009134:	2320      	movs	r3, #32
 8009136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800913a:	2330      	movs	r3, #48	; 0x30
 800913c:	f04f 0901 	mov.w	r9, #1
 8009140:	f8cd 800c 	str.w	r8, [sp, #12]
 8009144:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80092f4 <_vfiprintf_r+0x220>
 8009148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800914c:	4623      	mov	r3, r4
 800914e:	469a      	mov	sl, r3
 8009150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009154:	b10a      	cbz	r2, 800915a <_vfiprintf_r+0x86>
 8009156:	2a25      	cmp	r2, #37	; 0x25
 8009158:	d1f9      	bne.n	800914e <_vfiprintf_r+0x7a>
 800915a:	ebba 0b04 	subs.w	fp, sl, r4
 800915e:	d00b      	beq.n	8009178 <_vfiprintf_r+0xa4>
 8009160:	465b      	mov	r3, fp
 8009162:	4622      	mov	r2, r4
 8009164:	4629      	mov	r1, r5
 8009166:	4630      	mov	r0, r6
 8009168:	f7ff ffa2 	bl	80090b0 <__sfputs_r>
 800916c:	3001      	adds	r0, #1
 800916e:	f000 80a9 	beq.w	80092c4 <_vfiprintf_r+0x1f0>
 8009172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009174:	445a      	add	r2, fp
 8009176:	9209      	str	r2, [sp, #36]	; 0x24
 8009178:	f89a 3000 	ldrb.w	r3, [sl]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80a1 	beq.w	80092c4 <_vfiprintf_r+0x1f0>
 8009182:	2300      	movs	r3, #0
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800918c:	f10a 0a01 	add.w	sl, sl, #1
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	9307      	str	r3, [sp, #28]
 8009194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009198:	931a      	str	r3, [sp, #104]	; 0x68
 800919a:	4654      	mov	r4, sl
 800919c:	2205      	movs	r2, #5
 800919e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a2:	4854      	ldr	r0, [pc, #336]	; (80092f4 <_vfiprintf_r+0x220>)
 80091a4:	f7fc fe6b 	bl	8005e7e <memchr>
 80091a8:	9a04      	ldr	r2, [sp, #16]
 80091aa:	b9d8      	cbnz	r0, 80091e4 <_vfiprintf_r+0x110>
 80091ac:	06d1      	lsls	r1, r2, #27
 80091ae:	bf44      	itt	mi
 80091b0:	2320      	movmi	r3, #32
 80091b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b6:	0713      	lsls	r3, r2, #28
 80091b8:	bf44      	itt	mi
 80091ba:	232b      	movmi	r3, #43	; 0x2b
 80091bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c0:	f89a 3000 	ldrb.w	r3, [sl]
 80091c4:	2b2a      	cmp	r3, #42	; 0x2a
 80091c6:	d015      	beq.n	80091f4 <_vfiprintf_r+0x120>
 80091c8:	4654      	mov	r4, sl
 80091ca:	2000      	movs	r0, #0
 80091cc:	f04f 0c0a 	mov.w	ip, #10
 80091d0:	9a07      	ldr	r2, [sp, #28]
 80091d2:	4621      	mov	r1, r4
 80091d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d8:	3b30      	subs	r3, #48	; 0x30
 80091da:	2b09      	cmp	r3, #9
 80091dc:	d94d      	bls.n	800927a <_vfiprintf_r+0x1a6>
 80091de:	b1b0      	cbz	r0, 800920e <_vfiprintf_r+0x13a>
 80091e0:	9207      	str	r2, [sp, #28]
 80091e2:	e014      	b.n	800920e <_vfiprintf_r+0x13a>
 80091e4:	eba0 0308 	sub.w	r3, r0, r8
 80091e8:	fa09 f303 	lsl.w	r3, r9, r3
 80091ec:	4313      	orrs	r3, r2
 80091ee:	46a2      	mov	sl, r4
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	e7d2      	b.n	800919a <_vfiprintf_r+0xc6>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	1d19      	adds	r1, r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	9103      	str	r1, [sp, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bfbb      	ittet	lt
 8009200:	425b      	neglt	r3, r3
 8009202:	f042 0202 	orrlt.w	r2, r2, #2
 8009206:	9307      	strge	r3, [sp, #28]
 8009208:	9307      	strlt	r3, [sp, #28]
 800920a:	bfb8      	it	lt
 800920c:	9204      	strlt	r2, [sp, #16]
 800920e:	7823      	ldrb	r3, [r4, #0]
 8009210:	2b2e      	cmp	r3, #46	; 0x2e
 8009212:	d10c      	bne.n	800922e <_vfiprintf_r+0x15a>
 8009214:	7863      	ldrb	r3, [r4, #1]
 8009216:	2b2a      	cmp	r3, #42	; 0x2a
 8009218:	d134      	bne.n	8009284 <_vfiprintf_r+0x1b0>
 800921a:	9b03      	ldr	r3, [sp, #12]
 800921c:	3402      	adds	r4, #2
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	9203      	str	r2, [sp, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfb8      	it	lt
 8009228:	f04f 33ff 	movlt.w	r3, #4294967295
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092f8 <_vfiprintf_r+0x224>
 8009232:	2203      	movs	r2, #3
 8009234:	4650      	mov	r0, sl
 8009236:	7821      	ldrb	r1, [r4, #0]
 8009238:	f7fc fe21 	bl	8005e7e <memchr>
 800923c:	b138      	cbz	r0, 800924e <_vfiprintf_r+0x17a>
 800923e:	2240      	movs	r2, #64	; 0x40
 8009240:	9b04      	ldr	r3, [sp, #16]
 8009242:	eba0 000a 	sub.w	r0, r0, sl
 8009246:	4082      	lsls	r2, r0
 8009248:	4313      	orrs	r3, r2
 800924a:	3401      	adds	r4, #1
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009252:	2206      	movs	r2, #6
 8009254:	4829      	ldr	r0, [pc, #164]	; (80092fc <_vfiprintf_r+0x228>)
 8009256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800925a:	f7fc fe10 	bl	8005e7e <memchr>
 800925e:	2800      	cmp	r0, #0
 8009260:	d03f      	beq.n	80092e2 <_vfiprintf_r+0x20e>
 8009262:	4b27      	ldr	r3, [pc, #156]	; (8009300 <_vfiprintf_r+0x22c>)
 8009264:	bb1b      	cbnz	r3, 80092ae <_vfiprintf_r+0x1da>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	3307      	adds	r3, #7
 800926a:	f023 0307 	bic.w	r3, r3, #7
 800926e:	3308      	adds	r3, #8
 8009270:	9303      	str	r3, [sp, #12]
 8009272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009274:	443b      	add	r3, r7
 8009276:	9309      	str	r3, [sp, #36]	; 0x24
 8009278:	e768      	b.n	800914c <_vfiprintf_r+0x78>
 800927a:	460c      	mov	r4, r1
 800927c:	2001      	movs	r0, #1
 800927e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009282:	e7a6      	b.n	80091d2 <_vfiprintf_r+0xfe>
 8009284:	2300      	movs	r3, #0
 8009286:	f04f 0c0a 	mov.w	ip, #10
 800928a:	4619      	mov	r1, r3
 800928c:	3401      	adds	r4, #1
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	4620      	mov	r0, r4
 8009292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009296:	3a30      	subs	r2, #48	; 0x30
 8009298:	2a09      	cmp	r2, #9
 800929a:	d903      	bls.n	80092a4 <_vfiprintf_r+0x1d0>
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0c6      	beq.n	800922e <_vfiprintf_r+0x15a>
 80092a0:	9105      	str	r1, [sp, #20]
 80092a2:	e7c4      	b.n	800922e <_vfiprintf_r+0x15a>
 80092a4:	4604      	mov	r4, r0
 80092a6:	2301      	movs	r3, #1
 80092a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ac:	e7f0      	b.n	8009290 <_vfiprintf_r+0x1bc>
 80092ae:	ab03      	add	r3, sp, #12
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	462a      	mov	r2, r5
 80092b4:	4630      	mov	r0, r6
 80092b6:	4b13      	ldr	r3, [pc, #76]	; (8009304 <_vfiprintf_r+0x230>)
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	f7fb fe4b 	bl	8004f54 <_printf_float>
 80092be:	4607      	mov	r7, r0
 80092c0:	1c78      	adds	r0, r7, #1
 80092c2:	d1d6      	bne.n	8009272 <_vfiprintf_r+0x19e>
 80092c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	d405      	bmi.n	80092d6 <_vfiprintf_r+0x202>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	059a      	lsls	r2, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_vfiprintf_r+0x202>
 80092d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d2:	f7fc fdd3 	bl	8005e7c <__retarget_lock_release_recursive>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	065b      	lsls	r3, r3, #25
 80092da:	f53f af1d 	bmi.w	8009118 <_vfiprintf_r+0x44>
 80092de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e0:	e71c      	b.n	800911c <_vfiprintf_r+0x48>
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	462a      	mov	r2, r5
 80092e8:	4630      	mov	r0, r6
 80092ea:	4b06      	ldr	r3, [pc, #24]	; (8009304 <_vfiprintf_r+0x230>)
 80092ec:	a904      	add	r1, sp, #16
 80092ee:	f7fc f8d1 	bl	8005494 <_printf_i>
 80092f2:	e7e4      	b.n	80092be <_vfiprintf_r+0x1ea>
 80092f4:	08009999 	.word	0x08009999
 80092f8:	0800999f 	.word	0x0800999f
 80092fc:	080099a3 	.word	0x080099a3
 8009300:	08004f55 	.word	0x08004f55
 8009304:	080090b1 	.word	0x080090b1

08009308 <__swbuf_r>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	460e      	mov	r6, r1
 800930c:	4614      	mov	r4, r2
 800930e:	4605      	mov	r5, r0
 8009310:	b118      	cbz	r0, 800931a <__swbuf_r+0x12>
 8009312:	6a03      	ldr	r3, [r0, #32]
 8009314:	b90b      	cbnz	r3, 800931a <__swbuf_r+0x12>
 8009316:	f7fc fc79 	bl	8005c0c <__sinit>
 800931a:	69a3      	ldr	r3, [r4, #24]
 800931c:	60a3      	str	r3, [r4, #8]
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	071a      	lsls	r2, r3, #28
 8009322:	d525      	bpl.n	8009370 <__swbuf_r+0x68>
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	b31b      	cbz	r3, 8009370 <__swbuf_r+0x68>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	6922      	ldr	r2, [r4, #16]
 800932c:	b2f6      	uxtb	r6, r6
 800932e:	1a98      	subs	r0, r3, r2
 8009330:	6963      	ldr	r3, [r4, #20]
 8009332:	4637      	mov	r7, r6
 8009334:	4283      	cmp	r3, r0
 8009336:	dc04      	bgt.n	8009342 <__swbuf_r+0x3a>
 8009338:	4621      	mov	r1, r4
 800933a:	4628      	mov	r0, r5
 800933c:	f7ff fa30 	bl	80087a0 <_fflush_r>
 8009340:	b9e0      	cbnz	r0, 800937c <__swbuf_r+0x74>
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	3b01      	subs	r3, #1
 8009346:	60a3      	str	r3, [r4, #8]
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	6022      	str	r2, [r4, #0]
 800934e:	701e      	strb	r6, [r3, #0]
 8009350:	6962      	ldr	r2, [r4, #20]
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d004      	beq.n	8009362 <__swbuf_r+0x5a>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	07db      	lsls	r3, r3, #31
 800935c:	d506      	bpl.n	800936c <__swbuf_r+0x64>
 800935e:	2e0a      	cmp	r6, #10
 8009360:	d104      	bne.n	800936c <__swbuf_r+0x64>
 8009362:	4621      	mov	r1, r4
 8009364:	4628      	mov	r0, r5
 8009366:	f7ff fa1b 	bl	80087a0 <_fflush_r>
 800936a:	b938      	cbnz	r0, 800937c <__swbuf_r+0x74>
 800936c:	4638      	mov	r0, r7
 800936e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009370:	4621      	mov	r1, r4
 8009372:	4628      	mov	r0, r5
 8009374:	f000 f806 	bl	8009384 <__swsetup_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	d0d5      	beq.n	8009328 <__swbuf_r+0x20>
 800937c:	f04f 37ff 	mov.w	r7, #4294967295
 8009380:	e7f4      	b.n	800936c <__swbuf_r+0x64>
	...

08009384 <__swsetup_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4b2a      	ldr	r3, [pc, #168]	; (8009430 <__swsetup_r+0xac>)
 8009388:	4605      	mov	r5, r0
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	460c      	mov	r4, r1
 800938e:	b118      	cbz	r0, 8009398 <__swsetup_r+0x14>
 8009390:	6a03      	ldr	r3, [r0, #32]
 8009392:	b90b      	cbnz	r3, 8009398 <__swsetup_r+0x14>
 8009394:	f7fc fc3a 	bl	8005c0c <__sinit>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800939e:	0718      	lsls	r0, r3, #28
 80093a0:	d422      	bmi.n	80093e8 <__swsetup_r+0x64>
 80093a2:	06d9      	lsls	r1, r3, #27
 80093a4:	d407      	bmi.n	80093b6 <__swsetup_r+0x32>
 80093a6:	2309      	movs	r3, #9
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	e034      	b.n	8009420 <__swsetup_r+0x9c>
 80093b6:	0758      	lsls	r0, r3, #29
 80093b8:	d512      	bpl.n	80093e0 <__swsetup_r+0x5c>
 80093ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093bc:	b141      	cbz	r1, 80093d0 <__swsetup_r+0x4c>
 80093be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c2:	4299      	cmp	r1, r3
 80093c4:	d002      	beq.n	80093cc <__swsetup_r+0x48>
 80093c6:	4628      	mov	r0, r5
 80093c8:	f7fd fbda 	bl	8006b80 <_free_r>
 80093cc:	2300      	movs	r3, #0
 80093ce:	6363      	str	r3, [r4, #52]	; 0x34
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	2300      	movs	r3, #0
 80093da:	6063      	str	r3, [r4, #4]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f043 0308 	orr.w	r3, r3, #8
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	b94b      	cbnz	r3, 8009400 <__swsetup_r+0x7c>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093f6:	d003      	beq.n	8009400 <__swsetup_r+0x7c>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 f883 	bl	8009506 <__smakebuf_r>
 8009400:	89a0      	ldrh	r0, [r4, #12]
 8009402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009406:	f010 0301 	ands.w	r3, r0, #1
 800940a:	d00a      	beq.n	8009422 <__swsetup_r+0x9e>
 800940c:	2300      	movs	r3, #0
 800940e:	60a3      	str	r3, [r4, #8]
 8009410:	6963      	ldr	r3, [r4, #20]
 8009412:	425b      	negs	r3, r3
 8009414:	61a3      	str	r3, [r4, #24]
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	b943      	cbnz	r3, 800942c <__swsetup_r+0xa8>
 800941a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800941e:	d1c4      	bne.n	80093aa <__swsetup_r+0x26>
 8009420:	bd38      	pop	{r3, r4, r5, pc}
 8009422:	0781      	lsls	r1, r0, #30
 8009424:	bf58      	it	pl
 8009426:	6963      	ldrpl	r3, [r4, #20]
 8009428:	60a3      	str	r3, [r4, #8]
 800942a:	e7f4      	b.n	8009416 <__swsetup_r+0x92>
 800942c:	2000      	movs	r0, #0
 800942e:	e7f7      	b.n	8009420 <__swsetup_r+0x9c>
 8009430:	20000074 	.word	0x20000074

08009434 <_raise_r>:
 8009434:	291f      	cmp	r1, #31
 8009436:	b538      	push	{r3, r4, r5, lr}
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	d904      	bls.n	8009448 <_raise_r+0x14>
 800943e:	2316      	movs	r3, #22
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	f04f 30ff 	mov.w	r0, #4294967295
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800944a:	b112      	cbz	r2, 8009452 <_raise_r+0x1e>
 800944c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009450:	b94b      	cbnz	r3, 8009466 <_raise_r+0x32>
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f830 	bl	80094b8 <_getpid_r>
 8009458:	462a      	mov	r2, r5
 800945a:	4601      	mov	r1, r0
 800945c:	4620      	mov	r0, r4
 800945e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009462:	f000 b817 	b.w	8009494 <_kill_r>
 8009466:	2b01      	cmp	r3, #1
 8009468:	d00a      	beq.n	8009480 <_raise_r+0x4c>
 800946a:	1c59      	adds	r1, r3, #1
 800946c:	d103      	bne.n	8009476 <_raise_r+0x42>
 800946e:	2316      	movs	r3, #22
 8009470:	6003      	str	r3, [r0, #0]
 8009472:	2001      	movs	r0, #1
 8009474:	e7e7      	b.n	8009446 <_raise_r+0x12>
 8009476:	2400      	movs	r4, #0
 8009478:	4628      	mov	r0, r5
 800947a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800947e:	4798      	blx	r3
 8009480:	2000      	movs	r0, #0
 8009482:	e7e0      	b.n	8009446 <_raise_r+0x12>

08009484 <raise>:
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <raise+0xc>)
 8009486:	4601      	mov	r1, r0
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	f7ff bfd3 	b.w	8009434 <_raise_r>
 800948e:	bf00      	nop
 8009490:	20000074 	.word	0x20000074

08009494 <_kill_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	2300      	movs	r3, #0
 8009498:	4d06      	ldr	r5, [pc, #24]	; (80094b4 <_kill_r+0x20>)
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	f7f8 fb7e 	bl	8001ba2 <_kill>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d102      	bne.n	80094b0 <_kill_r+0x1c>
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	b103      	cbz	r3, 80094b0 <_kill_r+0x1c>
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	bd38      	pop	{r3, r4, r5, pc}
 80094b2:	bf00      	nop
 80094b4:	20000484 	.word	0x20000484

080094b8 <_getpid_r>:
 80094b8:	f7f8 bb6c 	b.w	8001b94 <_getpid>

080094bc <__swhatbuf_r>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	460c      	mov	r4, r1
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	4615      	mov	r5, r2
 80094c6:	2900      	cmp	r1, #0
 80094c8:	461e      	mov	r6, r3
 80094ca:	b096      	sub	sp, #88	; 0x58
 80094cc:	da0c      	bge.n	80094e8 <__swhatbuf_r+0x2c>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	2100      	movs	r1, #0
 80094d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094d6:	bf0c      	ite	eq
 80094d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094dc:	2340      	movne	r3, #64	; 0x40
 80094de:	2000      	movs	r0, #0
 80094e0:	6031      	str	r1, [r6, #0]
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	b016      	add	sp, #88	; 0x58
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	466a      	mov	r2, sp
 80094ea:	f000 f849 	bl	8009580 <_fstat_r>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	dbed      	blt.n	80094ce <__swhatbuf_r+0x12>
 80094f2:	9901      	ldr	r1, [sp, #4]
 80094f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094fc:	4259      	negs	r1, r3
 80094fe:	4159      	adcs	r1, r3
 8009500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009504:	e7eb      	b.n	80094de <__swhatbuf_r+0x22>

08009506 <__smakebuf_r>:
 8009506:	898b      	ldrh	r3, [r1, #12]
 8009508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800950a:	079d      	lsls	r5, r3, #30
 800950c:	4606      	mov	r6, r0
 800950e:	460c      	mov	r4, r1
 8009510:	d507      	bpl.n	8009522 <__smakebuf_r+0x1c>
 8009512:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	2301      	movs	r3, #1
 800951c:	6163      	str	r3, [r4, #20]
 800951e:	b002      	add	sp, #8
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	466a      	mov	r2, sp
 8009524:	ab01      	add	r3, sp, #4
 8009526:	f7ff ffc9 	bl	80094bc <__swhatbuf_r>
 800952a:	9900      	ldr	r1, [sp, #0]
 800952c:	4605      	mov	r5, r0
 800952e:	4630      	mov	r0, r6
 8009530:	f7fd fb96 	bl	8006c60 <_malloc_r>
 8009534:	b948      	cbnz	r0, 800954a <__smakebuf_r+0x44>
 8009536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953a:	059a      	lsls	r2, r3, #22
 800953c:	d4ef      	bmi.n	800951e <__smakebuf_r+0x18>
 800953e:	f023 0303 	bic.w	r3, r3, #3
 8009542:	f043 0302 	orr.w	r3, r3, #2
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	e7e3      	b.n	8009512 <__smakebuf_r+0xc>
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	6020      	str	r0, [r4, #0]
 800954e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	9b00      	ldr	r3, [sp, #0]
 8009556:	6120      	str	r0, [r4, #16]
 8009558:	6163      	str	r3, [r4, #20]
 800955a:	9b01      	ldr	r3, [sp, #4]
 800955c:	b15b      	cbz	r3, 8009576 <__smakebuf_r+0x70>
 800955e:	4630      	mov	r0, r6
 8009560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009564:	f000 f81e 	bl	80095a4 <_isatty_r>
 8009568:	b128      	cbz	r0, 8009576 <__smakebuf_r+0x70>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f023 0303 	bic.w	r3, r3, #3
 8009570:	f043 0301 	orr.w	r3, r3, #1
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	431d      	orrs	r5, r3
 800957a:	81a5      	strh	r5, [r4, #12]
 800957c:	e7cf      	b.n	800951e <__smakebuf_r+0x18>
	...

08009580 <_fstat_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	2300      	movs	r3, #0
 8009584:	4d06      	ldr	r5, [pc, #24]	; (80095a0 <_fstat_r+0x20>)
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	f7f8 fb66 	bl	8001c5e <_fstat>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	d102      	bne.n	800959c <_fstat_r+0x1c>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	b103      	cbz	r3, 800959c <_fstat_r+0x1c>
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	bd38      	pop	{r3, r4, r5, pc}
 800959e:	bf00      	nop
 80095a0:	20000484 	.word	0x20000484

080095a4 <_isatty_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	2300      	movs	r3, #0
 80095a8:	4d05      	ldr	r5, [pc, #20]	; (80095c0 <_isatty_r+0x1c>)
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	602b      	str	r3, [r5, #0]
 80095b0:	f7f8 fb64 	bl	8001c7c <_isatty>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_isatty_r+0x1a>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b103      	cbz	r3, 80095be <_isatty_r+0x1a>
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	20000484 	.word	0x20000484

080095c4 <_init>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr

080095d0 <_fini>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr
