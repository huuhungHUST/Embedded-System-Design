
driven-event.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08009608  08009608  00019608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a98  08009a98  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009a98  08009a98  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a98  08009a98  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001d4  08009c74  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08009c74  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ef7  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d2  00000000  00000000  00031137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00033910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd8  00000000  00000000  00034ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f29  00000000  00000000  00035890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149c7  00000000  00000000  0004f7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094090  00000000  00000000  00064180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fa0  00000000  00000000  000f8210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fe1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080095ec 	.word	0x080095ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080095ec 	.word	0x080095ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <lcd1602_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
void lcd1602_i2c_sendCommand(uint8_t command)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f023 030f 	bic.w	r3, r3, #15
 8000e0a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	f043 030c 	orr.w	r3, r3, #12
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	723b      	strb	r3, [r7, #8]
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	727b      	strb	r3, [r7, #9]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	f043 030c 	orr.w	r3, r3, #12
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	72bb      	strb	r3, [r7, #10]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <lcd1602_i2c_sendCommand+0x60>)
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <lcd1602_i2c_sendCommand+0x64>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	23c8      	movs	r3, #200	; 0xc8
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2304      	movs	r3, #4
 8000e48:	f002 f810 	bl	8002e6c <HAL_I2C_Master_Transmit>
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001f0 	.word	0x200001f0
 8000e58:	200001f4 	.word	0x200001f4

08000e5c <lcd1602_i2c_sendData>:

void lcd1602_i2c_sendData(uint8_t data)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f023 030f 	bic.w	r3, r3, #15
 8000e72:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	f043 030d 	orr.w	r3, r3, #13
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	723b      	strb	r3, [r7, #8]
 8000e7e:	7bbb      	ldrb	r3, [r7, #14]
 8000e80:	f043 0309 	orr.w	r3, r3, #9
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	727b      	strb	r3, [r7, #9]
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f043 030d 	orr.w	r3, r3, #13
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	72bb      	strb	r3, [r7, #10]
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f043 0309 	orr.w	r3, r3, #9
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <lcd1602_i2c_sendData+0x60>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <lcd1602_i2c_sendData+0x64>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	f107 0208 	add.w	r2, r7, #8
 8000eaa:	23c8      	movs	r3, #200	; 0xc8
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2304      	movs	r3, #4
 8000eb0:	f001 ffdc 	bl	8002e6c <HAL_I2C_Master_Transmit>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200001f0 	.word	0x200001f0
 8000ec0:	200001f4 	.word	0x200001f4

08000ec4 <lcd1602_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd1602_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f000 ff47 	bl	8001d60 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <lcd1602_i2c_init+0xd0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <lcd1602_i2c_init+0xd0>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	214e      	movs	r1, #78	; 0x4e
 8000ee4:	f002 f8c0 	bl	8003068 <HAL_I2C_IsDeviceReady>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d010      	beq.n	8000f10 <lcd1602_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <lcd1602_i2c_init+0xd0>)
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ef6:	2205      	movs	r2, #5
 8000ef8:	217e      	movs	r1, #126	; 0x7e
 8000efa:	f002 f8b5 	bl	8003068 <HAL_I2C_IsDeviceReady>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <lcd1602_i2c_init+0x44>
    {
      return false;
 8000f04:	2300      	movs	r3, #0
 8000f06:	e040      	b.n	8000f8a <lcd1602_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <lcd1602_i2c_init+0xd4>)
 8000f0a:	227e      	movs	r2, #126	; 0x7e
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e002      	b.n	8000f16 <lcd1602_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <lcd1602_i2c_init+0xd4>)
 8000f12:	224e      	movs	r2, #78	; 0x4e
 8000f14:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000f16:	202d      	movs	r0, #45	; 0x2d
 8000f18:	f000 ff22 	bl	8001d60 <HAL_Delay>
  //2. Attentions sequence
  lcd1602_i2c_sendCommand(0x30);
 8000f1c:	2030      	movs	r0, #48	; 0x30
 8000f1e:	f7ff ff69 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(5);
 8000f22:	2005      	movs	r0, #5
 8000f24:	f000 ff1c 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x30);
 8000f28:	2030      	movs	r0, #48	; 0x30
 8000f2a:	f7ff ff63 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 ff16 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x30);
 8000f34:	2030      	movs	r0, #48	; 0x30
 8000f36:	f7ff ff5d 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(8);
 8000f3a:	2008      	movs	r0, #8
 8000f3c:	f000 ff10 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x20);
 8000f40:	2020      	movs	r0, #32
 8000f42:	f7ff ff57 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(8);
 8000f46:	2008      	movs	r0, #8
 8000f48:	f000 ff0a 	bl	8001d60 <HAL_Delay>

  lcd1602_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000f4c:	2028      	movs	r0, #40	; 0x28
 8000f4e:	f7ff ff51 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 ff04 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000f58:	2008      	movs	r0, #8
 8000f5a:	f7ff ff4b 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 fefe 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff ff45 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(3);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 fef8 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000f70:	2006      	movs	r0, #6
 8000f72:	f7ff ff3f 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 fef2 	bl	8001d60 <HAL_Delay>
  lcd1602_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000f7c:	200c      	movs	r0, #12
 8000f7e:	f7ff ff39 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(3);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 feec 	bl	8001d60 <HAL_Delay>

  return true;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001f0 	.word	0x200001f0
 8000f98:	200001f4 	.word	0x200001f4

08000f9c <lcd1602_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd1602_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d108      	bne.n	8000fcc <lcd1602_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc0:	73fb      	strb	r3, [r7, #15]
    lcd1602_i2c_sendCommand(maskData);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff15 	bl	8000df4 <lcd1602_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd1602_i2c_sendCommand(maskData);
  }
}
 8000fca:	e007      	b.n	8000fdc <lcd1602_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000fd2:	73fb      	strb	r3, [r7, #15]
    lcd1602_i2c_sendCommand(maskData);
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff0c 	bl	8000df4 <lcd1602_i2c_sendCommand>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd1602_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd1602_i2c_1stLine(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  lcd1602_i2c_setCursor(0,0);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff ffd6 	bl	8000f9c <lcd1602_i2c_setCursor>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <lcd1602_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd1602_i2c_2ndLine(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  lcd1602_i2c_setCursor(1,0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff ffce 	bl	8000f9c <lcd1602_i2c_setCursor>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <lcd1602_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd1602_i2c_clear(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  lcd1602_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fef3 	bl	8000df4 <lcd1602_i2c_sendCommand>
  HAL_Delay(3);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 fea6 	bl	8001d60 <HAL_Delay>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <lcd1602_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd1602_i2c_printf(const char* str, ...)
{
 8001018:	b40f      	push	{r0, r1, r2, r3}
 800101a:	b590      	push	{r4, r7, lr}
 800101c:	b089      	sub	sp, #36	; 0x24
 800101e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001024:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800102e:	4618      	mov	r0, r3
 8001030:	f004 feb0 	bl	8005d94 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	77fb      	strb	r3, [r7, #31]
 8001038:	e00a      	b.n	8001050 <lcd1602_i2c_printf+0x38>
  {
    lcd1602_i2c_sendData((uint8_t)stringArray[i]);
 800103a:	7ffb      	ldrb	r3, [r7, #31]
 800103c:	3320      	adds	r3, #32
 800103e:	443b      	add	r3, r7
 8001040:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff09 	bl	8000e5c <lcd1602_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800104a:	7ffb      	ldrb	r3, [r7, #31]
 800104c:	3301      	adds	r3, #1
 800104e:	77fb      	strb	r3, [r7, #31]
 8001050:	7ffc      	ldrb	r4, [r7, #31]
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f87a 	bl	8000150 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	429c      	cmp	r4, r3
 8001060:	d202      	bcs.n	8001068 <lcd1602_i2c_printf+0x50>
 8001062:	7ffb      	ldrb	r3, [r7, #31]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d9e8      	bls.n	800103a <lcd1602_i2c_printf+0x22>
  }
}
 8001068:	bf00      	nop
 800106a:	3724      	adds	r7, #36	; 0x24
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001072:	b004      	add	sp, #16
 8001074:	4770      	bx	lr
	...

08001078 <main>:
void transmitData();
void initEventQueue();
void ADC_Select_CH0 (void);
void ADC_Select_CH1 (void);
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  HAL_Init();
 800107e:	f000 fe0d 	bl	8001c9c <HAL_Init>
  SystemClock_Config();
 8001082:	f000 f9cd 	bl	8001420 <SystemClock_Config>
  MX_GPIO_Init();
 8001086:	f000 fb0d 	bl	80016a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108a:	f000 fa67 	bl	800155c <MX_I2C1_Init>

  MX_USART1_UART_Init();
 800108e:	f000 fadf 	bl	8001650 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001092:	f000 fa91 	bl	80015b8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001096:	f000 fa13 	bl	80014c0 <MX_ADC1_Init>
  EventQueue_Init(&event);
 800109a:	4817      	ldr	r0, [pc, #92]	; (80010f8 <main+0x80>)
 800109c:	f000 fb5f 	bl	800175e <EventQueue_Init>
  initEventQueue();
 80010a0:	f000 f95a 	bl	8001358 <initEventQueue>
  lcd1602_i2c_init(&hi2c1);
 80010a4:	4815      	ldr	r0, [pc, #84]	; (80010fc <main+0x84>)
 80010a6:	f7ff ff0d 	bl	8000ec4 <lcd1602_i2c_init>
  void (*execute_task[])(void) = {readSensor,displayLCD,transmitData};
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <main+0x88>)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_TIM_Base_Start_IT(&htim2);
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <main+0x8c>)
 80010b6:	f003 f947 	bl	8004348 <HAL_TIM_Base_Start_IT>
  {
//	  timeSystick= HAL_GetTick();
//	  if(timeSystick%cycle){
//		  EventQueue_Put(&event, EVENT01);
//	  }
	  if(EventQueue_isEmpty(&event)){
 80010ba:	480f      	ldr	r0, [pc, #60]	; (80010f8 <main+0x80>)
 80010bc:	f000 fb5e 	bl	800177c <EventQueue_isEmpty>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <main+0x60>
		  HAL_SuspendTick();
 80010c6:	f000 fe6f 	bl	8001da8 <HAL_SuspendTick>
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80010ca:	2101      	movs	r1, #1
 80010cc:	2000      	movs	r0, #0
 80010ce:	f002 fb53 	bl	8003778 <HAL_PWR_EnterSLEEPMode>
		  HAL_ResumeTick();
 80010d2:	f000 fe77 	bl	8001dc4 <HAL_ResumeTick>
 80010d6:	e7f0      	b.n	80010ba <main+0x42>
	  }
	  else{
		  (*execute_task[currentEvent])();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <main+0x90>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	3310      	adds	r3, #16
 80010e0:	443b      	add	r3, r7
 80010e2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80010e6:	4798      	blx	r3
		  currentEvent=EventQueue_Get(&event);
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <main+0x80>)
 80010ea:	f000 fb7b 	bl	80017e4 <EventQueue_Get>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <main+0x90>)
 80010f4:	701a      	strb	r2, [r3, #0]
	  if(EventQueue_isEmpty(&event)){
 80010f6:	e7e0      	b.n	80010ba <main+0x42>
 80010f8:	200001f8 	.word	0x200001f8
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	08009608 	.word	0x08009608
 8001104:	20000260 	.word	0x20000260
 8001108:	20000350 	.word	0x20000350
 800110c:	00000000 	.word	0x00000000

08001110 <readSensor>:
		  }
  }
}
void readSensor(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	EventQueue_Put(&event, EVENT02);
 8001116:	2101      	movs	r1, #1
 8001118:	4849      	ldr	r0, [pc, #292]	; (8001240 <readSensor+0x130>)
 800111a:	f000 fb41 	bl	80017a0 <EventQueue_Put>
	//readDHT11(&dht11);
	ADC_Select_CH0();
 800111e:	f000 f943 	bl	80013a8 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001122:	4848      	ldr	r0, [pc, #288]	; (8001244 <readSensor+0x134>)
 8001124:	f000 ff34 	bl	8001f90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001128:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800112c:	4845      	ldr	r0, [pc, #276]	; (8001244 <readSensor+0x134>)
 800112e:	f001 f809 	bl	8002144 <HAL_ADC_PollForConversion>
	uint32_t a=0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<3;i++){
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e009      	b.n	8001150 <readSensor+0x40>
		a+= HAL_ADC_GetValue(&hadc1);
 800113c:	4841      	ldr	r0, [pc, #260]	; (8001244 <readSensor+0x134>)
 800113e:	f001 f907 	bl	8002350 <HAL_ADC_GetValue>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<3;i++){
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b02      	cmp	r3, #2
 8001154:	ddf2      	ble.n	800113c <readSensor+0x2c>
	}
	adcValueCN1=a/3;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <readSensor+0x138>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	4a3a      	ldr	r2, [pc, #232]	; (800124c <readSensor+0x13c>)
 8001162:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8001164:	4837      	ldr	r0, [pc, #220]	; (8001244 <readSensor+0x134>)
 8001166:	f000 ffc1 	bl	80020ec <HAL_ADC_Stop>
	temp1= adcValueCN1*22/273.0;
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <readSensor+0x13c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2216      	movs	r2, #22
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f935 	bl	80003e4 <__aeabi_ui2d>
 800117a:	a32d      	add	r3, pc, #180	; (adr r3, 8001230 <readSensor+0x120>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fad4 	bl	800072c <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fc9c 	bl	8000ac8 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <readSensor+0x140>)
 8001194:	6013      	str	r3, [r2, #0]
	HAL_Delay(100);
 8001196:	2064      	movs	r0, #100	; 0x64
 8001198:	f000 fde2 	bl	8001d60 <HAL_Delay>
	ADC_Select_CH1();
 800119c:	f000 f922 	bl	80013e4 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80011a0:	4828      	ldr	r0, [pc, #160]	; (8001244 <readSensor+0x134>)
 80011a2:	f000 fef5 	bl	8001f90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80011a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011aa:	4826      	ldr	r0, [pc, #152]	; (8001244 <readSensor+0x134>)
 80011ac:	f000 ffca 	bl	8002144 <HAL_ADC_PollForConversion>
	uint32_t k=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
	for(int i=0;i<3;i++){
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	e009      	b.n	80011ce <readSensor+0xbe>
		k+= HAL_ADC_GetValue(&hadc1);
 80011ba:	4822      	ldr	r0, [pc, #136]	; (8001244 <readSensor+0x134>)
 80011bc:	f001 f8c8 	bl	8002350 <HAL_ADC_GetValue>
 80011c0:	4602      	mov	r2, r0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
	for(int i=0;i<3;i++){
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	ddf2      	ble.n	80011ba <readSensor+0xaa>
	}
	adcValueCN2=k/3;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <readSensor+0x138>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <readSensor+0x144>)
 80011e0:	6013      	str	r3, [r2, #0]
	humid1=(float)adcValueCN2*100.0/4095;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <readSensor+0x144>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fd74 	bl	8000cd4 <__aeabi_ui2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f91a 	bl	8000428 <__aeabi_f2d>
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <readSensor+0x148>)
 80011fa:	f7ff f96d 	bl	80004d8 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a30c      	add	r3, pc, #48	; (adr r3, 8001238 <readSensor+0x128>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa8e 	bl	800072c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc56 	bl	8000ac8 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <readSensor+0x14c>)
 8001220:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <readSensor+0x134>)
 8001224:	f000 ff62 	bl	80020ec <HAL_ADC_Stop>

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	00000000 	.word	0x00000000
 8001234:	40711000 	.word	0x40711000
 8001238:	00000000 	.word	0x00000000
 800123c:	40affe00 	.word	0x40affe00
 8001240:	200001f8 	.word	0x200001f8
 8001244:	200002f0 	.word	0x200002f0
 8001248:	aaaaaaab 	.word	0xaaaaaaab
 800124c:	20000340 	.word	0x20000340
 8001250:	20000348 	.word	0x20000348
 8001254:	20000344 	.word	0x20000344
 8001258:	40590000 	.word	0x40590000
 800125c:	2000034c 	.word	0x2000034c

08001260 <displayLCD>:

void displayLCD(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	EventQueue_Put(&event, EVENT03);
 8001264:	2102      	movs	r1, #2
 8001266:	4813      	ldr	r0, [pc, #76]	; (80012b4 <displayLCD+0x54>)
 8001268:	f000 fa9a 	bl	80017a0 <EventQueue_Put>
//	sprintf(temp,"TEMP=%.1f",(float)dht11.temperature);
//	sprintf(humid,"humid=%.1f",(float)dht11.humidty);
	sprintf(temp,"TEMP=%.1f",temp1);
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <displayLCD+0x58>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4910      	ldr	r1, [pc, #64]	; (80012bc <displayLCD+0x5c>)
 800127c:	4810      	ldr	r0, [pc, #64]	; (80012c0 <displayLCD+0x60>)
 800127e:	f004 fd0f 	bl	8005ca0 <siprintf>
	sprintf(humid,"humid=%.1f",humid1);
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <displayLCD+0x64>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8ce 	bl	8000428 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <displayLCD+0x68>)
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <displayLCD+0x6c>)
 8001294:	f004 fd04 	bl	8005ca0 <siprintf>
	lcd1602_i2c_clear();
 8001298:	f7ff feb4 	bl	8001004 <lcd1602_i2c_clear>
	lcd1602_i2c_1stLine();
 800129c:	f7ff fea2 	bl	8000fe4 <lcd1602_i2c_1stLine>
	lcd1602_i2c_printf(temp);
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <displayLCD+0x60>)
 80012a2:	f7ff feb9 	bl	8001018 <lcd1602_i2c_printf>
	lcd1602_i2c_2ndLine();
 80012a6:	f7ff fea5 	bl	8000ff4 <lcd1602_i2c_2ndLine>
	lcd1602_i2c_printf(humid);
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <displayLCD+0x6c>)
 80012ac:	f7ff feb4 	bl	8001018 <lcd1602_i2c_printf>

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001f8 	.word	0x200001f8
 80012b8:	20000348 	.word	0x20000348
 80012bc:	08009614 	.word	0x08009614
 80012c0:	20000320 	.word	0x20000320
 80012c4:	2000034c 	.word	0x2000034c
 80012c8:	08009620 	.word	0x08009620
 80012cc:	20000330 	.word	0x20000330

080012d0 <transmitData>:
void transmitData(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	sprintf(temp,"TEMP=%.1f",temp1);
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <transmitData+0x68>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8a5 	bl	8000428 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4916      	ldr	r1, [pc, #88]	; (800133c <transmitData+0x6c>)
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <transmitData+0x70>)
 80012e6:	f004 fcdb 	bl	8005ca0 <siprintf>
	sprintf(humid,"humid=%.1f",humid1);
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <transmitData+0x74>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f89a 	bl	8000428 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4913      	ldr	r1, [pc, #76]	; (8001348 <transmitData+0x78>)
 80012fa:	4814      	ldr	r0, [pc, #80]	; (800134c <transmitData+0x7c>)
 80012fc:	f004 fcd0 	bl	8005ca0 <siprintf>
//	sprintf(temp,"TEMP=%.1f",(float)dht11.temperature);
//	sprintf(humid,"humid=%.1f",(float)dht11.humidty);
	HAL_UART_Transmit(&huart1,(uint8_t*)temp, sizeof(temp), 1000);
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	2210      	movs	r2, #16
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <transmitData+0x70>)
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <transmitData+0x80>)
 800130a:	f003 fc1b 	bl	8004b44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n", 2, 100);
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	2202      	movs	r2, #2
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <transmitData+0x84>)
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <transmitData+0x80>)
 8001316:	f003 fc15 	bl	8004b44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)humid, sizeof(humid), 1000);
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	2210      	movs	r2, #16
 8001320:	490a      	ldr	r1, [pc, #40]	; (800134c <transmitData+0x7c>)
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <transmitData+0x80>)
 8001324:	f003 fc0e 	bl	8004b44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n", 2, 100);
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	2202      	movs	r2, #2
 800132c:	4909      	ldr	r1, [pc, #36]	; (8001354 <transmitData+0x84>)
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <transmitData+0x80>)
 8001330:	f003 fc08 	bl	8004b44 <HAL_UART_Transmit>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000348 	.word	0x20000348
 800133c:	08009614 	.word	0x08009614
 8001340:	20000320 	.word	0x20000320
 8001344:	2000034c 	.word	0x2000034c
 8001348:	08009620 	.word	0x08009620
 800134c:	20000330 	.word	0x20000330
 8001350:	200002a8 	.word	0x200002a8
 8001354:	0800962c 	.word	0x0800962c

08001358 <initEventQueue>:

void initEventQueue(){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	event.event[0]=EVENT01;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <initEventQueue+0x20>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
	event.event[1]=EVENT02;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <initEventQueue+0x20>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	event.event[2]=EVENT03;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <initEventQueue+0x20>)
 800136a:	2202      	movs	r2, #2
 800136c:	709a      	strb	r2, [r3, #2]
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001f8 	.word	0x200001f8

0800137c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim2.Instance)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d103      	bne.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x1c>
 {
		 EventQueue_Put(&event, EVENT01);
 8001390:	2100      	movs	r1, #0
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001394:	f000 fa04 	bl	80017a0 <EventQueue_Put>
 }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000260 	.word	0x20000260
 80013a4:	200001f8 	.word	0x200001f8

080013a8 <ADC_Select_CH0>:

void ADC_Select_CH0 (void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 sConfig.Channel = ADC_CHANNEL_0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 sConfig.Rank = ADC_REGULAR_RANK_1;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013c0:	2307      	movs	r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <ADC_Select_CH0+0x38>)
 80013ca:	f000 ffcd 	bl	8002368 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <ADC_Select_CH0+0x30>
 {
   Error_Handler();
 80013d4:	f000 f9be 	bl	8001754 <Error_Handler>
 }
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002f0 	.word	0x200002f0

080013e4 <ADC_Select_CH1>:
void ADC_Select_CH1 (void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 ADC_ChannelConfTypeDef sConfig = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 sConfig.Channel = ADC_CHANNEL_1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013fc:	2307      	movs	r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <ADC_Select_CH1+0x38>)
 8001406:	f000 ffaf 	bl	8002368 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <ADC_Select_CH1+0x30>
 {
   Error_Handler();
 8001410:	f000 f9a0 	bl	8001754 <Error_Handler>
 }
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002f0 	.word	0x200002f0

08001420 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	2228      	movs	r2, #40	; 0x28
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fcba 	bl	8005da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001458:	2310      	movs	r3, #16
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800145c:	2300      	movs	r3, #0
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001464:	4618      	mov	r0, r3
 8001466:	f002 f9a3 	bl	80037b0 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001470:	f000 f970 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	230f      	movs	r3, #15
 8001476:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fc10 	bl	8003cb4 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800149a:	f000 f95b 	bl	8001754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800149e:	2302      	movs	r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fd91 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b4:	f000 f94e 	bl	8001754 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_ADC1_Init+0x94>)
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <MX_ADC1_Init+0x98>)
 80014d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_ADC1_Init+0x94>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_ADC1_Init+0x94>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_ADC1_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_ADC1_Init+0x94>)
 80014ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_ADC1_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_ADC1_Init+0x94>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014fe:	4815      	ldr	r0, [pc, #84]	; (8001554 <MX_ADC1_Init+0x94>)
 8001500:	f000 fc6e 	bl	8001de0 <HAL_ADC_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800150a:	f000 f923 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001512:	2301      	movs	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_ADC1_Init+0x94>)
 8001520:	f000 ff22 	bl	8002368 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f913 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800152e:	2301      	movs	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001532:	2302      	movs	r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_ADC1_Init+0x94>)
 800153c:	f000 ff14 	bl	8002368 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001546:	f000 f905 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002f0 	.word	0x200002f0
 8001558:	40012400 	.word	0x40012400

0800155c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C1_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <MX_I2C1_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_I2C1_Init+0x50>)
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x58>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_I2C1_Init+0x50>)
 800157a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_I2C1_Init+0x50>)
 800159a:	f001 fb23 	bl	8002be4 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 f8d6 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000020c 	.word	0x2000020c
 80015b0:	40005400 	.word	0x40005400
 80015b4:	000186a0 	.word	0x000186a0

080015b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM2_Init+0x94>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_TIM2_Init+0x94>)
 80015de:	2247      	movs	r2, #71	; 0x47
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM2_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_TIM2_Init+0x94>)
 80015ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_TIM2_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_TIM2_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <MX_TIM2_Init+0x94>)
 80015fe:	f002 fe53 	bl	80042a8 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001608:	f000 f8a4 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <MX_TIM2_Init+0x94>)
 800161a:	f002 ffef 	bl	80045fc <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001624:	f000 f896 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_TIM2_Init+0x94>)
 8001636:	f003 f9c5 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001640:	f000 f888 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000260 	.word	0x20000260

08001650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART1_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART1_UART_Init+0x4c>)
 8001688:	f003 fa0c 	bl	8004aa4 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f85f 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002a8 	.word	0x200002a8
 80016a0:	40013800 	.word	0x40013800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <MX_GPIO_Init+0xa8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <MX_GPIO_Init+0xa8>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_GPIO_Init+0xa8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_GPIO_Init+0xa8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <MX_GPIO_Init+0xa8>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_GPIO_Init+0xa8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_GPIO_Init+0xa8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <MX_GPIO_Init+0xa8>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_GPIO_Init+0xa8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_GPIO_Init+0xa8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <MX_GPIO_Init+0xa8>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_GPIO_Init+0xa8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_GPIO_Init+0xac>)
 8001720:	f001 fa48 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2302      	movs	r3, #2
 8001734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4619      	mov	r1, r3
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_GPIO_Init+0xac>)
 800173e:	f001 f8b5 	bl	80028ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40011000 	.word	0x40011000

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>

0800175e <EventQueue_Init>:
	enum SystemEvent event[MAX_EVENTS];
	int head;
	int tail;

}EventQueue;
void EventQueue_Init(EventQueue *queue){
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	queue->head=0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
	queue->tail=0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]


}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <EventQueue_isEmpty>:


int EventQueue_isEmpty(EventQueue *queue){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	return queue->head == queue->tail;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <EventQueue_Put>:
void EventQueue_Put(EventQueue* queue,enum SystemEvent event){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
	queue->event[queue->tail]=event;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	78f9      	ldrb	r1, [r7, #3]
 80017b4:	54d1      	strb	r1, [r2, r3]
	queue->tail= (queue->tail+1)%MAX_EVENTS;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <EventQueue_Put+0x40>)
 80017be:	fb83 2301 	smull	r2, r3, r3, r1
 80017c2:	109a      	asrs	r2, r3, #2
 80017c4:	17cb      	asrs	r3, r1, #31
 80017c6:	1ad2      	subs	r2, r2, r3
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	1aca      	subs	r2, r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	66666667 	.word	0x66666667

080017e4 <EventQueue_Get>:
enum SystemEvent EventQueue_Get(EventQueue* queue){
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

	enum SystemEvent event=queue->event[queue->head];
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	73fb      	strb	r3, [r7, #15]
	queue->head=(queue->head+1)%MAX_EVENTS;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <EventQueue_Get+0x40>)
 80017fe:	fb83 2301 	smull	r2, r3, r3, r1
 8001802:	109a      	asrs	r2, r3, #2
 8001804:	17cb      	asrs	r3, r1, #31
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1aca      	subs	r2, r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60da      	str	r2, [r3, #12]
	return event;
 8001816:	7bfb      	ldrb	r3, [r7, #15]

}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	66666667 	.word	0x66666667

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_MspInit+0x5c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_MspInit+0x5c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_MspInit+0x5c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_MspInit+0x5c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_MspInit+0x60>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_MspInit+0x60>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000

0800188c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_ADC_MspInit+0x6c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d121      	bne.n	80018f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_ADC_MspInit+0x70>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_ADC_MspInit+0x70>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_ADC_MspInit+0x70>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_ADC_MspInit+0x70>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_ADC_MspInit+0x70>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_ADC_MspInit+0x70>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LM35_Pin|HUMID_SESOR_Pin;
 80018dc:	2303      	movs	r3, #3
 80018de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e0:	2303      	movs	r3, #3
 80018e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_ADC_MspInit+0x74>)
 80018ec:	f000 ffde 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40012400 	.word	0x40012400
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010800 	.word	0x40010800

08001904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <HAL_I2C_MspInit+0x70>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d123      	bne.n	800196c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_I2C_MspInit+0x74>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_I2C_MspInit+0x74>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_I2C_MspInit+0x74>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800193c:	23c0      	movs	r3, #192	; 0xc0
 800193e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_I2C_MspInit+0x78>)
 8001950:	f000 ffac 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0x74>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2C_MspInit+0x74>)
 800195a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195e:	61d3      	str	r3, [r2, #28]
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_I2C_MspInit+0x74>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	40010c00 	.word	0x40010c00

08001980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d113      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_TIM_Base_MspInit+0x44>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_TIM_Base_MspInit+0x44>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_TIM_Base_MspInit+0x44>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	201c      	movs	r0, #28
 80019b0:	f000 ff45 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b4:	201c      	movs	r0, #28
 80019b6:	f000 ff5e 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_UART_MspInit+0x8c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d131      	bne.n	8001a4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_UART_MspInit+0x90>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_UART_MspInit+0x90>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_UART_MspInit+0x90>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_UART_MspInit+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_UART_MspInit+0x90>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_UART_MspInit+0x90>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <HAL_UART_MspInit+0x94>)
 8001a2e:	f000 ff3d 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_UART_MspInit+0x94>)
 8001a48:	f000 ff30 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010800 	.word	0x40010800

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa6:	f000 f93f 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <TIM2_IRQHandler+0x10>)
 8001ab6:	f002 fc99 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000260 	.word	0x20000260

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_kill>:

int _kill(int pid, int sig)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001adc:	f004 f9b6 	bl	8005e4c <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2216      	movs	r2, #22
 8001ae4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_exit>:

void _exit (int status)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afa:	f04f 31ff 	mov.w	r1, #4294967295
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffe7 	bl	8001ad2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b04:	e7fe      	b.n	8001b04 <_exit+0x12>

08001b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00a      	b.n	8001b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b18:	f3af 8000 	nop.w
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf0      	blt.n	8001b18 <_read+0x12>
  }

  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_close>:

int _close(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <_isatty>:

int _isatty(int file)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f004 f920 	bl	8005e4c <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20005000 	.word	0x20005000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	20000354 	.word	0x20000354
 8001c40:	200004a8 	.word	0x200004a8

08001c44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c50:	f7ff fff8 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c56:	490c      	ldr	r1, [pc, #48]	; (8001c88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c6c:	4c09      	ldr	r4, [pc, #36]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f004 f8ed 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7e:	f7ff f9fb 	bl	8001078 <main>
  bx lr
 8001c82:	4770      	bx	lr
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c8c:	08009aa0 	.word	0x08009aa0
  ldr r2, =_sbss
 8001c90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c94:	200004a8 	.word	0x200004a8

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x28>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fdbb 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fdb6 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fdd3 	bl	8002892 <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fd9b 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_IncTick+0x20>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000358 	.word	0x20000358

08001d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000358 	.word	0x20000358

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffe0 	bl	8001d4c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008

08001da8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_SuspendTick+0x18>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_SuspendTick+0x18>)
 8001db2:	f023 0302 	bic.w	r3, r3, #2
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_ResumeTick+0x18>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_ResumeTick+0x18>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0be      	b.n	8001f80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fd34 	bl	800188c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fbf1 	bl	800260c <ADC_ConversionStop_Disable>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8099 	bne.w	8001f6e <HAL_ADC_Init+0x18e>
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 8095 	bne.w	8001f6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e4c:	f023 0302 	bic.w	r3, r3, #2
 8001e50:	f043 0202 	orr.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e78:	d003      	beq.n	8001e82 <HAL_ADC_Init+0xa2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_ADC_Init+0xa8>
 8001e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e86:	e000      	b.n	8001e8a <HAL_ADC_Init+0xaa>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7d1b      	ldrb	r3, [r3, #20]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d119      	bne.n	8001ecc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7b1b      	ldrb	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	035a      	lsls	r2, r3, #13
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e00b      	b.n	8001ecc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_ADC_Init+0x1a8>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_Init+0x126>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d104      	bne.n	8001f10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	051b      	lsls	r3, r3, #20
 8001f0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_ADC_Init+0x1ac>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10b      	bne.n	8001f4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f4a:	e018      	b.n	8001f7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f023 0312 	bic.w	r3, r3, #18
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f6c:	e007      	b.n	8001f7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	ffe1f7fd 	.word	0xffe1f7fd
 8001f8c:	ff1f0efe 	.word	0xff1f0efe

08001f90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Start+0x1a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e098      	b.n	80020dc <HAL_ADC_Start+0x14c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fad0 	bl	8002558 <ADC_Enable>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8087 	bne.w	80020d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a41      	ldr	r2, [pc, #260]	; (80020e4 <HAL_ADC_Start+0x154>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_Start+0x5e>
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_ADC_Start+0x158>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d026      	beq.n	8002056 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002018:	e01d      	b.n	8002056 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <HAL_ADC_Start+0x158>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_ADC_Start+0xaa>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_ADC_Start+0x154>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10d      	bne.n	8002056 <HAL_ADC_Start+0xc6>
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_ADC_Start+0x158>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800204e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	f023 0206 	bic.w	r2, r3, #6
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
 800206e:	e002      	b.n	8002076 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0202 	mvn.w	r2, #2
 8002086:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002092:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002096:	d113      	bne.n	80020c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_ADC_Start+0x154>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d105      	bne.n	80020ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_ADC_Start+0x158>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	e00c      	b.n	80020da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e003      	b.n	80020da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40012800 	.word	0x40012800
 80020e8:	40012400 	.word	0x40012400

080020ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Stop+0x1a>
 8002102:	2302      	movs	r3, #2
 8002104:	e01a      	b.n	800213c <HAL_ADC_Stop+0x50>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa7c 	bl	800260c <ADC_ConversionStop_Disable>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800215a:	f7ff fdf7 	bl	8001d4c <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0d3      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d131      	bne.n	80021f8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d12a      	bne.n	80021f8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021a2:	e021      	b.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d01d      	beq.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x7e>
 80021b2:	f7ff fdcb 	bl	8001d4c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d212      	bcs.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f043 0204 	orr.w	r2, r3, #4
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0a2      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0d6      	beq.n	80021a4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021f6:	e070      	b.n	80022da <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_ADC_PollForConversion+0x1f4>)
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	2002      	movs	r0, #2
 80021fe:	f001 ff9d 	bl	800413c <HAL_RCCEx_GetPeriphCLKFreq>
 8002202:	4603      	mov	r3, r0
 8002204:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_ADC_PollForConversion+0x1f8>)
 8002210:	400b      	ands	r3, r1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_ADC_PollForConversion+0x104>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68d9      	ldr	r1, [r3, #12]
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_ADC_PollForConversion+0x1fc>)
 800221e:	400b      	ands	r3, r1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <HAL_ADC_PollForConversion+0x104>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_ADC_PollForConversion+0x200>)
 800222c:	400b      	ands	r3, r1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_ADC_PollForConversion+0x100>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68d9      	ldr	r1, [r3, #12]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_ADC_PollForConversion+0x204>)
 800223a:	400b      	ands	r3, r1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_PollForConversion+0x100>
 8002240:	2314      	movs	r3, #20
 8002242:	e020      	b.n	8002286 <HAL_ADC_PollForConversion+0x142>
 8002244:	2329      	movs	r3, #41	; 0x29
 8002246:	e01e      	b.n	8002286 <HAL_ADC_PollForConversion+0x142>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_ADC_PollForConversion+0x200>)
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_ADC_PollForConversion+0x120>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_ADC_PollForConversion+0x204>)
 800225e:	400b      	ands	r3, r1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <HAL_ADC_PollForConversion+0x13c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_ADC_PollForConversion+0x208>)
 800226c:	400b      	ands	r3, r1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_ADC_PollForConversion+0x140>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68d9      	ldr	r1, [r3, #12]
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_ADC_PollForConversion+0x208>)
 800227a:	400b      	ands	r3, r1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_PollForConversion+0x140>
 8002280:	2354      	movs	r3, #84	; 0x54
 8002282:	e000      	b.n	8002286 <HAL_ADC_PollForConversion+0x142>
 8002284:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800228c:	e021      	b.n	80022d2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d01a      	beq.n	80022cc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_ADC_PollForConversion+0x168>
 800229c:	f7ff fd56 	bl	8001d4c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d20f      	bcs.n	80022cc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d90b      	bls.n	80022cc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e030      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d8d9      	bhi.n	800228e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0212 	mvn.w	r2, #18
 80022e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022fe:	d115      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}
 8002336:	bf00      	nop
 8002338:	20000000 	.word	0x20000000
 800233c:	24924924 	.word	0x24924924
 8002340:	00924924 	.word	0x00924924
 8002344:	12492492 	.word	0x12492492
 8002348:	00492492 	.word	0x00492492
 800234c:	00249249 	.word	0x00249249

08002350 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x20>
 8002384:	2302      	movs	r3, #2
 8002386:	e0dc      	b.n	8002542 <HAL_ADC_ConfigChannel+0x1da>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d81c      	bhi.n	80023d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b05      	subs	r3, #5
 80023aa:	221f      	movs	r2, #31
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4019      	ands	r1, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b05      	subs	r3, #5
 80023c4:	fa00 f203 	lsl.w	r2, r0, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34
 80023d0:	e03c      	b.n	800244c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d81c      	bhi.n	8002414 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	3b23      	subs	r3, #35	; 0x23
 80023ec:	221f      	movs	r2, #31
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	4019      	ands	r1, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b23      	subs	r3, #35	; 0x23
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
 8002412:	e01b      	b.n	800244c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b41      	subs	r3, #65	; 0x41
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	4019      	ands	r1, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b41      	subs	r3, #65	; 0x41
 8002440:	fa00 f203 	lsl.w	r2, r0, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d91c      	bls.n	800248e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1e      	subs	r3, #30
 8002466:	2207      	movs	r2, #7
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4019      	ands	r1, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6898      	ldr	r0, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	3b1e      	subs	r3, #30
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	e019      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6919      	ldr	r1, [r3, #16]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	2207      	movs	r2, #7
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4019      	ands	r1, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6898      	ldr	r0, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d003      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ce:	2b11      	cmp	r3, #17
 80024d0:	d132      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_ADC_ConfigChannel+0x1e4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d125      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d126      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d11a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_ADC_ConfigChannel+0x1e8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_ADC_ConfigChannel+0x1ec>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9a      	lsrs	r2, r3, #18
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x1b2>
 8002526:	e007      	b.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012400 	.word	0x40012400
 8002550:	20000000 	.word	0x20000000
 8002554:	431bde83 	.word	0x431bde83

08002558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d040      	beq.n	80025f8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <ADC_Enable+0xac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	; (8002608 <ADC_Enable+0xb0>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002594:	e002      	b.n	800259c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025a2:	f7ff fbd3 	bl	8001d4c <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025a8:	e01f      	b.n	80025ea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025aa:	f7ff fbcf 	bl	8001d4c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d918      	bls.n	80025ea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d011      	beq.n	80025ea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e007      	b.n	80025fa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d1d8      	bne.n	80025aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000
 8002608:	431bde83 	.word	0x431bde83

0800260c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d12e      	bne.n	8002684 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002636:	f7ff fb89 	bl	8001d4c <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800263c:	e01b      	b.n	8002676 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800263e:	f7ff fb85 	bl	8001d4c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d914      	bls.n	8002676 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10d      	bne.n	8002676 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d0dc      	beq.n	800263e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4906      	ldr	r1, [pc, #24]	; (8002728 <__NVIC_EnableIRQ+0x34>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	; (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff90 	bl	800272c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff2d 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff42 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff90 	bl	8002780 <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5f 	bl	800272c <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff35 	bl	80026f4 <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b08b      	sub	sp, #44	; 0x2c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e169      	b.n	8002b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c0:	2201      	movs	r2, #1
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8158 	bne.w	8002b8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a9a      	ldr	r2, [pc, #616]	; (8002b4c <HAL_GPIO_Init+0x2a0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d05e      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028e8:	4a98      	ldr	r2, [pc, #608]	; (8002b4c <HAL_GPIO_Init+0x2a0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d875      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028ee:	4a98      	ldr	r2, [pc, #608]	; (8002b50 <HAL_GPIO_Init+0x2a4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d058      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028f4:	4a96      	ldr	r2, [pc, #600]	; (8002b50 <HAL_GPIO_Init+0x2a4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d86f      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028fa:	4a96      	ldr	r2, [pc, #600]	; (8002b54 <HAL_GPIO_Init+0x2a8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d052      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002900:	4a94      	ldr	r2, [pc, #592]	; (8002b54 <HAL_GPIO_Init+0x2a8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d869      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002906:	4a94      	ldr	r2, [pc, #592]	; (8002b58 <HAL_GPIO_Init+0x2ac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04c      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 800290c:	4a92      	ldr	r2, [pc, #584]	; (8002b58 <HAL_GPIO_Init+0x2ac>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d863      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002912:	4a92      	ldr	r2, [pc, #584]	; (8002b5c <HAL_GPIO_Init+0x2b0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d046      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002918:	4a90      	ldr	r2, [pc, #576]	; (8002b5c <HAL_GPIO_Init+0x2b0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d85d      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d82a      	bhi.n	8002978 <HAL_GPIO_Init+0xcc>
 8002922:	2b12      	cmp	r3, #18
 8002924:	d859      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_GPIO_Init+0x80>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	080029a7 	.word	0x080029a7
 8002930:	08002981 	.word	0x08002981
 8002934:	08002993 	.word	0x08002993
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029db 	.word	0x080029db
 8002940:	080029db 	.word	0x080029db
 8002944:	080029db 	.word	0x080029db
 8002948:	080029db 	.word	0x080029db
 800294c:	080029db 	.word	0x080029db
 8002950:	080029db 	.word	0x080029db
 8002954:	080029db 	.word	0x080029db
 8002958:	080029db 	.word	0x080029db
 800295c:	080029db 	.word	0x080029db
 8002960:	080029db 	.word	0x080029db
 8002964:	080029db 	.word	0x080029db
 8002968:	080029db 	.word	0x080029db
 800296c:	080029db 	.word	0x080029db
 8002970:	08002989 	.word	0x08002989
 8002974:	0800299d 	.word	0x0800299d
 8002978:	4a79      	ldr	r2, [pc, #484]	; (8002b60 <HAL_GPIO_Init+0x2b4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297e:	e02c      	b.n	80029da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e029      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	3304      	adds	r3, #4
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	e024      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	3308      	adds	r3, #8
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e01f      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	330c      	adds	r3, #12
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	e01a      	b.n	80029dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ae:	2304      	movs	r3, #4
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e013      	b.n	80029dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029bc:	2308      	movs	r3, #8
 80029be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	611a      	str	r2, [r3, #16]
          break;
 80029c6:	e009      	b.n	80029dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c8:	2308      	movs	r3, #8
 80029ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	615a      	str	r2, [r3, #20]
          break;
 80029d2:	e003      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x130>
          break;
 80029da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2bff      	cmp	r3, #255	; 0xff
 80029e0:	d801      	bhi.n	80029e6 <HAL_GPIO_Init+0x13a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	e001      	b.n	80029ea <HAL_GPIO_Init+0x13e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2bff      	cmp	r3, #255	; 0xff
 80029f0:	d802      	bhi.n	80029f8 <HAL_GPIO_Init+0x14c>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x152>
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3b08      	subs	r3, #8
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	210f      	movs	r1, #15
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80b1 	beq.w	8002b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a44:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <HAL_GPIO_Init+0x2bc>)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_GPIO_Init+0x1ec>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3f      	ldr	r2, [pc, #252]	; (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00d      	beq.n	8002a94 <HAL_GPIO_Init+0x1e8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3e      	ldr	r2, [pc, #248]	; (8002b74 <HAL_GPIO_Init+0x2c8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <HAL_GPIO_Init+0x1e4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3d      	ldr	r2, [pc, #244]	; (8002b78 <HAL_GPIO_Init+0x2cc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_GPIO_Init+0x1e0>
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e006      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	e004      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	f002 0203 	and.w	r2, r2, #3
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	4093      	lsls	r3, r2
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aaa:	492f      	ldr	r1, [pc, #188]	; (8002b68 <HAL_GPIO_Init+0x2bc>)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	492c      	ldr	r1, [pc, #176]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4928      	ldr	r1, [pc, #160]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	4922      	ldr	r1, [pc, #136]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	491e      	ldr	r1, [pc, #120]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4918      	ldr	r1, [pc, #96]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
 8002b20:	e006      	b.n	8002b30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4914      	ldr	r1, [pc, #80]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d021      	beq.n	8002b80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
 8002b48:	e021      	b.n	8002b8e <HAL_GPIO_Init+0x2e2>
 8002b4a:	bf00      	nop
 8002b4c:	10320000 	.word	0x10320000
 8002b50:	10310000 	.word	0x10310000
 8002b54:	10220000 	.word	0x10220000
 8002b58:	10210000 	.word	0x10210000
 8002b5c:	10120000 	.word	0x10120000
 8002b60:	10110000 	.word	0x10110000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	40010c00 	.word	0x40010c00
 8002b74:	40011000 	.word	0x40011000
 8002b78:	40011400 	.word	0x40011400
 8002b7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	4909      	ldr	r1, [pc, #36]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	3301      	adds	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f ae8e 	bne.w	80028c0 <HAL_GPIO_Init+0x14>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	372c      	adds	r7, #44	; 0x2c
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	611a      	str	r2, [r3, #16]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e12b      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fe7a 	bl	8001904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c48:	f001 f97c 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a81      	ldr	r2, [pc, #516]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d807      	bhi.n	8002c68 <HAL_I2C_Init+0x84>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_I2C_Init+0x278>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e006      	b.n	8002c76 <HAL_I2C_Init+0x92>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a7d      	ldr	r2, [pc, #500]	; (8002e60 <HAL_I2C_Init+0x27c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e7      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a78      	ldr	r2, [pc, #480]	; (8002e64 <HAL_I2C_Init+0x280>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0c9b      	lsrs	r3, r3, #18
 8002c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_I2C_Init+0xd4>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e009      	b.n	8002ccc <HAL_I2C_Init+0xe8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <HAL_I2C_Init+0x284>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	495c      	ldr	r1, [pc, #368]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	d819      	bhi.n	8002d20 <HAL_I2C_Init+0x13c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e59      	subs	r1, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d00:	400b      	ands	r3, r1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_I2C_Init+0x138>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e59      	subs	r1, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	e051      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e04f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d111      	bne.n	8002d4c <HAL_I2C_Init+0x168>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	440b      	add	r3, r1
 8002d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e012      	b.n	8002d72 <HAL_I2C_Init+0x18e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	0099      	lsls	r1, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x196>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e022      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10e      	bne.n	8002da0 <HAL_I2C_Init+0x1bc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e58      	subs	r0, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9e:	e00f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6809      	ldr	r1, [r1, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6911      	ldr	r1, [r2, #16]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	000186a0 	.word	0x000186a0
 8002e5c:	001e847f 	.word	0x001e847f
 8002e60:	003d08ff 	.word	0x003d08ff
 8002e64:	431bde83 	.word	0x431bde83
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7fe ff64 	bl	8001d4c <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	f040 80e0 	bne.w	8003054 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4970      	ldr	r1, [pc, #448]	; (8003060 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa92 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0d3      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_Master_Transmit+0x50>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0cc      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2221      	movs	r2, #33	; 0x21
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2210      	movs	r2, #16
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	893a      	ldrh	r2, [r7, #8]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a50      	ldr	r2, [pc, #320]	; (8003064 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f9ca 	bl	80032c4 <I2C_MasterRequestWrite>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e08d      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f50:	e066      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6a39      	ldr	r1, [r7, #32]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fb50 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11b      	bne.n	8002ff4 <HAL_I2C_Master_Transmit+0x188>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	6a39      	ldr	r1, [r7, #32]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb47 	bl	800368c <I2C_WaitOnBTFFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e01a      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d194      	bne.n	8002f52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000

08003068 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7fe fe68 	bl	8001d4c <HAL_GetTick>
 800307c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b20      	cmp	r3, #32
 800308c:	f040 8111 	bne.w	80032b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2319      	movs	r3, #25
 8003096:	2201      	movs	r2, #1
 8003098:	4988      	ldr	r1, [pc, #544]	; (80032bc <HAL_I2C_IsDeviceReady+0x254>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f994 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	e104      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2C_IsDeviceReady+0x50>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e0fd      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d007      	beq.n	80030de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2224      	movs	r2, #36	; 0x24
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a70      	ldr	r2, [pc, #448]	; (80032c0 <HAL_I2C_IsDeviceReady+0x258>)
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f952 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003138:	d103      	bne.n	8003142 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0b6      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003154:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003156:	f7fe fdf9 	bl	8001d4c <HAL_GetTick>
 800315a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	bf0c      	ite	eq
 800316a:	2301      	moveq	r3, #1
 800316c:	2300      	movne	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800318a:	e025      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800318c:	f7fe fdde 	bl	8001d4c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d302      	bcc.n	80031a2 <HAL_I2C_IsDeviceReady+0x13a>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22a0      	movs	r2, #160	; 0xa0
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2ba0      	cmp	r3, #160	; 0xa0
 80031e2:	d005      	beq.n	80031f0 <HAL_I2C_IsDeviceReady+0x188>
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_I2C_IsDeviceReady+0x188>
 80031ea:	7dbb      	ldrb	r3, [r7, #22]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0cd      	beq.n	800318c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d129      	bne.n	800325a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	4921      	ldr	r1, [pc, #132]	; (80032bc <HAL_I2C_IsDeviceReady+0x254>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f8c6 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e036      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e02c      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003272:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2319      	movs	r3, #25
 800327a:	2201      	movs	r2, #1
 800327c:	490f      	ldr	r1, [pc, #60]	; (80032bc <HAL_I2C_IsDeviceReady+0x254>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f8a2 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e012      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	3301      	adds	r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	f4ff af32 	bcc.w	8003102 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	00100002 	.word	0x00100002
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d006      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d003      	beq.n	80032ee <I2C_MasterRequestWrite+0x2a>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ec:	d108      	bne.n	8003300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00b      	b.n	8003318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b12      	cmp	r3, #18
 8003306:	d107      	bne.n	8003318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f84f 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d103      	bne.n	8003348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e035      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003354:	d108      	bne.n	8003368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	e01b      	b.n	80033a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003368:	897b      	ldrh	r3, [r7, #10]
 800336a:	11db      	asrs	r3, r3, #7
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 0306 	and.w	r3, r3, #6
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f063 030f 	orn	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <I2C_MasterRequestWrite+0xfc>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f898 	bl	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e010      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <I2C_MasterRequestWrite+0x100>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f888 	bl	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010008 	.word	0x00010008
 80033c4:	00010002 	.word	0x00010002

080033c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	e048      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d044      	beq.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe fcb3 	bl	8001d4c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d139      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10d      	bne.n	800341e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	43da      	mvns	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	e00c      	b.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	43da      	mvns	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	429a      	cmp	r2, r3
 800343c:	d116      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e023      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d10d      	bne.n	8003492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	e00c      	b.n	80034ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	43da      	mvns	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d093      	beq.n	80033da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ca:	e071      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d123      	bne.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e067      	b.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d041      	beq.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7fe fc0e 	bl	8001d4c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d136      	bne.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10c      	bne.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e00b      	b.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	43da      	mvns	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e021      	b.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10c      	bne.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	43da      	mvns	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e00b      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f af6d 	bne.w	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003608:	e034      	b.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f886 	bl	800371c <I2C_IsAcknowledgeFailed>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e034      	b.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d028      	beq.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fe fb93 	bl	8001d4c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11d      	bne.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d016      	beq.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b80      	cmp	r3, #128	; 0x80
 8003680:	d1c3      	bne.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003698:	e034      	b.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f83e 	bl	800371c <I2C_IsAcknowledgeFailed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e034      	b.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d028      	beq.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fb4b 	bl	8001d4c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11d      	bne.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d016      	beq.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e007      	b.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d1c3      	bne.n	800369a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d11b      	bne.n	800376c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_PWR_EnterSLEEPMode+0x34>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <HAL_PWR_EnterSLEEPMode+0x34>)
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003796:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003798:	e002      	b.n	80037a0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800379a:	bf40      	sev
    __WFE();
 800379c:	bf20      	wfe
    __WFE();
 800379e:	bf20      	wfe
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e272      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8087 	beq.w	80038de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d0:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d00c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037dc:	4b8f      	ldr	r3, [pc, #572]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d112      	bne.n	800380e <HAL_RCC_OscConfig+0x5e>
 80037e8:	4b8c      	ldr	r3, [pc, #560]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d10b      	bne.n	800380e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f6:	4b89      	ldr	r3, [pc, #548]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d06c      	beq.n	80038dc <HAL_RCC_OscConfig+0x12c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d168      	bne.n	80038dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e24c      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x76>
 8003818:	4b80      	ldr	r3, [pc, #512]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7f      	ldr	r2, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 800381e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e02e      	b.n	8003884 <HAL_RCC_OscConfig+0xd4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x98>
 800382e:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7a      	ldr	r2, [pc, #488]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b78      	ldr	r3, [pc, #480]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a77      	ldr	r2, [pc, #476]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e01d      	b.n	8003884 <HAL_RCC_OscConfig+0xd4>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0xbc>
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a71      	ldr	r2, [pc, #452]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0xd4>
 800386c:	4b6b      	ldr	r3, [pc, #428]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6a      	ldr	r2, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b68      	ldr	r3, [pc, #416]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a67      	ldr	r2, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe fa5e 	bl	8001d4c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7fe fa5a 	bl	8001d4c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e200      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0xe4>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fa4a 	bl	8001d4c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fe fa46 	bl	8001d4c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1ec      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x10c>
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d063      	beq.n	80039b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ea:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038f6:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d11c      	bne.n	800393c <HAL_RCC_OscConfig+0x18c>
 8003902:	4b46      	ldr	r3, [pc, #280]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x176>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1c0      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4939      	ldr	r1, [pc, #228]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	e03a      	b.n	80039b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCC_OscConfig+0x270>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe f9ff 	bl	8001d4c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe f9fb 	bl	8001d4c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1a1      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4927      	ldr	r1, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e015      	b.n	80039b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_RCC_OscConfig+0x270>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe f9de 	bl	8001d4c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe f9da 	bl	8001d4c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e180      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03a      	beq.n	8003a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d019      	beq.n	80039fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <HAL_RCC_OscConfig+0x274>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039cc:	f7fe f9be 	bl	8001d4c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe f9ba 	bl	8001d4c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e160      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <HAL_RCC_OscConfig+0x26c>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f000 face 	bl	8003f94 <RCC_Delay>
 80039f8:	e01c      	b.n	8003a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_OscConfig+0x274>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fe f9a4 	bl	8001d4c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a06:	e00f      	b.n	8003a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fe f9a0 	bl	8001d4c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d908      	bls.n	8003a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e146      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	42420000 	.word	0x42420000
 8003a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e9      	bne.n	8003a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a6 	beq.w	8003b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a46:	4b8b      	ldr	r3, [pc, #556]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	4b88      	ldr	r3, [pc, #544]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	4a87      	ldr	r2, [pc, #540]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	61d3      	str	r3, [r2, #28]
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b82      	ldr	r3, [pc, #520]	; (8003c78 <HAL_RCC_OscConfig+0x4c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d118      	bne.n	8003aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	; (8003c78 <HAL_RCC_OscConfig+0x4c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a7e      	ldr	r2, [pc, #504]	; (8003c78 <HAL_RCC_OscConfig+0x4c8>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe f961 	bl	8001d4c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fe f95d 	bl	8001d4c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b64      	cmp	r3, #100	; 0x64
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e103      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b75      	ldr	r3, [pc, #468]	; (8003c78 <HAL_RCC_OscConfig+0x4c8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x312>
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6213      	str	r3, [r2, #32]
 8003ac0:	e02d      	b.n	8003b1e <HAL_RCC_OscConfig+0x36e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x334>
 8003aca:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a69      	ldr	r2, [pc, #420]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6213      	str	r3, [r2, #32]
 8003ad6:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a66      	ldr	r2, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	6213      	str	r3, [r2, #32]
 8003ae2:	e01c      	b.n	8003b1e <HAL_RCC_OscConfig+0x36e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_OscConfig+0x356>
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a60      	ldr	r2, [pc, #384]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	e00b      	b.n	8003b1e <HAL_RCC_OscConfig+0x36e>
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a5a      	ldr	r2, [pc, #360]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6213      	str	r3, [r2, #32]
 8003b12:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	4a57      	ldr	r2, [pc, #348]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d015      	beq.n	8003b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fe f911 	bl	8001d4c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fe f90d 	bl	8001d4c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0b1      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ee      	beq.n	8003b2e <HAL_RCC_OscConfig+0x37e>
 8003b50:	e014      	b.n	8003b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fe f8fb 	bl	8001d4c <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fe f8f7 	bl	8001d4c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e09b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b70:	4b40      	ldr	r3, [pc, #256]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ee      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b82:	4b3c      	ldr	r3, [pc, #240]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8087 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b98:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d061      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d146      	bne.n	8003c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bac:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fe f8cb 	bl	8001d4c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fe f8c7 	bl	8001d4c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e06d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d108      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4921      	ldr	r1, [pc, #132]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a19      	ldr	r1, [r3, #32]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	430b      	orrs	r3, r1
 8003c06:	491b      	ldr	r1, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe f89b 	bl	8001d4c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fe f897 	bl	8001d4c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e03d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x46a>
 8003c38:	e035      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe f884 	bl	8001d4c <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe f880 	bl	8001d4c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e026      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x498>
 8003c66:	e01e      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e019      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x500>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0d0      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d910      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b67      	ldr	r3, [pc, #412]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 0207 	bic.w	r2, r3, #7
 8003cde:	4965      	ldr	r1, [pc, #404]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b63      	ldr	r3, [pc, #396]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0b8      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a58      	ldr	r2, [pc, #352]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d28:	4b53      	ldr	r3, [pc, #332]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a52      	ldr	r2, [pc, #328]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d34:	4b50      	ldr	r3, [pc, #320]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	494d      	ldr	r1, [pc, #308]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d040      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b47      	ldr	r3, [pc, #284]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d115      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e07f      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e073      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	4b3d      	ldr	r3, [pc, #244]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06b      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f023 0203 	bic.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4936      	ldr	r1, [pc, #216]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da4:	f7fd ffd2 	bl	8001d4c <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fd ffce 	bl	8001d4c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e053      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 020c 	and.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1eb      	bne.n	8003dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d210      	bcs.n	8003e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	4922      	ldr	r1, [pc, #136]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e032      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4916      	ldr	r1, [pc, #88]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e2e:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	490e      	ldr	r1, [pc, #56]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e42:	f000 f821 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8003e46:	4602      	mov	r2, r0
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	490a      	ldr	r1, [pc, #40]	; (8003e7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5a:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <HAL_RCC_ClockConfig+0x1cc>)
 8003e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_ClockConfig+0x1d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd ff30 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40022000 	.word	0x40022000
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	08009630 	.word	0x08009630
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000004 	.word	0x20000004

08003e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x36>
 8003eb6:	e027      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eba:	613b      	str	r3, [r7, #16]
      break;
 8003ebc:	e027      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	0c9b      	lsrs	r3, r3, #18
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	0c5b      	lsrs	r3, r3, #17
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ee2:	5cd3      	ldrb	r3, [r2, r3]
 8003ee4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eea:	fb03 f202 	mul.w	r2, r3, r2
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e004      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	613b      	str	r3, [r7, #16]
      break;
 8003f06:	e002      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f0a:	613b      	str	r3, [r7, #16]
      break;
 8003f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0e:	693b      	ldr	r3, [r7, #16]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	007a1200 	.word	0x007a1200
 8003f24:	08009648 	.word	0x08009648
 8003f28:	08009658 	.word	0x08009658
 8003f2c:	003d0900 	.word	0x003d0900

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	20000000 	.word	0x20000000

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff2 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08009640 	.word	0x08009640

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f7ff ffde 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	0adb      	lsrs	r3, r3, #11
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	08009640 	.word	0x08009640

08003f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <RCC_Delay+0x34>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <RCC_Delay+0x38>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0a5b      	lsrs	r3, r3, #9
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fb0:	bf00      	nop
  }
  while (Delay --);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	60fa      	str	r2, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f9      	bne.n	8003fb0 <RCC_Delay+0x1c>
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d07d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff0:	4b4f      	ldr	r3, [pc, #316]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4a4b      	ldr	r2, [pc, #300]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004006:	61d3      	str	r3, [r2, #28]
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d118      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004024:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a42      	ldr	r2, [pc, #264]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004030:	f7fd fe8c 	bl	8001d4c <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	e008      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004038:	f7fd fe88 	bl	8001d4c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e06d      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02e      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	429a      	cmp	r2, r3
 8004072:	d027      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004074:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800408a:	4a29      	ldr	r2, [pc, #164]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d014      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409a:	f7fd fe57 	bl	8001d4c <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fd fe53 	bl	8001d4c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e036      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ee      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4917      	ldr	r1, [pc, #92]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4a13      	ldr	r2, [pc, #76]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	490b      	ldr	r1, [pc, #44]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	42420440 	.word	0x42420440

0800413c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b10      	cmp	r3, #16
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b10      	cmp	r3, #16
 8004162:	f200 808a 	bhi.w	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d045      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d075      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004172:	e082      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004174:	4b46      	ldr	r3, [pc, #280]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800417a:	4b45      	ldr	r3, [pc, #276]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d07b      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0c9b      	lsrs	r3, r3, #18
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4a41      	ldr	r2, [pc, #260]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d015      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800419e:	4b3c      	ldr	r3, [pc, #240]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	0c5b      	lsrs	r3, r3, #17
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	4a3b      	ldr	r2, [pc, #236]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80041aa:	5cd3      	ldrb	r3, [r2, r3]
 80041ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041b8:	4a38      	ldr	r2, [pc, #224]	; (800429c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e004      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4a34      	ldr	r2, [pc, #208]	; (80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041d4:	4b2e      	ldr	r3, [pc, #184]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e0:	d102      	bne.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	61bb      	str	r3, [r7, #24]
      break;
 80041e6:	e04a      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
      break;
 80041f6:	e042      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004208:	d108      	bne.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	e01f      	b.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004226:	d109      	bne.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004234:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e00f      	b.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004246:	d11c      	bne.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004254:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004258:	61bb      	str	r3, [r7, #24]
      break;
 800425a:	e012      	b.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800425c:	e011      	b.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800425e:	f7ff fe85 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	0b9b      	lsrs	r3, r3, #14
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	3301      	adds	r3, #1
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	61bb      	str	r3, [r7, #24]
      break;
 8004278:	e004      	b.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004282:	bf00      	nop
    }
  }
  return (frequency);
 8004284:	69bb      	ldr	r3, [r7, #24]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	0800965c 	.word	0x0800965c
 8004298:	0800966c 	.word	0x0800966c
 800429c:	007a1200 	.word	0x007a1200
 80042a0:	003d0900 	.word	0x003d0900
 80042a4:	aaaaaaab 	.word	0xaaaaaaab

080042a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd fb56 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fa74 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e03a      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_TIM_Base_Start_IT+0x98>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x58>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x58>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d010      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	e007      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800

080043ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0202 	mvn.w	r2, #2
 8004418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9b4 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9a7 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f9b6 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0204 	mvn.w	r2, #4
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f98a 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f97d 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f98c 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0208 	mvn.w	r2, #8
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2204      	movs	r2, #4
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f960 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f953 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f962 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b10      	cmp	r3, #16
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0210 	mvn.w	r2, #16
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2208      	movs	r2, #8
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f936 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f929 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f938 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc ff06 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa7b 	bl	8004a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8fc 	bl	80047c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0220 	mvn.w	r2, #32
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa46 	bl	8004a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIM_ConfigClockSource+0x1c>
 8004614:	2302      	movs	r3, #2
 8004616:	e0b4      	b.n	8004782 <HAL_TIM_ConfigClockSource+0x186>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	d03e      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	f200 8087 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	f000 8086 	beq.w	800476e <HAL_TIM_ConfigClockSource+0x172>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	d87f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d01a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xa6>
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d87b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d050      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x11a>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d877      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d03c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xfa>
 800467c:	2b50      	cmp	r3, #80	; 0x50
 800467e:	d873      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d058      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x13a>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d86f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d064      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d86b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d060      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d867      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05c      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d05a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	e062      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046b2:	f000 f968 	bl	8004986 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]
      break;
 80046ce:	e04f      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e0:	f000 f951 	bl	8004986 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f2:	609a      	str	r2, [r3, #8]
      break;
 80046f4:	e03c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f8c8 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2150      	movs	r1, #80	; 0x50
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f91f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004714:	e02c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f8e6 	bl	80048f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2160      	movs	r1, #96	; 0x60
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f90f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004734:	e01c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f8a8 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f8ff 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004754:	e00c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 f8f6 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004766:	e003      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e000      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800476e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
	...

080047d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <TIM_Base_SetConfig+0xb8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <TIM_Base_SetConfig+0xbc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_Base_SetConfig+0xc0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <TIM_Base_SetConfig+0xb8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <TIM_Base_SetConfig+0xbc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <TIM_Base_SetConfig+0xc0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <TIM_Base_SetConfig+0xb8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0210 	bic.w	r2, r3, #16
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	031b      	lsls	r3, r3, #12
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e046      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800

08004a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e042      	b.n	8004b3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fc ff7c 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	; 0x24
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f91d 	bl	8004d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d16d      	bne.n	8004c40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_UART_Transmit+0x2c>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e066      	b.n	8004c42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2221      	movs	r2, #33	; 0x21
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b82:	f7fd f8e3 	bl	8001d4c <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d108      	bne.n	8004bb0 <HAL_UART_Transmit+0x6c>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e003      	b.n	8004bb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb8:	e02a      	b.n	8004c10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2180      	movs	r1, #128	; 0x80
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f840 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e036      	b.n	8004c42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	3302      	adds	r3, #2
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e007      	b.n	8004c02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1cf      	bne.n	8004bba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f810 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e006      	b.n	8004c42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b090      	sub	sp, #64	; 0x40
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5a:	e050      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d04c      	beq.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c6a:	f7fd f86f 	bl	8001d4c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d241      	bcs.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c9a:	637a      	str	r2, [r7, #52]	; 0x34
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e5      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3314      	adds	r3, #20
 8004cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3314      	adds	r3, #20
 8004ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cce:	623a      	str	r2, [r7, #32]
 8004cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	69f9      	ldr	r1, [r7, #28]
 8004cd4:	6a3a      	ldr	r2, [r7, #32]
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e5      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e00f      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4013      	ands	r3, r2
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d09f      	beq.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3740      	adds	r7, #64	; 0x40
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d62:	f023 030c 	bic.w	r3, r3, #12
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <UART_SetConfig+0x114>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d103      	bne.n	8004d98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d90:	f7ff f8ec 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	e002      	b.n	8004d9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7ff f8d4 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009a      	lsls	r2, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <UART_SetConfig+0x118>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	0119      	lsls	r1, r3, #4
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009a      	lsls	r2, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <UART_SetConfig+0x118>)
 8004dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2064      	movs	r0, #100	; 0x64
 8004dde:	fb00 f303 	mul.w	r3, r0, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	3332      	adds	r3, #50	; 0x32
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <UART_SetConfig+0x118>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df4:	4419      	add	r1, r3
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009a      	lsls	r2, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <UART_SetConfig+0x118>)
 8004e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2064      	movs	r0, #100	; 0x64
 8004e16:	fb00 f303 	mul.w	r3, r0, r3
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	3332      	adds	r3, #50	; 0x32
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <UART_SetConfig+0x118>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	440a      	add	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	51eb851f 	.word	0x51eb851f

08004e44 <__cvt>:
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4a:	461f      	mov	r7, r3
 8004e4c:	bfbb      	ittet	lt
 8004e4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	461f      	movlt	r7, r3
 8004e54:	2300      	movge	r3, #0
 8004e56:	232d      	movlt	r3, #45	; 0x2d
 8004e58:	b088      	sub	sp, #32
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e60:	7013      	strb	r3, [r2, #0]
 8004e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004e68:	f023 0820 	bic.w	r8, r3, #32
 8004e6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e70:	d005      	beq.n	8004e7e <__cvt+0x3a>
 8004e72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e76:	d100      	bne.n	8004e7a <__cvt+0x36>
 8004e78:	3501      	adds	r5, #1
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e000      	b.n	8004e80 <__cvt+0x3c>
 8004e7e:	2303      	movs	r3, #3
 8004e80:	aa07      	add	r2, sp, #28
 8004e82:	9204      	str	r2, [sp, #16]
 8004e84:	aa06      	add	r2, sp, #24
 8004e86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e8a:	e9cd 3500 	strd	r3, r5, [sp]
 8004e8e:	4622      	mov	r2, r4
 8004e90:	463b      	mov	r3, r7
 8004e92:	f001 f8a5 	bl	8005fe0 <_dtoa_r>
 8004e96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	d102      	bne.n	8004ea4 <__cvt+0x60>
 8004e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ea0:	07db      	lsls	r3, r3, #31
 8004ea2:	d522      	bpl.n	8004eea <__cvt+0xa6>
 8004ea4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ea8:	eb06 0905 	add.w	r9, r6, r5
 8004eac:	d110      	bne.n	8004ed0 <__cvt+0x8c>
 8004eae:	7833      	ldrb	r3, [r6, #0]
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d10a      	bne.n	8004eca <__cvt+0x86>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4639      	mov	r1, r7
 8004ebc:	f7fb fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec0:	b918      	cbnz	r0, 8004eca <__cvt+0x86>
 8004ec2:	f1c5 0501 	rsb	r5, r5, #1
 8004ec6:	f8ca 5000 	str.w	r5, [sl]
 8004eca:	f8da 3000 	ldr.w	r3, [sl]
 8004ece:	4499      	add	r9, r3
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	f7fb fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8004edc:	b108      	cbz	r0, 8004ee2 <__cvt+0x9e>
 8004ede:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ee2:	2230      	movs	r2, #48	; 0x30
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	454b      	cmp	r3, r9
 8004ee8:	d307      	bcc.n	8004efa <__cvt+0xb6>
 8004eea:	4630      	mov	r0, r6
 8004eec:	9b07      	ldr	r3, [sp, #28]
 8004eee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ef0:	1b9b      	subs	r3, r3, r6
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	b008      	add	sp, #32
 8004ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	9107      	str	r1, [sp, #28]
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e7f0      	b.n	8004ee4 <__cvt+0xa0>

08004f02 <__exponent>:
 8004f02:	4603      	mov	r3, r0
 8004f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f06:	2900      	cmp	r1, #0
 8004f08:	f803 2b02 	strb.w	r2, [r3], #2
 8004f0c:	bfb6      	itet	lt
 8004f0e:	222d      	movlt	r2, #45	; 0x2d
 8004f10:	222b      	movge	r2, #43	; 0x2b
 8004f12:	4249      	neglt	r1, r1
 8004f14:	2909      	cmp	r1, #9
 8004f16:	7042      	strb	r2, [r0, #1]
 8004f18:	dd2a      	ble.n	8004f70 <__exponent+0x6e>
 8004f1a:	f10d 0207 	add.w	r2, sp, #7
 8004f1e:	4617      	mov	r7, r2
 8004f20:	260a      	movs	r6, #10
 8004f22:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f26:	4694      	mov	ip, r2
 8004f28:	fb06 1415 	mls	r4, r6, r5, r1
 8004f2c:	3430      	adds	r4, #48	; 0x30
 8004f2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f32:	460c      	mov	r4, r1
 8004f34:	2c63      	cmp	r4, #99	; 0x63
 8004f36:	4629      	mov	r1, r5
 8004f38:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f3c:	dcf1      	bgt.n	8004f22 <__exponent+0x20>
 8004f3e:	3130      	adds	r1, #48	; 0x30
 8004f40:	f1ac 0402 	sub.w	r4, ip, #2
 8004f44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f48:	4622      	mov	r2, r4
 8004f4a:	1c41      	adds	r1, r0, #1
 8004f4c:	42ba      	cmp	r2, r7
 8004f4e:	d30a      	bcc.n	8004f66 <__exponent+0x64>
 8004f50:	f10d 0209 	add.w	r2, sp, #9
 8004f54:	eba2 020c 	sub.w	r2, r2, ip
 8004f58:	42bc      	cmp	r4, r7
 8004f5a:	bf88      	it	hi
 8004f5c:	2200      	movhi	r2, #0
 8004f5e:	4413      	add	r3, r2
 8004f60:	1a18      	subs	r0, r3, r0
 8004f62:	b003      	add	sp, #12
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f6e:	e7ed      	b.n	8004f4c <__exponent+0x4a>
 8004f70:	2330      	movs	r3, #48	; 0x30
 8004f72:	3130      	adds	r1, #48	; 0x30
 8004f74:	7083      	strb	r3, [r0, #2]
 8004f76:	70c1      	strb	r1, [r0, #3]
 8004f78:	1d03      	adds	r3, r0, #4
 8004f7a:	e7f1      	b.n	8004f60 <__exponent+0x5e>

08004f7c <_printf_float>:
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	b091      	sub	sp, #68	; 0x44
 8004f82:	460c      	mov	r4, r1
 8004f84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f88:	4616      	mov	r6, r2
 8004f8a:	461f      	mov	r7, r3
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	f000 ff13 	bl	8005db8 <_localeconv_r>
 8004f92:	6803      	ldr	r3, [r0, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	9309      	str	r3, [sp, #36]	; 0x24
 8004f98:	f7fb f8da 	bl	8000150 <strlen>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8004fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8004fa6:	3307      	adds	r3, #7
 8004fa8:	f023 0307 	bic.w	r3, r3, #7
 8004fac:	f103 0208 	add.w	r2, r3, #8
 8004fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004fb4:	f8d4 b000 	ldr.w	fp, [r4]
 8004fb8:	f8c8 2000 	str.w	r2, [r8]
 8004fbc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004fc0:	4652      	mov	r2, sl
 8004fc2:	4643      	mov	r3, r8
 8004fc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fc8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4b9c      	ldr	r3, [pc, #624]	; (8005248 <_printf_float+0x2cc>)
 8004fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fd8:	f7fb fd18 	bl	8000a0c <__aeabi_dcmpun>
 8004fdc:	bb70      	cbnz	r0, 800503c <_printf_float+0xc0>
 8004fde:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	4b98      	ldr	r3, [pc, #608]	; (8005248 <_printf_float+0x2cc>)
 8004fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fe8:	f7fb fcf2 	bl	80009d0 <__aeabi_dcmple>
 8004fec:	bb30      	cbnz	r0, 800503c <_printf_float+0xc0>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	f7fb fce1 	bl	80009bc <__aeabi_dcmplt>
 8004ffa:	b110      	cbz	r0, 8005002 <_printf_float+0x86>
 8004ffc:	232d      	movs	r3, #45	; 0x2d
 8004ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005002:	4a92      	ldr	r2, [pc, #584]	; (800524c <_printf_float+0x2d0>)
 8005004:	4b92      	ldr	r3, [pc, #584]	; (8005250 <_printf_float+0x2d4>)
 8005006:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800500a:	bf94      	ite	ls
 800500c:	4690      	movls	r8, r2
 800500e:	4698      	movhi	r8, r3
 8005010:	2303      	movs	r3, #3
 8005012:	f04f 0a00 	mov.w	sl, #0
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	f02b 0304 	bic.w	r3, fp, #4
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	4633      	mov	r3, r6
 8005020:	4621      	mov	r1, r4
 8005022:	4628      	mov	r0, r5
 8005024:	9700      	str	r7, [sp, #0]
 8005026:	aa0f      	add	r2, sp, #60	; 0x3c
 8005028:	f000 f9d6 	bl	80053d8 <_printf_common>
 800502c:	3001      	adds	r0, #1
 800502e:	f040 8090 	bne.w	8005152 <_printf_float+0x1d6>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	b011      	add	sp, #68	; 0x44
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	4652      	mov	r2, sl
 800503e:	4643      	mov	r3, r8
 8005040:	4650      	mov	r0, sl
 8005042:	4641      	mov	r1, r8
 8005044:	f7fb fce2 	bl	8000a0c <__aeabi_dcmpun>
 8005048:	b148      	cbz	r0, 800505e <_printf_float+0xe2>
 800504a:	f1b8 0f00 	cmp.w	r8, #0
 800504e:	bfb8      	it	lt
 8005050:	232d      	movlt	r3, #45	; 0x2d
 8005052:	4a80      	ldr	r2, [pc, #512]	; (8005254 <_printf_float+0x2d8>)
 8005054:	bfb8      	it	lt
 8005056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800505a:	4b7f      	ldr	r3, [pc, #508]	; (8005258 <_printf_float+0x2dc>)
 800505c:	e7d3      	b.n	8005006 <_printf_float+0x8a>
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	d142      	bne.n	80050ee <_printf_float+0x172>
 8005068:	2306      	movs	r3, #6
 800506a:	6063      	str	r3, [r4, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	9206      	str	r2, [sp, #24]
 8005070:	aa0e      	add	r2, sp, #56	; 0x38
 8005072:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005076:	aa0d      	add	r2, sp, #52	; 0x34
 8005078:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800507c:	9203      	str	r2, [sp, #12]
 800507e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005082:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	4652      	mov	r2, sl
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	4628      	mov	r0, r5
 8005090:	4643      	mov	r3, r8
 8005092:	910b      	str	r1, [sp, #44]	; 0x2c
 8005094:	f7ff fed6 	bl	8004e44 <__cvt>
 8005098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800509a:	4680      	mov	r8, r0
 800509c:	2947      	cmp	r1, #71	; 0x47
 800509e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050a0:	d108      	bne.n	80050b4 <_printf_float+0x138>
 80050a2:	1cc8      	adds	r0, r1, #3
 80050a4:	db02      	blt.n	80050ac <_printf_float+0x130>
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	4299      	cmp	r1, r3
 80050aa:	dd40      	ble.n	800512e <_printf_float+0x1b2>
 80050ac:	f1a9 0902 	sub.w	r9, r9, #2
 80050b0:	fa5f f989 	uxtb.w	r9, r9
 80050b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80050b8:	d81f      	bhi.n	80050fa <_printf_float+0x17e>
 80050ba:	464a      	mov	r2, r9
 80050bc:	3901      	subs	r1, #1
 80050be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050c2:	910d      	str	r1, [sp, #52]	; 0x34
 80050c4:	f7ff ff1d 	bl	8004f02 <__exponent>
 80050c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ca:	4682      	mov	sl, r0
 80050cc:	1813      	adds	r3, r2, r0
 80050ce:	2a01      	cmp	r2, #1
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	dc02      	bgt.n	80050da <_printf_float+0x15e>
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	07d2      	lsls	r2, r2, #31
 80050d8:	d501      	bpl.n	80050de <_printf_float+0x162>
 80050da:	3301      	adds	r3, #1
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d09b      	beq.n	800501e <_printf_float+0xa2>
 80050e6:	232d      	movs	r3, #45	; 0x2d
 80050e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ec:	e797      	b.n	800501e <_printf_float+0xa2>
 80050ee:	2947      	cmp	r1, #71	; 0x47
 80050f0:	d1bc      	bne.n	800506c <_printf_float+0xf0>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1ba      	bne.n	800506c <_printf_float+0xf0>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7b7      	b.n	800506a <_printf_float+0xee>
 80050fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80050fe:	d118      	bne.n	8005132 <_printf_float+0x1b6>
 8005100:	2900      	cmp	r1, #0
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	dd0b      	ble.n	800511e <_printf_float+0x1a2>
 8005106:	6121      	str	r1, [r4, #16]
 8005108:	b913      	cbnz	r3, 8005110 <_printf_float+0x194>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	07d0      	lsls	r0, r2, #31
 800510e:	d502      	bpl.n	8005116 <_printf_float+0x19a>
 8005110:	3301      	adds	r3, #1
 8005112:	440b      	add	r3, r1
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	65a1      	str	r1, [r4, #88]	; 0x58
 800511c:	e7df      	b.n	80050de <_printf_float+0x162>
 800511e:	b913      	cbnz	r3, 8005126 <_printf_float+0x1aa>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	07d2      	lsls	r2, r2, #31
 8005124:	d501      	bpl.n	800512a <_printf_float+0x1ae>
 8005126:	3302      	adds	r3, #2
 8005128:	e7f4      	b.n	8005114 <_printf_float+0x198>
 800512a:	2301      	movs	r3, #1
 800512c:	e7f2      	b.n	8005114 <_printf_float+0x198>
 800512e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005134:	4299      	cmp	r1, r3
 8005136:	db05      	blt.n	8005144 <_printf_float+0x1c8>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	6121      	str	r1, [r4, #16]
 800513c:	07d8      	lsls	r0, r3, #31
 800513e:	d5ea      	bpl.n	8005116 <_printf_float+0x19a>
 8005140:	1c4b      	adds	r3, r1, #1
 8005142:	e7e7      	b.n	8005114 <_printf_float+0x198>
 8005144:	2900      	cmp	r1, #0
 8005146:	bfcc      	ite	gt
 8005148:	2201      	movgt	r2, #1
 800514a:	f1c1 0202 	rsble	r2, r1, #2
 800514e:	4413      	add	r3, r2
 8005150:	e7e0      	b.n	8005114 <_printf_float+0x198>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	055a      	lsls	r2, r3, #21
 8005156:	d407      	bmi.n	8005168 <_printf_float+0x1ec>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	4642      	mov	r2, r8
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	d12b      	bne.n	80051be <_printf_float+0x242>
 8005166:	e764      	b.n	8005032 <_printf_float+0xb6>
 8005168:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800516c:	f240 80dd 	bls.w	800532a <_printf_float+0x3ae>
 8005170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005174:	2200      	movs	r2, #0
 8005176:	2300      	movs	r3, #0
 8005178:	f7fb fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800517c:	2800      	cmp	r0, #0
 800517e:	d033      	beq.n	80051e8 <_printf_float+0x26c>
 8005180:	2301      	movs	r3, #1
 8005182:	4631      	mov	r1, r6
 8005184:	4628      	mov	r0, r5
 8005186:	4a35      	ldr	r2, [pc, #212]	; (800525c <_printf_float+0x2e0>)
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	f43f af51 	beq.w	8005032 <_printf_float+0xb6>
 8005190:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005194:	429a      	cmp	r2, r3
 8005196:	db02      	blt.n	800519e <_printf_float+0x222>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	07d8      	lsls	r0, r3, #31
 800519c:	d50f      	bpl.n	80051be <_printf_float+0x242>
 800519e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a2:	4631      	mov	r1, r6
 80051a4:	4628      	mov	r0, r5
 80051a6:	47b8      	blx	r7
 80051a8:	3001      	adds	r0, #1
 80051aa:	f43f af42 	beq.w	8005032 <_printf_float+0xb6>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	f104 091a 	add.w	r9, r4, #26
 80051b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b8:	3b01      	subs	r3, #1
 80051ba:	4543      	cmp	r3, r8
 80051bc:	dc09      	bgt.n	80051d2 <_printf_float+0x256>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	079b      	lsls	r3, r3, #30
 80051c2:	f100 8104 	bmi.w	80053ce <_printf_float+0x452>
 80051c6:	68e0      	ldr	r0, [r4, #12]
 80051c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051ca:	4298      	cmp	r0, r3
 80051cc:	bfb8      	it	lt
 80051ce:	4618      	movlt	r0, r3
 80051d0:	e731      	b.n	8005036 <_printf_float+0xba>
 80051d2:	2301      	movs	r3, #1
 80051d4:	464a      	mov	r2, r9
 80051d6:	4631      	mov	r1, r6
 80051d8:	4628      	mov	r0, r5
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f af28 	beq.w	8005032 <_printf_float+0xb6>
 80051e2:	f108 0801 	add.w	r8, r8, #1
 80051e6:	e7e6      	b.n	80051b6 <_printf_float+0x23a>
 80051e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	dc38      	bgt.n	8005260 <_printf_float+0x2e4>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <_printf_float+0x2e0>)
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f af1a 	beq.w	8005032 <_printf_float+0xb6>
 80051fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005202:	4313      	orrs	r3, r2
 8005204:	d102      	bne.n	800520c <_printf_float+0x290>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	07d9      	lsls	r1, r3, #31
 800520a:	d5d8      	bpl.n	80051be <_printf_float+0x242>
 800520c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af0b 	beq.w	8005032 <_printf_float+0xb6>
 800521c:	f04f 0900 	mov.w	r9, #0
 8005220:	f104 0a1a 	add.w	sl, r4, #26
 8005224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005226:	425b      	negs	r3, r3
 8005228:	454b      	cmp	r3, r9
 800522a:	dc01      	bgt.n	8005230 <_printf_float+0x2b4>
 800522c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800522e:	e794      	b.n	800515a <_printf_float+0x1de>
 8005230:	2301      	movs	r3, #1
 8005232:	4652      	mov	r2, sl
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	47b8      	blx	r7
 800523a:	3001      	adds	r0, #1
 800523c:	f43f aef9 	beq.w	8005032 <_printf_float+0xb6>
 8005240:	f109 0901 	add.w	r9, r9, #1
 8005244:	e7ee      	b.n	8005224 <_printf_float+0x2a8>
 8005246:	bf00      	nop
 8005248:	7fefffff 	.word	0x7fefffff
 800524c:	0800966e 	.word	0x0800966e
 8005250:	08009672 	.word	0x08009672
 8005254:	08009676 	.word	0x08009676
 8005258:	0800967a 	.word	0x0800967a
 800525c:	0800967e 	.word	0x0800967e
 8005260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005264:	429a      	cmp	r2, r3
 8005266:	bfa8      	it	ge
 8005268:	461a      	movge	r2, r3
 800526a:	2a00      	cmp	r2, #0
 800526c:	4691      	mov	r9, r2
 800526e:	dc37      	bgt.n	80052e0 <_printf_float+0x364>
 8005270:	f04f 0b00 	mov.w	fp, #0
 8005274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005278:	f104 021a 	add.w	r2, r4, #26
 800527c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005280:	ebaa 0309 	sub.w	r3, sl, r9
 8005284:	455b      	cmp	r3, fp
 8005286:	dc33      	bgt.n	80052f0 <_printf_float+0x374>
 8005288:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800528c:	429a      	cmp	r2, r3
 800528e:	db3b      	blt.n	8005308 <_printf_float+0x38c>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	07da      	lsls	r2, r3, #31
 8005294:	d438      	bmi.n	8005308 <_printf_float+0x38c>
 8005296:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800529a:	eba2 0903 	sub.w	r9, r2, r3
 800529e:	eba2 020a 	sub.w	r2, r2, sl
 80052a2:	4591      	cmp	r9, r2
 80052a4:	bfa8      	it	ge
 80052a6:	4691      	movge	r9, r2
 80052a8:	f1b9 0f00 	cmp.w	r9, #0
 80052ac:	dc34      	bgt.n	8005318 <_printf_float+0x39c>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052b6:	f104 0a1a 	add.w	sl, r4, #26
 80052ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	eba3 0309 	sub.w	r3, r3, r9
 80052c4:	4543      	cmp	r3, r8
 80052c6:	f77f af7a 	ble.w	80051be <_printf_float+0x242>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4652      	mov	r2, sl
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	f43f aeac 	beq.w	8005032 <_printf_float+0xb6>
 80052da:	f108 0801 	add.w	r8, r8, #1
 80052de:	e7ec      	b.n	80052ba <_printf_float+0x33e>
 80052e0:	4613      	mov	r3, r2
 80052e2:	4631      	mov	r1, r6
 80052e4:	4642      	mov	r2, r8
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	d1c0      	bne.n	8005270 <_printf_float+0x2f4>
 80052ee:	e6a0      	b.n	8005032 <_printf_float+0xb6>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f ae99 	beq.w	8005032 <_printf_float+0xb6>
 8005300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005302:	f10b 0b01 	add.w	fp, fp, #1
 8005306:	e7b9      	b.n	800527c <_printf_float+0x300>
 8005308:	4631      	mov	r1, r6
 800530a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d1bf      	bne.n	8005296 <_printf_float+0x31a>
 8005316:	e68c      	b.n	8005032 <_printf_float+0xb6>
 8005318:	464b      	mov	r3, r9
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	eb08 020a 	add.w	r2, r8, sl
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	d1c2      	bne.n	80052ae <_printf_float+0x332>
 8005328:	e683      	b.n	8005032 <_printf_float+0xb6>
 800532a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800532c:	2a01      	cmp	r2, #1
 800532e:	dc01      	bgt.n	8005334 <_printf_float+0x3b8>
 8005330:	07db      	lsls	r3, r3, #31
 8005332:	d539      	bpl.n	80053a8 <_printf_float+0x42c>
 8005334:	2301      	movs	r3, #1
 8005336:	4642      	mov	r2, r8
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f ae77 	beq.w	8005032 <_printf_float+0xb6>
 8005344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	f43f ae6f 	beq.w	8005032 <_printf_float+0xb6>
 8005354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005358:	2200      	movs	r2, #0
 800535a:	2300      	movs	r3, #0
 800535c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005360:	f7fb fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8005364:	b9d8      	cbnz	r0, 800539e <_printf_float+0x422>
 8005366:	f109 33ff 	add.w	r3, r9, #4294967295
 800536a:	f108 0201 	add.w	r2, r8, #1
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	d10e      	bne.n	8005396 <_printf_float+0x41a>
 8005378:	e65b      	b.n	8005032 <_printf_float+0xb6>
 800537a:	2301      	movs	r3, #1
 800537c:	464a      	mov	r2, r9
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	f43f ae54 	beq.w	8005032 <_printf_float+0xb6>
 800538a:	f108 0801 	add.w	r8, r8, #1
 800538e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005390:	3b01      	subs	r3, #1
 8005392:	4543      	cmp	r3, r8
 8005394:	dcf1      	bgt.n	800537a <_printf_float+0x3fe>
 8005396:	4653      	mov	r3, sl
 8005398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800539c:	e6de      	b.n	800515c <_printf_float+0x1e0>
 800539e:	f04f 0800 	mov.w	r8, #0
 80053a2:	f104 091a 	add.w	r9, r4, #26
 80053a6:	e7f2      	b.n	800538e <_printf_float+0x412>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4642      	mov	r2, r8
 80053ac:	e7df      	b.n	800536e <_printf_float+0x3f2>
 80053ae:	2301      	movs	r3, #1
 80053b0:	464a      	mov	r2, r9
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f ae3a 	beq.w	8005032 <_printf_float+0xb6>
 80053be:	f108 0801 	add.w	r8, r8, #1
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80053c6:	1a5b      	subs	r3, r3, r1
 80053c8:	4543      	cmp	r3, r8
 80053ca:	dcf0      	bgt.n	80053ae <_printf_float+0x432>
 80053cc:	e6fb      	b.n	80051c6 <_printf_float+0x24a>
 80053ce:	f04f 0800 	mov.w	r8, #0
 80053d2:	f104 0919 	add.w	r9, r4, #25
 80053d6:	e7f4      	b.n	80053c2 <_printf_float+0x446>

080053d8 <_printf_common>:
 80053d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	4616      	mov	r6, r2
 80053de:	4699      	mov	r9, r3
 80053e0:	688a      	ldr	r2, [r1, #8]
 80053e2:	690b      	ldr	r3, [r1, #16]
 80053e4:	4607      	mov	r7, r0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bfb8      	it	lt
 80053ea:	4613      	movlt	r3, r2
 80053ec:	6033      	str	r3, [r6, #0]
 80053ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053f2:	460c      	mov	r4, r1
 80053f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f8:	b10a      	cbz	r2, 80053fe <_printf_common+0x26>
 80053fa:	3301      	adds	r3, #1
 80053fc:	6033      	str	r3, [r6, #0]
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	0699      	lsls	r1, r3, #26
 8005402:	bf42      	ittt	mi
 8005404:	6833      	ldrmi	r3, [r6, #0]
 8005406:	3302      	addmi	r3, #2
 8005408:	6033      	strmi	r3, [r6, #0]
 800540a:	6825      	ldr	r5, [r4, #0]
 800540c:	f015 0506 	ands.w	r5, r5, #6
 8005410:	d106      	bne.n	8005420 <_printf_common+0x48>
 8005412:	f104 0a19 	add.w	sl, r4, #25
 8005416:	68e3      	ldr	r3, [r4, #12]
 8005418:	6832      	ldr	r2, [r6, #0]
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	42ab      	cmp	r3, r5
 800541e:	dc2b      	bgt.n	8005478 <_printf_common+0xa0>
 8005420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005424:	1e13      	subs	r3, r2, #0
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	bf18      	it	ne
 800542a:	2301      	movne	r3, #1
 800542c:	0692      	lsls	r2, r2, #26
 800542e:	d430      	bmi.n	8005492 <_printf_common+0xba>
 8005430:	4649      	mov	r1, r9
 8005432:	4638      	mov	r0, r7
 8005434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005438:	47c0      	blx	r8
 800543a:	3001      	adds	r0, #1
 800543c:	d023      	beq.n	8005486 <_printf_common+0xae>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	6922      	ldr	r2, [r4, #16]
 8005442:	f003 0306 	and.w	r3, r3, #6
 8005446:	2b04      	cmp	r3, #4
 8005448:	bf14      	ite	ne
 800544a:	2500      	movne	r5, #0
 800544c:	6833      	ldreq	r3, [r6, #0]
 800544e:	f04f 0600 	mov.w	r6, #0
 8005452:	bf08      	it	eq
 8005454:	68e5      	ldreq	r5, [r4, #12]
 8005456:	f104 041a 	add.w	r4, r4, #26
 800545a:	bf08      	it	eq
 800545c:	1aed      	subeq	r5, r5, r3
 800545e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005462:	bf08      	it	eq
 8005464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005468:	4293      	cmp	r3, r2
 800546a:	bfc4      	itt	gt
 800546c:	1a9b      	subgt	r3, r3, r2
 800546e:	18ed      	addgt	r5, r5, r3
 8005470:	42b5      	cmp	r5, r6
 8005472:	d11a      	bne.n	80054aa <_printf_common+0xd2>
 8005474:	2000      	movs	r0, #0
 8005476:	e008      	b.n	800548a <_printf_common+0xb2>
 8005478:	2301      	movs	r3, #1
 800547a:	4652      	mov	r2, sl
 800547c:	4649      	mov	r1, r9
 800547e:	4638      	mov	r0, r7
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d103      	bne.n	800548e <_printf_common+0xb6>
 8005486:	f04f 30ff 	mov.w	r0, #4294967295
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	3501      	adds	r5, #1
 8005490:	e7c1      	b.n	8005416 <_printf_common+0x3e>
 8005492:	2030      	movs	r0, #48	; 0x30
 8005494:	18e1      	adds	r1, r4, r3
 8005496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054a0:	4422      	add	r2, r4
 80054a2:	3302      	adds	r3, #2
 80054a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054a8:	e7c2      	b.n	8005430 <_printf_common+0x58>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4622      	mov	r2, r4
 80054ae:	4649      	mov	r1, r9
 80054b0:	4638      	mov	r0, r7
 80054b2:	47c0      	blx	r8
 80054b4:	3001      	adds	r0, #1
 80054b6:	d0e6      	beq.n	8005486 <_printf_common+0xae>
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7d9      	b.n	8005470 <_printf_common+0x98>

080054bc <_printf_i>:
 80054bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	7e0f      	ldrb	r7, [r1, #24]
 80054c2:	4691      	mov	r9, r2
 80054c4:	2f78      	cmp	r7, #120	; 0x78
 80054c6:	4680      	mov	r8, r0
 80054c8:	460c      	mov	r4, r1
 80054ca:	469a      	mov	sl, r3
 80054cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054d2:	d807      	bhi.n	80054e4 <_printf_i+0x28>
 80054d4:	2f62      	cmp	r7, #98	; 0x62
 80054d6:	d80a      	bhi.n	80054ee <_printf_i+0x32>
 80054d8:	2f00      	cmp	r7, #0
 80054da:	f000 80d5 	beq.w	8005688 <_printf_i+0x1cc>
 80054de:	2f58      	cmp	r7, #88	; 0x58
 80054e0:	f000 80c1 	beq.w	8005666 <_printf_i+0x1aa>
 80054e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054ec:	e03a      	b.n	8005564 <_printf_i+0xa8>
 80054ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054f2:	2b15      	cmp	r3, #21
 80054f4:	d8f6      	bhi.n	80054e4 <_printf_i+0x28>
 80054f6:	a101      	add	r1, pc, #4	; (adr r1, 80054fc <_printf_i+0x40>)
 80054f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005569 	.word	0x08005569
 8005504:	080054e5 	.word	0x080054e5
 8005508:	080054e5 	.word	0x080054e5
 800550c:	080054e5 	.word	0x080054e5
 8005510:	080054e5 	.word	0x080054e5
 8005514:	08005569 	.word	0x08005569
 8005518:	080054e5 	.word	0x080054e5
 800551c:	080054e5 	.word	0x080054e5
 8005520:	080054e5 	.word	0x080054e5
 8005524:	080054e5 	.word	0x080054e5
 8005528:	0800566f 	.word	0x0800566f
 800552c:	08005595 	.word	0x08005595
 8005530:	08005629 	.word	0x08005629
 8005534:	080054e5 	.word	0x080054e5
 8005538:	080054e5 	.word	0x080054e5
 800553c:	08005691 	.word	0x08005691
 8005540:	080054e5 	.word	0x080054e5
 8005544:	08005595 	.word	0x08005595
 8005548:	080054e5 	.word	0x080054e5
 800554c:	080054e5 	.word	0x080054e5
 8005550:	08005631 	.word	0x08005631
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	602a      	str	r2, [r5, #0]
 800555c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005564:	2301      	movs	r3, #1
 8005566:	e0a0      	b.n	80056aa <_printf_i+0x1ee>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	0607      	lsls	r7, r0, #24
 800556e:	f103 0104 	add.w	r1, r3, #4
 8005572:	6029      	str	r1, [r5, #0]
 8005574:	d501      	bpl.n	800557a <_printf_i+0xbe>
 8005576:	681e      	ldr	r6, [r3, #0]
 8005578:	e003      	b.n	8005582 <_printf_i+0xc6>
 800557a:	0646      	lsls	r6, r0, #25
 800557c:	d5fb      	bpl.n	8005576 <_printf_i+0xba>
 800557e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005582:	2e00      	cmp	r6, #0
 8005584:	da03      	bge.n	800558e <_printf_i+0xd2>
 8005586:	232d      	movs	r3, #45	; 0x2d
 8005588:	4276      	negs	r6, r6
 800558a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800558e:	230a      	movs	r3, #10
 8005590:	4859      	ldr	r0, [pc, #356]	; (80056f8 <_printf_i+0x23c>)
 8005592:	e012      	b.n	80055ba <_printf_i+0xfe>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	1d19      	adds	r1, r3, #4
 800559a:	6029      	str	r1, [r5, #0]
 800559c:	0605      	lsls	r5, r0, #24
 800559e:	d501      	bpl.n	80055a4 <_printf_i+0xe8>
 80055a0:	681e      	ldr	r6, [r3, #0]
 80055a2:	e002      	b.n	80055aa <_printf_i+0xee>
 80055a4:	0641      	lsls	r1, r0, #25
 80055a6:	d5fb      	bpl.n	80055a0 <_printf_i+0xe4>
 80055a8:	881e      	ldrh	r6, [r3, #0]
 80055aa:	2f6f      	cmp	r7, #111	; 0x6f
 80055ac:	bf0c      	ite	eq
 80055ae:	2308      	moveq	r3, #8
 80055b0:	230a      	movne	r3, #10
 80055b2:	4851      	ldr	r0, [pc, #324]	; (80056f8 <_printf_i+0x23c>)
 80055b4:	2100      	movs	r1, #0
 80055b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ba:	6865      	ldr	r5, [r4, #4]
 80055bc:	2d00      	cmp	r5, #0
 80055be:	bfa8      	it	ge
 80055c0:	6821      	ldrge	r1, [r4, #0]
 80055c2:	60a5      	str	r5, [r4, #8]
 80055c4:	bfa4      	itt	ge
 80055c6:	f021 0104 	bicge.w	r1, r1, #4
 80055ca:	6021      	strge	r1, [r4, #0]
 80055cc:	b90e      	cbnz	r6, 80055d2 <_printf_i+0x116>
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	d04b      	beq.n	800566a <_printf_i+0x1ae>
 80055d2:	4615      	mov	r5, r2
 80055d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80055d8:	fb03 6711 	mls	r7, r3, r1, r6
 80055dc:	5dc7      	ldrb	r7, [r0, r7]
 80055de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055e2:	4637      	mov	r7, r6
 80055e4:	42bb      	cmp	r3, r7
 80055e6:	460e      	mov	r6, r1
 80055e8:	d9f4      	bls.n	80055d4 <_printf_i+0x118>
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d10b      	bne.n	8005606 <_printf_i+0x14a>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	07de      	lsls	r6, r3, #31
 80055f2:	d508      	bpl.n	8005606 <_printf_i+0x14a>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	6861      	ldr	r1, [r4, #4]
 80055f8:	4299      	cmp	r1, r3
 80055fa:	bfde      	ittt	le
 80055fc:	2330      	movle	r3, #48	; 0x30
 80055fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005602:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005606:	1b52      	subs	r2, r2, r5
 8005608:	6122      	str	r2, [r4, #16]
 800560a:	464b      	mov	r3, r9
 800560c:	4621      	mov	r1, r4
 800560e:	4640      	mov	r0, r8
 8005610:	f8cd a000 	str.w	sl, [sp]
 8005614:	aa03      	add	r2, sp, #12
 8005616:	f7ff fedf 	bl	80053d8 <_printf_common>
 800561a:	3001      	adds	r0, #1
 800561c:	d14a      	bne.n	80056b4 <_printf_i+0x1f8>
 800561e:	f04f 30ff 	mov.w	r0, #4294967295
 8005622:	b004      	add	sp, #16
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f043 0320 	orr.w	r3, r3, #32
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	2778      	movs	r7, #120	; 0x78
 8005632:	4832      	ldr	r0, [pc, #200]	; (80056fc <_printf_i+0x240>)
 8005634:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6829      	ldr	r1, [r5, #0]
 800563c:	061f      	lsls	r7, r3, #24
 800563e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005642:	d402      	bmi.n	800564a <_printf_i+0x18e>
 8005644:	065f      	lsls	r7, r3, #25
 8005646:	bf48      	it	mi
 8005648:	b2b6      	uxthmi	r6, r6
 800564a:	07df      	lsls	r7, r3, #31
 800564c:	bf48      	it	mi
 800564e:	f043 0320 	orrmi.w	r3, r3, #32
 8005652:	6029      	str	r1, [r5, #0]
 8005654:	bf48      	it	mi
 8005656:	6023      	strmi	r3, [r4, #0]
 8005658:	b91e      	cbnz	r6, 8005662 <_printf_i+0x1a6>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f023 0320 	bic.w	r3, r3, #32
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	2310      	movs	r3, #16
 8005664:	e7a6      	b.n	80055b4 <_printf_i+0xf8>
 8005666:	4824      	ldr	r0, [pc, #144]	; (80056f8 <_printf_i+0x23c>)
 8005668:	e7e4      	b.n	8005634 <_printf_i+0x178>
 800566a:	4615      	mov	r5, r2
 800566c:	e7bd      	b.n	80055ea <_printf_i+0x12e>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	6826      	ldr	r6, [r4, #0]
 8005672:	1d18      	adds	r0, r3, #4
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	6028      	str	r0, [r5, #0]
 8005678:	0635      	lsls	r5, r6, #24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	d501      	bpl.n	8005682 <_printf_i+0x1c6>
 800567e:	6019      	str	r1, [r3, #0]
 8005680:	e002      	b.n	8005688 <_printf_i+0x1cc>
 8005682:	0670      	lsls	r0, r6, #25
 8005684:	d5fb      	bpl.n	800567e <_printf_i+0x1c2>
 8005686:	8019      	strh	r1, [r3, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	4615      	mov	r5, r2
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	e7bc      	b.n	800560a <_printf_i+0x14e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	2100      	movs	r1, #0
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	602a      	str	r2, [r5, #0]
 8005698:	681d      	ldr	r5, [r3, #0]
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	4628      	mov	r0, r5
 800569e:	f000 fc02 	bl	8005ea6 <memchr>
 80056a2:	b108      	cbz	r0, 80056a8 <_printf_i+0x1ec>
 80056a4:	1b40      	subs	r0, r0, r5
 80056a6:	6060      	str	r0, [r4, #4]
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2300      	movs	r3, #0
 80056ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b2:	e7aa      	b.n	800560a <_printf_i+0x14e>
 80056b4:	462a      	mov	r2, r5
 80056b6:	4649      	mov	r1, r9
 80056b8:	4640      	mov	r0, r8
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	47d0      	blx	sl
 80056be:	3001      	adds	r0, #1
 80056c0:	d0ad      	beq.n	800561e <_printf_i+0x162>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	079b      	lsls	r3, r3, #30
 80056c6:	d413      	bmi.n	80056f0 <_printf_i+0x234>
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bfb8      	it	lt
 80056d0:	4618      	movlt	r0, r3
 80056d2:	e7a6      	b.n	8005622 <_printf_i+0x166>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4632      	mov	r2, r6
 80056d8:	4649      	mov	r1, r9
 80056da:	4640      	mov	r0, r8
 80056dc:	47d0      	blx	sl
 80056de:	3001      	adds	r0, #1
 80056e0:	d09d      	beq.n	800561e <_printf_i+0x162>
 80056e2:	3501      	adds	r5, #1
 80056e4:	68e3      	ldr	r3, [r4, #12]
 80056e6:	9903      	ldr	r1, [sp, #12]
 80056e8:	1a5b      	subs	r3, r3, r1
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	dcf2      	bgt.n	80056d4 <_printf_i+0x218>
 80056ee:	e7eb      	b.n	80056c8 <_printf_i+0x20c>
 80056f0:	2500      	movs	r5, #0
 80056f2:	f104 0619 	add.w	r6, r4, #25
 80056f6:	e7f5      	b.n	80056e4 <_printf_i+0x228>
 80056f8:	08009680 	.word	0x08009680
 80056fc:	08009691 	.word	0x08009691

08005700 <_scanf_float>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	688b      	ldr	r3, [r1, #8]
 800570a:	4617      	mov	r7, r2
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005712:	bf85      	ittet	hi
 8005714:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005718:	195b      	addhi	r3, r3, r5
 800571a:	2300      	movls	r3, #0
 800571c:	9302      	strhi	r3, [sp, #8]
 800571e:	bf88      	it	hi
 8005720:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005724:	468b      	mov	fp, r1
 8005726:	f04f 0500 	mov.w	r5, #0
 800572a:	bf8c      	ite	hi
 800572c:	608b      	strhi	r3, [r1, #8]
 800572e:	9302      	strls	r3, [sp, #8]
 8005730:	680b      	ldr	r3, [r1, #0]
 8005732:	4680      	mov	r8, r0
 8005734:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005738:	f84b 3b1c 	str.w	r3, [fp], #28
 800573c:	460c      	mov	r4, r1
 800573e:	465e      	mov	r6, fp
 8005740:	46aa      	mov	sl, r5
 8005742:	46a9      	mov	r9, r5
 8005744:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005748:	9501      	str	r5, [sp, #4]
 800574a:	68a2      	ldr	r2, [r4, #8]
 800574c:	b152      	cbz	r2, 8005764 <_scanf_float+0x64>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b4e      	cmp	r3, #78	; 0x4e
 8005754:	d864      	bhi.n	8005820 <_scanf_float+0x120>
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d83c      	bhi.n	80057d4 <_scanf_float+0xd4>
 800575a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800575e:	b2c8      	uxtb	r0, r1
 8005760:	280e      	cmp	r0, #14
 8005762:	d93a      	bls.n	80057da <_scanf_float+0xda>
 8005764:	f1b9 0f00 	cmp.w	r9, #0
 8005768:	d003      	beq.n	8005772 <_scanf_float+0x72>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005776:	f1ba 0f01 	cmp.w	sl, #1
 800577a:	f200 8113 	bhi.w	80059a4 <_scanf_float+0x2a4>
 800577e:	455e      	cmp	r6, fp
 8005780:	f200 8105 	bhi.w	800598e <_scanf_float+0x28e>
 8005784:	2501      	movs	r5, #1
 8005786:	4628      	mov	r0, r5
 8005788:	b007      	add	sp, #28
 800578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005792:	2a0d      	cmp	r2, #13
 8005794:	d8e6      	bhi.n	8005764 <_scanf_float+0x64>
 8005796:	a101      	add	r1, pc, #4	; (adr r1, 800579c <_scanf_float+0x9c>)
 8005798:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800579c:	080058db 	.word	0x080058db
 80057a0:	08005765 	.word	0x08005765
 80057a4:	08005765 	.word	0x08005765
 80057a8:	08005765 	.word	0x08005765
 80057ac:	0800593b 	.word	0x0800593b
 80057b0:	08005913 	.word	0x08005913
 80057b4:	08005765 	.word	0x08005765
 80057b8:	08005765 	.word	0x08005765
 80057bc:	080058e9 	.word	0x080058e9
 80057c0:	08005765 	.word	0x08005765
 80057c4:	08005765 	.word	0x08005765
 80057c8:	08005765 	.word	0x08005765
 80057cc:	08005765 	.word	0x08005765
 80057d0:	080058a1 	.word	0x080058a1
 80057d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80057d8:	e7db      	b.n	8005792 <_scanf_float+0x92>
 80057da:	290e      	cmp	r1, #14
 80057dc:	d8c2      	bhi.n	8005764 <_scanf_float+0x64>
 80057de:	a001      	add	r0, pc, #4	; (adr r0, 80057e4 <_scanf_float+0xe4>)
 80057e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057e4:	08005893 	.word	0x08005893
 80057e8:	08005765 	.word	0x08005765
 80057ec:	08005893 	.word	0x08005893
 80057f0:	08005927 	.word	0x08005927
 80057f4:	08005765 	.word	0x08005765
 80057f8:	08005841 	.word	0x08005841
 80057fc:	0800587d 	.word	0x0800587d
 8005800:	0800587d 	.word	0x0800587d
 8005804:	0800587d 	.word	0x0800587d
 8005808:	0800587d 	.word	0x0800587d
 800580c:	0800587d 	.word	0x0800587d
 8005810:	0800587d 	.word	0x0800587d
 8005814:	0800587d 	.word	0x0800587d
 8005818:	0800587d 	.word	0x0800587d
 800581c:	0800587d 	.word	0x0800587d
 8005820:	2b6e      	cmp	r3, #110	; 0x6e
 8005822:	d809      	bhi.n	8005838 <_scanf_float+0x138>
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d8b2      	bhi.n	800578e <_scanf_float+0x8e>
 8005828:	2b54      	cmp	r3, #84	; 0x54
 800582a:	d077      	beq.n	800591c <_scanf_float+0x21c>
 800582c:	2b59      	cmp	r3, #89	; 0x59
 800582e:	d199      	bne.n	8005764 <_scanf_float+0x64>
 8005830:	2d07      	cmp	r5, #7
 8005832:	d197      	bne.n	8005764 <_scanf_float+0x64>
 8005834:	2508      	movs	r5, #8
 8005836:	e029      	b.n	800588c <_scanf_float+0x18c>
 8005838:	2b74      	cmp	r3, #116	; 0x74
 800583a:	d06f      	beq.n	800591c <_scanf_float+0x21c>
 800583c:	2b79      	cmp	r3, #121	; 0x79
 800583e:	e7f6      	b.n	800582e <_scanf_float+0x12e>
 8005840:	6821      	ldr	r1, [r4, #0]
 8005842:	05c8      	lsls	r0, r1, #23
 8005844:	d51a      	bpl.n	800587c <_scanf_float+0x17c>
 8005846:	9b02      	ldr	r3, [sp, #8]
 8005848:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800584c:	6021      	str	r1, [r4, #0]
 800584e:	f109 0901 	add.w	r9, r9, #1
 8005852:	b11b      	cbz	r3, 800585c <_scanf_float+0x15c>
 8005854:	3b01      	subs	r3, #1
 8005856:	3201      	adds	r2, #1
 8005858:	9302      	str	r3, [sp, #8]
 800585a:	60a2      	str	r2, [r4, #8]
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	3b01      	subs	r3, #1
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	3301      	adds	r3, #1
 8005866:	6123      	str	r3, [r4, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3b01      	subs	r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	f340 8084 	ble.w	800597c <_scanf_float+0x27c>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	3301      	adds	r3, #1
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	e766      	b.n	800574a <_scanf_float+0x4a>
 800587c:	eb1a 0f05 	cmn.w	sl, r5
 8005880:	f47f af70 	bne.w	8005764 <_scanf_float+0x64>
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	f806 3b01 	strb.w	r3, [r6], #1
 8005890:	e7e4      	b.n	800585c <_scanf_float+0x15c>
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	0610      	lsls	r0, r2, #24
 8005896:	f57f af65 	bpl.w	8005764 <_scanf_float+0x64>
 800589a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800589e:	e7f4      	b.n	800588a <_scanf_float+0x18a>
 80058a0:	f1ba 0f00 	cmp.w	sl, #0
 80058a4:	d10e      	bne.n	80058c4 <_scanf_float+0x1c4>
 80058a6:	f1b9 0f00 	cmp.w	r9, #0
 80058aa:	d10e      	bne.n	80058ca <_scanf_float+0x1ca>
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058b6:	d108      	bne.n	80058ca <_scanf_float+0x1ca>
 80058b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058bc:	f04f 0a01 	mov.w	sl, #1
 80058c0:	6022      	str	r2, [r4, #0]
 80058c2:	e7e3      	b.n	800588c <_scanf_float+0x18c>
 80058c4:	f1ba 0f02 	cmp.w	sl, #2
 80058c8:	d055      	beq.n	8005976 <_scanf_float+0x276>
 80058ca:	2d01      	cmp	r5, #1
 80058cc:	d002      	beq.n	80058d4 <_scanf_float+0x1d4>
 80058ce:	2d04      	cmp	r5, #4
 80058d0:	f47f af48 	bne.w	8005764 <_scanf_float+0x64>
 80058d4:	3501      	adds	r5, #1
 80058d6:	b2ed      	uxtb	r5, r5
 80058d8:	e7d8      	b.n	800588c <_scanf_float+0x18c>
 80058da:	f1ba 0f01 	cmp.w	sl, #1
 80058de:	f47f af41 	bne.w	8005764 <_scanf_float+0x64>
 80058e2:	f04f 0a02 	mov.w	sl, #2
 80058e6:	e7d1      	b.n	800588c <_scanf_float+0x18c>
 80058e8:	b97d      	cbnz	r5, 800590a <_scanf_float+0x20a>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	f47f af3c 	bne.w	800576a <_scanf_float+0x6a>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058fc:	f47f af39 	bne.w	8005772 <_scanf_float+0x72>
 8005900:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005904:	2501      	movs	r5, #1
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	e7c0      	b.n	800588c <_scanf_float+0x18c>
 800590a:	2d03      	cmp	r5, #3
 800590c:	d0e2      	beq.n	80058d4 <_scanf_float+0x1d4>
 800590e:	2d05      	cmp	r5, #5
 8005910:	e7de      	b.n	80058d0 <_scanf_float+0x1d0>
 8005912:	2d02      	cmp	r5, #2
 8005914:	f47f af26 	bne.w	8005764 <_scanf_float+0x64>
 8005918:	2503      	movs	r5, #3
 800591a:	e7b7      	b.n	800588c <_scanf_float+0x18c>
 800591c:	2d06      	cmp	r5, #6
 800591e:	f47f af21 	bne.w	8005764 <_scanf_float+0x64>
 8005922:	2507      	movs	r5, #7
 8005924:	e7b2      	b.n	800588c <_scanf_float+0x18c>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	0591      	lsls	r1, r2, #22
 800592a:	f57f af1b 	bpl.w	8005764 <_scanf_float+0x64>
 800592e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	f8cd 9004 	str.w	r9, [sp, #4]
 8005938:	e7a8      	b.n	800588c <_scanf_float+0x18c>
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005940:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005944:	d006      	beq.n	8005954 <_scanf_float+0x254>
 8005946:	0550      	lsls	r0, r2, #21
 8005948:	f57f af0c 	bpl.w	8005764 <_scanf_float+0x64>
 800594c:	f1b9 0f00 	cmp.w	r9, #0
 8005950:	f43f af0f 	beq.w	8005772 <_scanf_float+0x72>
 8005954:	0591      	lsls	r1, r2, #22
 8005956:	bf58      	it	pl
 8005958:	9901      	ldrpl	r1, [sp, #4]
 800595a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800595e:	bf58      	it	pl
 8005960:	eba9 0101 	subpl.w	r1, r9, r1
 8005964:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005968:	f04f 0900 	mov.w	r9, #0
 800596c:	bf58      	it	pl
 800596e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005972:	6022      	str	r2, [r4, #0]
 8005974:	e78a      	b.n	800588c <_scanf_float+0x18c>
 8005976:	f04f 0a03 	mov.w	sl, #3
 800597a:	e787      	b.n	800588c <_scanf_float+0x18c>
 800597c:	4639      	mov	r1, r7
 800597e:	4640      	mov	r0, r8
 8005980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005984:	4798      	blx	r3
 8005986:	2800      	cmp	r0, #0
 8005988:	f43f aedf 	beq.w	800574a <_scanf_float+0x4a>
 800598c:	e6ea      	b.n	8005764 <_scanf_float+0x64>
 800598e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005992:	463a      	mov	r2, r7
 8005994:	4640      	mov	r0, r8
 8005996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800599a:	4798      	blx	r3
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	3b01      	subs	r3, #1
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	e6ec      	b.n	800577e <_scanf_float+0x7e>
 80059a4:	1e6b      	subs	r3, r5, #1
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d825      	bhi.n	80059f6 <_scanf_float+0x2f6>
 80059aa:	2d02      	cmp	r5, #2
 80059ac:	d836      	bhi.n	8005a1c <_scanf_float+0x31c>
 80059ae:	455e      	cmp	r6, fp
 80059b0:	f67f aee8 	bls.w	8005784 <_scanf_float+0x84>
 80059b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059b8:	463a      	mov	r2, r7
 80059ba:	4640      	mov	r0, r8
 80059bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059c0:	4798      	blx	r3
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	e7f1      	b.n	80059ae <_scanf_float+0x2ae>
 80059ca:	9802      	ldr	r0, [sp, #8]
 80059cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80059d4:	463a      	mov	r2, r7
 80059d6:	9002      	str	r0, [sp, #8]
 80059d8:	4640      	mov	r0, r8
 80059da:	4798      	blx	r3
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	3b01      	subs	r3, #1
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059e6:	fa5f fa8a 	uxtb.w	sl, sl
 80059ea:	f1ba 0f02 	cmp.w	sl, #2
 80059ee:	d1ec      	bne.n	80059ca <_scanf_float+0x2ca>
 80059f0:	3d03      	subs	r5, #3
 80059f2:	b2ed      	uxtb	r5, r5
 80059f4:	1b76      	subs	r6, r6, r5
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	05da      	lsls	r2, r3, #23
 80059fa:	d52f      	bpl.n	8005a5c <_scanf_float+0x35c>
 80059fc:	055b      	lsls	r3, r3, #21
 80059fe:	d510      	bpl.n	8005a22 <_scanf_float+0x322>
 8005a00:	455e      	cmp	r6, fp
 8005a02:	f67f aebf 	bls.w	8005784 <_scanf_float+0x84>
 8005a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a12:	4798      	blx	r3
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	e7f1      	b.n	8005a00 <_scanf_float+0x300>
 8005a1c:	46aa      	mov	sl, r5
 8005a1e:	9602      	str	r6, [sp, #8]
 8005a20:	e7df      	b.n	80059e2 <_scanf_float+0x2e2>
 8005a22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	2965      	cmp	r1, #101	; 0x65
 8005a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	d00c      	beq.n	8005a50 <_scanf_float+0x350>
 8005a36:	2945      	cmp	r1, #69	; 0x45
 8005a38:	d00a      	beq.n	8005a50 <_scanf_float+0x350>
 8005a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a3e:	463a      	mov	r2, r7
 8005a40:	4640      	mov	r0, r8
 8005a42:	4798      	blx	r3
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	1eb5      	subs	r5, r6, #2
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	463a      	mov	r2, r7
 8005a52:	4640      	mov	r0, r8
 8005a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a58:	4798      	blx	r3
 8005a5a:	462e      	mov	r6, r5
 8005a5c:	6825      	ldr	r5, [r4, #0]
 8005a5e:	f015 0510 	ands.w	r5, r5, #16
 8005a62:	d155      	bne.n	8005b10 <_scanf_float+0x410>
 8005a64:	7035      	strb	r5, [r6, #0]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a70:	d11d      	bne.n	8005aae <_scanf_float+0x3ae>
 8005a72:	9b01      	ldr	r3, [sp, #4]
 8005a74:	454b      	cmp	r3, r9
 8005a76:	eba3 0209 	sub.w	r2, r3, r9
 8005a7a:	d125      	bne.n	8005ac8 <_scanf_float+0x3c8>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4659      	mov	r1, fp
 8005a80:	4640      	mov	r0, r8
 8005a82:	f002 fc41 	bl	8008308 <_strtod_r>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	f8d4 c000 	ldr.w	ip, [r4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f01c 0f02 	tst.w	ip, #2
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	f103 0204 	add.w	r2, r3, #4
 8005a9a:	d020      	beq.n	8005ade <_scanf_float+0x3de>
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	600a      	str	r2, [r1, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	e9c3 6700 	strd	r6, r7, [r3]
 8005aa6:	68e3      	ldr	r3, [r4, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60e3      	str	r3, [r4, #12]
 8005aac:	e66b      	b.n	8005786 <_scanf_float+0x86>
 8005aae:	9b04      	ldr	r3, [sp, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0e3      	beq.n	8005a7c <_scanf_float+0x37c>
 8005ab4:	9905      	ldr	r1, [sp, #20]
 8005ab6:	230a      	movs	r3, #10
 8005ab8:	462a      	mov	r2, r5
 8005aba:	4640      	mov	r0, r8
 8005abc:	3101      	adds	r1, #1
 8005abe:	f002 fca7 	bl	8008410 <_strtol_r>
 8005ac2:	9b04      	ldr	r3, [sp, #16]
 8005ac4:	9e05      	ldr	r6, [sp, #20]
 8005ac6:	1ac2      	subs	r2, r0, r3
 8005ac8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005acc:	429e      	cmp	r6, r3
 8005ace:	bf28      	it	cs
 8005ad0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	490f      	ldr	r1, [pc, #60]	; (8005b14 <_scanf_float+0x414>)
 8005ad8:	f000 f8e2 	bl	8005ca0 <siprintf>
 8005adc:	e7ce      	b.n	8005a7c <_scanf_float+0x37c>
 8005ade:	f01c 0f04 	tst.w	ip, #4
 8005ae2:	d1db      	bne.n	8005a9c <_scanf_float+0x39c>
 8005ae4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005ae8:	f8cc 2000 	str.w	r2, [ip]
 8005aec:	f8d3 8000 	ldr.w	r8, [r3]
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	f7fa ff8a 	bl	8000a0c <__aeabi_dcmpun>
 8005af8:	b128      	cbz	r0, 8005b06 <_scanf_float+0x406>
 8005afa:	4807      	ldr	r0, [pc, #28]	; (8005b18 <_scanf_float+0x418>)
 8005afc:	f000 f9e2 	bl	8005ec4 <nanf>
 8005b00:	f8c8 0000 	str.w	r0, [r8]
 8005b04:	e7cf      	b.n	8005aa6 <_scanf_float+0x3a6>
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fa ffdd 	bl	8000ac8 <__aeabi_d2f>
 8005b0e:	e7f7      	b.n	8005b00 <_scanf_float+0x400>
 8005b10:	2500      	movs	r5, #0
 8005b12:	e638      	b.n	8005786 <_scanf_float+0x86>
 8005b14:	080096a2 	.word	0x080096a2
 8005b18:	08009a35 	.word	0x08009a35

08005b1c <std>:
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	4604      	mov	r4, r0
 8005b22:	e9c0 3300 	strd	r3, r3, [r0]
 8005b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b2a:	6083      	str	r3, [r0, #8]
 8005b2c:	8181      	strh	r1, [r0, #12]
 8005b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b30:	81c2      	strh	r2, [r0, #14]
 8005b32:	6183      	str	r3, [r0, #24]
 8005b34:	4619      	mov	r1, r3
 8005b36:	2208      	movs	r2, #8
 8005b38:	305c      	adds	r0, #92	; 0x5c
 8005b3a:	f000 f935 	bl	8005da8 <memset>
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <std+0x58>)
 8005b40:	6224      	str	r4, [r4, #32]
 8005b42:	6263      	str	r3, [r4, #36]	; 0x24
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <std+0x5c>)
 8005b46:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <std+0x60>)
 8005b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <std+0x64>)
 8005b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <std+0x68>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d006      	beq.n	8005b64 <std+0x48>
 8005b56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b5a:	4294      	cmp	r4, r2
 8005b5c:	d002      	beq.n	8005b64 <std+0x48>
 8005b5e:	33d0      	adds	r3, #208	; 0xd0
 8005b60:	429c      	cmp	r4, r3
 8005b62:	d105      	bne.n	8005b70 <std+0x54>
 8005b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f000 b998 	b.w	8005ea0 <__retarget_lock_init_recursive>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	bf00      	nop
 8005b74:	08005ce1 	.word	0x08005ce1
 8005b78:	08005d03 	.word	0x08005d03
 8005b7c:	08005d3b 	.word	0x08005d3b
 8005b80:	08005d5f 	.word	0x08005d5f
 8005b84:	2000035c 	.word	0x2000035c

08005b88 <stdio_exit_handler>:
 8005b88:	4a02      	ldr	r2, [pc, #8]	; (8005b94 <stdio_exit_handler+0xc>)
 8005b8a:	4903      	ldr	r1, [pc, #12]	; (8005b98 <stdio_exit_handler+0x10>)
 8005b8c:	4803      	ldr	r0, [pc, #12]	; (8005b9c <stdio_exit_handler+0x14>)
 8005b8e:	f000 b869 	b.w	8005c64 <_fwalk_sglue>
 8005b92:	bf00      	nop
 8005b94:	2000000c 	.word	0x2000000c
 8005b98:	080087c9 	.word	0x080087c9
 8005b9c:	20000018 	.word	0x20000018

08005ba0 <cleanup_stdio>:
 8005ba0:	6841      	ldr	r1, [r0, #4]
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <cleanup_stdio+0x34>)
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	4604      	mov	r4, r0
 8005baa:	d001      	beq.n	8005bb0 <cleanup_stdio+0x10>
 8005bac:	f002 fe0c 	bl	80087c8 <_fflush_r>
 8005bb0:	68a1      	ldr	r1, [r4, #8]
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <cleanup_stdio+0x38>)
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	d002      	beq.n	8005bbe <cleanup_stdio+0x1e>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f002 fe05 	bl	80087c8 <_fflush_r>
 8005bbe:	68e1      	ldr	r1, [r4, #12]
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <cleanup_stdio+0x3c>)
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	d004      	beq.n	8005bd0 <cleanup_stdio+0x30>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bcc:	f002 bdfc 	b.w	80087c8 <_fflush_r>
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000035c 	.word	0x2000035c
 8005bd8:	200003c4 	.word	0x200003c4
 8005bdc:	2000042c 	.word	0x2000042c

08005be0 <global_stdio_init.part.0>:
 8005be0:	b510      	push	{r4, lr}
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <global_stdio_init.part.0+0x30>)
 8005be4:	4c0b      	ldr	r4, [pc, #44]	; (8005c14 <global_stdio_init.part.0+0x34>)
 8005be6:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <global_stdio_init.part.0+0x38>)
 8005be8:	4620      	mov	r0, r4
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	2104      	movs	r1, #4
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f7ff ff94 	bl	8005b1c <std>
 8005bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	2109      	movs	r1, #9
 8005bfc:	f7ff ff8e 	bl	8005b1c <std>
 8005c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c04:	2202      	movs	r2, #2
 8005c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0a:	2112      	movs	r1, #18
 8005c0c:	f7ff bf86 	b.w	8005b1c <std>
 8005c10:	20000494 	.word	0x20000494
 8005c14:	2000035c 	.word	0x2000035c
 8005c18:	08005b89 	.word	0x08005b89

08005c1c <__sfp_lock_acquire>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__sfp_lock_acquire+0x8>)
 8005c1e:	f000 b940 	b.w	8005ea2 <__retarget_lock_acquire_recursive>
 8005c22:	bf00      	nop
 8005c24:	2000049d 	.word	0x2000049d

08005c28 <__sfp_lock_release>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__sfp_lock_release+0x8>)
 8005c2a:	f000 b93b 	b.w	8005ea4 <__retarget_lock_release_recursive>
 8005c2e:	bf00      	nop
 8005c30:	2000049d 	.word	0x2000049d

08005c34 <__sinit>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	f7ff fff0 	bl	8005c1c <__sfp_lock_acquire>
 8005c3c:	6a23      	ldr	r3, [r4, #32]
 8005c3e:	b11b      	cbz	r3, 8005c48 <__sinit+0x14>
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c44:	f7ff bff0 	b.w	8005c28 <__sfp_lock_release>
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <__sinit+0x28>)
 8005c4a:	6223      	str	r3, [r4, #32]
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <__sinit+0x2c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f5      	bne.n	8005c40 <__sinit+0xc>
 8005c54:	f7ff ffc4 	bl	8005be0 <global_stdio_init.part.0>
 8005c58:	e7f2      	b.n	8005c40 <__sinit+0xc>
 8005c5a:	bf00      	nop
 8005c5c:	08005ba1 	.word	0x08005ba1
 8005c60:	20000494 	.word	0x20000494

08005c64 <_fwalk_sglue>:
 8005c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c68:	4607      	mov	r7, r0
 8005c6a:	4688      	mov	r8, r1
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	2600      	movs	r6, #0
 8005c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c74:	f1b9 0901 	subs.w	r9, r9, #1
 8005c78:	d505      	bpl.n	8005c86 <_fwalk_sglue+0x22>
 8005c7a:	6824      	ldr	r4, [r4, #0]
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	d1f7      	bne.n	8005c70 <_fwalk_sglue+0xc>
 8005c80:	4630      	mov	r0, r6
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d907      	bls.n	8005c9c <_fwalk_sglue+0x38>
 8005c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c90:	3301      	adds	r3, #1
 8005c92:	d003      	beq.n	8005c9c <_fwalk_sglue+0x38>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c0      	blx	r8
 8005c9a:	4306      	orrs	r6, r0
 8005c9c:	3568      	adds	r5, #104	; 0x68
 8005c9e:	e7e9      	b.n	8005c74 <_fwalk_sglue+0x10>

08005ca0 <siprintf>:
 8005ca0:	b40e      	push	{r1, r2, r3}
 8005ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ca6:	b500      	push	{lr}
 8005ca8:	b09c      	sub	sp, #112	; 0x70
 8005caa:	ab1d      	add	r3, sp, #116	; 0x74
 8005cac:	9002      	str	r0, [sp, #8]
 8005cae:	9006      	str	r0, [sp, #24]
 8005cb0:	9107      	str	r1, [sp, #28]
 8005cb2:	9104      	str	r1, [sp, #16]
 8005cb4:	4808      	ldr	r0, [pc, #32]	; (8005cd8 <siprintf+0x38>)
 8005cb6:	4909      	ldr	r1, [pc, #36]	; (8005cdc <siprintf+0x3c>)
 8005cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cbc:	9105      	str	r1, [sp, #20]
 8005cbe:	6800      	ldr	r0, [r0, #0]
 8005cc0:	a902      	add	r1, sp, #8
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	f002 fc00 	bl	80084c8 <_svfiprintf_r>
 8005cc8:	2200      	movs	r2, #0
 8005cca:	9b02      	ldr	r3, [sp, #8]
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	b01c      	add	sp, #112	; 0x70
 8005cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd4:	b003      	add	sp, #12
 8005cd6:	4770      	bx	lr
 8005cd8:	20000064 	.word	0x20000064
 8005cdc:	ffff0208 	.word	0xffff0208

08005ce0 <__sread>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	f000 f88c 	bl	8005e04 <_read_r>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	bfab      	itete	ge
 8005cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cf4:	181b      	addge	r3, r3, r0
 8005cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cfa:	bfac      	ite	ge
 8005cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cfe:	81a3      	strhlt	r3, [r4, #12]
 8005d00:	bd10      	pop	{r4, pc}

08005d02 <__swrite>:
 8005d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	461f      	mov	r7, r3
 8005d08:	898b      	ldrh	r3, [r1, #12]
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	05db      	lsls	r3, r3, #23
 8005d0e:	460c      	mov	r4, r1
 8005d10:	4616      	mov	r6, r2
 8005d12:	d505      	bpl.n	8005d20 <__swrite+0x1e>
 8005d14:	2302      	movs	r3, #2
 8005d16:	2200      	movs	r2, #0
 8005d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1c:	f000 f860 	bl	8005de0 <_lseek_r>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	4632      	mov	r2, r6
 8005d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d36:	f000 b877 	b.w	8005e28 <_write_r>

08005d3a <__sseek>:
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d42:	f000 f84d 	bl	8005de0 <_lseek_r>
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	bf15      	itete	ne
 8005d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d56:	81a3      	strheq	r3, [r4, #12]
 8005d58:	bf18      	it	ne
 8005d5a:	81a3      	strhne	r3, [r4, #12]
 8005d5c:	bd10      	pop	{r4, pc}

08005d5e <__sclose>:
 8005d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d62:	f000 b82d 	b.w	8005dc0 <_close_r>
	...

08005d68 <_vsiprintf_r>:
 8005d68:	b500      	push	{lr}
 8005d6a:	b09b      	sub	sp, #108	; 0x6c
 8005d6c:	9100      	str	r1, [sp, #0]
 8005d6e:	9104      	str	r1, [sp, #16]
 8005d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	9102      	str	r1, [sp, #8]
 8005d78:	4905      	ldr	r1, [pc, #20]	; (8005d90 <_vsiprintf_r+0x28>)
 8005d7a:	9103      	str	r1, [sp, #12]
 8005d7c:	4669      	mov	r1, sp
 8005d7e:	f002 fba3 	bl	80084c8 <_svfiprintf_r>
 8005d82:	2200      	movs	r2, #0
 8005d84:	9b00      	ldr	r3, [sp, #0]
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	b01b      	add	sp, #108	; 0x6c
 8005d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d8e:	bf00      	nop
 8005d90:	ffff0208 	.word	0xffff0208

08005d94 <vsiprintf>:
 8005d94:	4613      	mov	r3, r2
 8005d96:	460a      	mov	r2, r1
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4802      	ldr	r0, [pc, #8]	; (8005da4 <vsiprintf+0x10>)
 8005d9c:	6800      	ldr	r0, [r0, #0]
 8005d9e:	f7ff bfe3 	b.w	8005d68 <_vsiprintf_r>
 8005da2:	bf00      	nop
 8005da4:	20000064 	.word	0x20000064

08005da8 <memset>:
 8005da8:	4603      	mov	r3, r0
 8005daa:	4402      	add	r2, r0
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d100      	bne.n	8005db2 <memset+0xa>
 8005db0:	4770      	bx	lr
 8005db2:	f803 1b01 	strb.w	r1, [r3], #1
 8005db6:	e7f9      	b.n	8005dac <memset+0x4>

08005db8 <_localeconv_r>:
 8005db8:	4800      	ldr	r0, [pc, #0]	; (8005dbc <_localeconv_r+0x4>)
 8005dba:	4770      	bx	lr
 8005dbc:	20000158 	.word	0x20000158

08005dc0 <_close_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4d05      	ldr	r5, [pc, #20]	; (8005ddc <_close_r+0x1c>)
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fb fed4 	bl	8001b78 <_close>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_close_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_close_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000498 	.word	0x20000498

08005de0 <_lseek_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	2200      	movs	r2, #0
 8005dea:	4d05      	ldr	r5, [pc, #20]	; (8005e00 <_lseek_r+0x20>)
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fb fee6 	bl	8001bc0 <_lseek>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_lseek_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_lseek_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000498 	.word	0x20000498

08005e04 <_read_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4d05      	ldr	r5, [pc, #20]	; (8005e24 <_read_r+0x20>)
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb fe77 	bl	8001b06 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_read_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_read_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000498 	.word	0x20000498

08005e28 <_write_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	2200      	movs	r2, #0
 8005e32:	4d05      	ldr	r5, [pc, #20]	; (8005e48 <_write_r+0x20>)
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fb fe82 	bl	8001b40 <_write>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_write_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_write_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20000498 	.word	0x20000498

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000064 	.word	0x20000064

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	4d0c      	ldr	r5, [pc, #48]	; (8005e90 <__libc_init_array+0x38>)
 8005e5e:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	f003 fbc0 	bl	80095ec <_init>
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	4d0a      	ldr	r5, [pc, #40]	; (8005e98 <__libc_init_array+0x40>)
 8005e70:	4c0a      	ldr	r4, [pc, #40]	; (8005e9c <__libc_init_array+0x44>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	08009a98 	.word	0x08009a98
 8005e94:	08009a98 	.word	0x08009a98
 8005e98:	08009a98 	.word	0x08009a98
 8005e9c:	08009a9c 	.word	0x08009a9c

08005ea0 <__retarget_lock_init_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_acquire_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <__retarget_lock_release_recursive>:
 8005ea4:	4770      	bx	lr

08005ea6 <memchr>:
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	b2c9      	uxtb	r1, r1
 8005eac:	4402      	add	r2, r0
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	d101      	bne.n	8005eb8 <memchr+0x12>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e003      	b.n	8005ec0 <memchr+0x1a>
 8005eb8:	7804      	ldrb	r4, [r0, #0]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	428c      	cmp	r4, r1
 8005ebe:	d1f6      	bne.n	8005eae <memchr+0x8>
 8005ec0:	bd10      	pop	{r4, pc}
	...

08005ec4 <nanf>:
 8005ec4:	4800      	ldr	r0, [pc, #0]	; (8005ec8 <nanf+0x4>)
 8005ec6:	4770      	bx	lr
 8005ec8:	7fc00000 	.word	0x7fc00000

08005ecc <quorem>:
 8005ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	6903      	ldr	r3, [r0, #16]
 8005ed2:	690c      	ldr	r4, [r1, #16]
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	db7f      	blt.n	8005fda <quorem+0x10e>
 8005eda:	3c01      	subs	r4, #1
 8005edc:	f100 0514 	add.w	r5, r0, #20
 8005ee0:	f101 0814 	add.w	r8, r1, #20
 8005ee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005efa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005efe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f02:	d331      	bcc.n	8005f68 <quorem+0x9c>
 8005f04:	f04f 0e00 	mov.w	lr, #0
 8005f08:	4640      	mov	r0, r8
 8005f0a:	46ac      	mov	ip, r5
 8005f0c:	46f2      	mov	sl, lr
 8005f0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f12:	b293      	uxth	r3, r2
 8005f14:	fb06 e303 	mla	r3, r6, r3, lr
 8005f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f1c:	0c1a      	lsrs	r2, r3, #16
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	fb06 220e 	mla	r2, r6, lr, r2
 8005f24:	ebaa 0303 	sub.w	r3, sl, r3
 8005f28:	f8dc a000 	ldr.w	sl, [ip]
 8005f2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f30:	fa1f fa8a 	uxth.w	sl, sl
 8005f34:	4453      	add	r3, sl
 8005f36:	f8dc a000 	ldr.w	sl, [ip]
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f4a:	4581      	cmp	r9, r0
 8005f4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f50:	f84c 3b04 	str.w	r3, [ip], #4
 8005f54:	d2db      	bcs.n	8005f0e <quorem+0x42>
 8005f56:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f5a:	b92b      	cbnz	r3, 8005f68 <quorem+0x9c>
 8005f5c:	9b01      	ldr	r3, [sp, #4]
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	429d      	cmp	r5, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	d32d      	bcc.n	8005fc2 <quorem+0xf6>
 8005f66:	613c      	str	r4, [r7, #16]
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f001 f9dd 	bl	8007328 <__mcmp>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	db23      	blt.n	8005fba <quorem+0xee>
 8005f72:	4629      	mov	r1, r5
 8005f74:	2000      	movs	r0, #0
 8005f76:	3601      	adds	r6, #1
 8005f78:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f7c:	f8d1 c000 	ldr.w	ip, [r1]
 8005f80:	b293      	uxth	r3, r2
 8005f82:	1ac3      	subs	r3, r0, r3
 8005f84:	0c12      	lsrs	r2, r2, #16
 8005f86:	fa1f f08c 	uxth.w	r0, ip
 8005f8a:	4403      	add	r3, r0
 8005f8c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f9a:	45c1      	cmp	r9, r8
 8005f9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fa0:	f841 3b04 	str.w	r3, [r1], #4
 8005fa4:	d2e8      	bcs.n	8005f78 <quorem+0xac>
 8005fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fae:	b922      	cbnz	r2, 8005fba <quorem+0xee>
 8005fb0:	3b04      	subs	r3, #4
 8005fb2:	429d      	cmp	r5, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	d30a      	bcc.n	8005fce <quorem+0x102>
 8005fb8:	613c      	str	r4, [r7, #16]
 8005fba:	4630      	mov	r0, r6
 8005fbc:	b003      	add	sp, #12
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	3b04      	subs	r3, #4
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	d1cd      	bne.n	8005f66 <quorem+0x9a>
 8005fca:	3c01      	subs	r4, #1
 8005fcc:	e7c8      	b.n	8005f60 <quorem+0x94>
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	3b04      	subs	r3, #4
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <quorem+0xec>
 8005fd6:	3c01      	subs	r4, #1
 8005fd8:	e7eb      	b.n	8005fb2 <quorem+0xe6>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e7ee      	b.n	8005fbc <quorem+0xf0>
	...

08005fe0 <_dtoa_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	461f      	mov	r7, r3
 8005fe8:	69c4      	ldr	r4, [r0, #28]
 8005fea:	b099      	sub	sp, #100	; 0x64
 8005fec:	4605      	mov	r5, r0
 8005fee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ff2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ff6:	b974      	cbnz	r4, 8006016 <_dtoa_r+0x36>
 8005ff8:	2010      	movs	r0, #16
 8005ffa:	f000 fe1d 	bl	8006c38 <malloc>
 8005ffe:	4602      	mov	r2, r0
 8006000:	61e8      	str	r0, [r5, #28]
 8006002:	b920      	cbnz	r0, 800600e <_dtoa_r+0x2e>
 8006004:	21ef      	movs	r1, #239	; 0xef
 8006006:	4bac      	ldr	r3, [pc, #688]	; (80062b8 <_dtoa_r+0x2d8>)
 8006008:	48ac      	ldr	r0, [pc, #688]	; (80062bc <_dtoa_r+0x2dc>)
 800600a:	f002 fc55 	bl	80088b8 <__assert_func>
 800600e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006012:	6004      	str	r4, [r0, #0]
 8006014:	60c4      	str	r4, [r0, #12]
 8006016:	69eb      	ldr	r3, [r5, #28]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	b151      	cbz	r1, 8006032 <_dtoa_r+0x52>
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	2301      	movs	r3, #1
 8006020:	4093      	lsls	r3, r2
 8006022:	604a      	str	r2, [r1, #4]
 8006024:	608b      	str	r3, [r1, #8]
 8006026:	4628      	mov	r0, r5
 8006028:	f000 fefa 	bl	8006e20 <_Bfree>
 800602c:	2200      	movs	r2, #0
 800602e:	69eb      	ldr	r3, [r5, #28]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	1e3b      	subs	r3, r7, #0
 8006034:	bfaf      	iteee	ge
 8006036:	2300      	movge	r3, #0
 8006038:	2201      	movlt	r2, #1
 800603a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800603e:	9305      	strlt	r3, [sp, #20]
 8006040:	bfa8      	it	ge
 8006042:	f8c8 3000 	strge.w	r3, [r8]
 8006046:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800604a:	4b9d      	ldr	r3, [pc, #628]	; (80062c0 <_dtoa_r+0x2e0>)
 800604c:	bfb8      	it	lt
 800604e:	f8c8 2000 	strlt.w	r2, [r8]
 8006052:	ea33 0309 	bics.w	r3, r3, r9
 8006056:	d119      	bne.n	800608c <_dtoa_r+0xac>
 8006058:	f242 730f 	movw	r3, #9999	; 0x270f
 800605c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006064:	4333      	orrs	r3, r6
 8006066:	f000 8589 	beq.w	8006b7c <_dtoa_r+0xb9c>
 800606a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800606c:	b953      	cbnz	r3, 8006084 <_dtoa_r+0xa4>
 800606e:	4b95      	ldr	r3, [pc, #596]	; (80062c4 <_dtoa_r+0x2e4>)
 8006070:	e023      	b.n	80060ba <_dtoa_r+0xda>
 8006072:	4b95      	ldr	r3, [pc, #596]	; (80062c8 <_dtoa_r+0x2e8>)
 8006074:	9303      	str	r3, [sp, #12]
 8006076:	3308      	adds	r3, #8
 8006078:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	9803      	ldr	r0, [sp, #12]
 800607e:	b019      	add	sp, #100	; 0x64
 8006080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	4b8f      	ldr	r3, [pc, #572]	; (80062c4 <_dtoa_r+0x2e4>)
 8006086:	9303      	str	r3, [sp, #12]
 8006088:	3303      	adds	r3, #3
 800608a:	e7f5      	b.n	8006078 <_dtoa_r+0x98>
 800608c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006090:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	f7fa fc84 	bl	80009a8 <__aeabi_dcmpeq>
 80060a0:	4680      	mov	r8, r0
 80060a2:	b160      	cbz	r0, 80060be <_dtoa_r+0xde>
 80060a4:	2301      	movs	r3, #1
 80060a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8562 	beq.w	8006b76 <_dtoa_r+0xb96>
 80060b2:	4b86      	ldr	r3, [pc, #536]	; (80062cc <_dtoa_r+0x2ec>)
 80060b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	9303      	str	r3, [sp, #12]
 80060bc:	e7de      	b.n	800607c <_dtoa_r+0x9c>
 80060be:	ab16      	add	r3, sp, #88	; 0x58
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	ab17      	add	r3, sp, #92	; 0x5c
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	4628      	mov	r0, r5
 80060c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060cc:	f001 fa3c 	bl	8007548 <__d2b>
 80060d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060d4:	4682      	mov	sl, r0
 80060d6:	2c00      	cmp	r4, #0
 80060d8:	d07e      	beq.n	80061d8 <_dtoa_r+0x1f8>
 80060da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060e8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060f0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060f4:	4619      	mov	r1, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b75      	ldr	r3, [pc, #468]	; (80062d0 <_dtoa_r+0x2f0>)
 80060fa:	f7fa f835 	bl	8000168 <__aeabi_dsub>
 80060fe:	a368      	add	r3, pc, #416	; (adr r3, 80062a0 <_dtoa_r+0x2c0>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa f9e8 	bl	80004d8 <__aeabi_dmul>
 8006108:	a367      	add	r3, pc, #412	; (adr r3, 80062a8 <_dtoa_r+0x2c8>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa f82d 	bl	800016c <__adddf3>
 8006112:	4606      	mov	r6, r0
 8006114:	4620      	mov	r0, r4
 8006116:	460f      	mov	r7, r1
 8006118:	f7fa f974 	bl	8000404 <__aeabi_i2d>
 800611c:	a364      	add	r3, pc, #400	; (adr r3, 80062b0 <_dtoa_r+0x2d0>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa f9d9 	bl	80004d8 <__aeabi_dmul>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4630      	mov	r0, r6
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa f81d 	bl	800016c <__adddf3>
 8006132:	4606      	mov	r6, r0
 8006134:	460f      	mov	r7, r1
 8006136:	f7fa fc7f 	bl	8000a38 <__aeabi_d2iz>
 800613a:	2200      	movs	r2, #0
 800613c:	4683      	mov	fp, r0
 800613e:	2300      	movs	r3, #0
 8006140:	4630      	mov	r0, r6
 8006142:	4639      	mov	r1, r7
 8006144:	f7fa fc3a 	bl	80009bc <__aeabi_dcmplt>
 8006148:	b148      	cbz	r0, 800615e <_dtoa_r+0x17e>
 800614a:	4658      	mov	r0, fp
 800614c:	f7fa f95a 	bl	8000404 <__aeabi_i2d>
 8006150:	4632      	mov	r2, r6
 8006152:	463b      	mov	r3, r7
 8006154:	f7fa fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8006158:	b908      	cbnz	r0, 800615e <_dtoa_r+0x17e>
 800615a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800615e:	f1bb 0f16 	cmp.w	fp, #22
 8006162:	d857      	bhi.n	8006214 <_dtoa_r+0x234>
 8006164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006168:	4b5a      	ldr	r3, [pc, #360]	; (80062d4 <_dtoa_r+0x2f4>)
 800616a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f7fa fc23 	bl	80009bc <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	d04e      	beq.n	8006218 <_dtoa_r+0x238>
 800617a:	2300      	movs	r3, #0
 800617c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006180:	930f      	str	r3, [sp, #60]	; 0x3c
 8006182:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006184:	1b1b      	subs	r3, r3, r4
 8006186:	1e5a      	subs	r2, r3, #1
 8006188:	bf46      	itte	mi
 800618a:	f1c3 0901 	rsbmi	r9, r3, #1
 800618e:	2300      	movmi	r3, #0
 8006190:	f04f 0900 	movpl.w	r9, #0
 8006194:	9209      	str	r2, [sp, #36]	; 0x24
 8006196:	bf48      	it	mi
 8006198:	9309      	strmi	r3, [sp, #36]	; 0x24
 800619a:	f1bb 0f00 	cmp.w	fp, #0
 800619e:	db3d      	blt.n	800621c <_dtoa_r+0x23c>
 80061a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80061a6:	445b      	add	r3, fp
 80061a8:	9309      	str	r3, [sp, #36]	; 0x24
 80061aa:	2300      	movs	r3, #0
 80061ac:	930a      	str	r3, [sp, #40]	; 0x28
 80061ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d867      	bhi.n	8006284 <_dtoa_r+0x2a4>
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	bfc4      	itt	gt
 80061b8:	3b04      	subgt	r3, #4
 80061ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80061bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061be:	bfc8      	it	gt
 80061c0:	2400      	movgt	r4, #0
 80061c2:	f1a3 0302 	sub.w	r3, r3, #2
 80061c6:	bfd8      	it	le
 80061c8:	2401      	movle	r4, #1
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	f200 8086 	bhi.w	80062dc <_dtoa_r+0x2fc>
 80061d0:	e8df f003 	tbb	[pc, r3]
 80061d4:	5637392c 	.word	0x5637392c
 80061d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061dc:	441c      	add	r4, r3
 80061de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	bfc1      	itttt	gt
 80061e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061ea:	fa09 f903 	lslgt.w	r9, r9, r3
 80061ee:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80061f2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061f6:	bfd6      	itet	le
 80061f8:	f1c3 0320 	rsble	r3, r3, #32
 80061fc:	ea49 0003 	orrgt.w	r0, r9, r3
 8006200:	fa06 f003 	lslle.w	r0, r6, r3
 8006204:	f7fa f8ee 	bl	80003e4 <__aeabi_ui2d>
 8006208:	2201      	movs	r2, #1
 800620a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800620e:	3c01      	subs	r4, #1
 8006210:	9213      	str	r2, [sp, #76]	; 0x4c
 8006212:	e76f      	b.n	80060f4 <_dtoa_r+0x114>
 8006214:	2301      	movs	r3, #1
 8006216:	e7b3      	b.n	8006180 <_dtoa_r+0x1a0>
 8006218:	900f      	str	r0, [sp, #60]	; 0x3c
 800621a:	e7b2      	b.n	8006182 <_dtoa_r+0x1a2>
 800621c:	f1cb 0300 	rsb	r3, fp, #0
 8006220:	930a      	str	r3, [sp, #40]	; 0x28
 8006222:	2300      	movs	r3, #0
 8006224:	eba9 090b 	sub.w	r9, r9, fp
 8006228:	930e      	str	r3, [sp, #56]	; 0x38
 800622a:	e7c0      	b.n	80061ae <_dtoa_r+0x1ce>
 800622c:	2300      	movs	r3, #0
 800622e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006230:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006232:	2b00      	cmp	r3, #0
 8006234:	dc55      	bgt.n	80062e2 <_dtoa_r+0x302>
 8006236:	2301      	movs	r3, #1
 8006238:	461a      	mov	r2, r3
 800623a:	9306      	str	r3, [sp, #24]
 800623c:	9308      	str	r3, [sp, #32]
 800623e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006240:	e00b      	b.n	800625a <_dtoa_r+0x27a>
 8006242:	2301      	movs	r3, #1
 8006244:	e7f3      	b.n	800622e <_dtoa_r+0x24e>
 8006246:	2300      	movs	r3, #0
 8006248:	930b      	str	r3, [sp, #44]	; 0x2c
 800624a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800624c:	445b      	add	r3, fp
 800624e:	9306      	str	r3, [sp, #24]
 8006250:	3301      	adds	r3, #1
 8006252:	2b01      	cmp	r3, #1
 8006254:	9308      	str	r3, [sp, #32]
 8006256:	bfb8      	it	lt
 8006258:	2301      	movlt	r3, #1
 800625a:	2100      	movs	r1, #0
 800625c:	2204      	movs	r2, #4
 800625e:	69e8      	ldr	r0, [r5, #28]
 8006260:	f102 0614 	add.w	r6, r2, #20
 8006264:	429e      	cmp	r6, r3
 8006266:	d940      	bls.n	80062ea <_dtoa_r+0x30a>
 8006268:	6041      	str	r1, [r0, #4]
 800626a:	4628      	mov	r0, r5
 800626c:	f000 fd98 	bl	8006da0 <_Balloc>
 8006270:	9003      	str	r0, [sp, #12]
 8006272:	2800      	cmp	r0, #0
 8006274:	d13c      	bne.n	80062f0 <_dtoa_r+0x310>
 8006276:	4602      	mov	r2, r0
 8006278:	f240 11af 	movw	r1, #431	; 0x1af
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <_dtoa_r+0x2f8>)
 800627e:	e6c3      	b.n	8006008 <_dtoa_r+0x28>
 8006280:	2301      	movs	r3, #1
 8006282:	e7e1      	b.n	8006248 <_dtoa_r+0x268>
 8006284:	2401      	movs	r4, #1
 8006286:	2300      	movs	r3, #0
 8006288:	940b      	str	r4, [sp, #44]	; 0x2c
 800628a:	9322      	str	r3, [sp, #136]	; 0x88
 800628c:	f04f 33ff 	mov.w	r3, #4294967295
 8006290:	2200      	movs	r2, #0
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	9308      	str	r3, [sp, #32]
 8006296:	2312      	movs	r3, #18
 8006298:	e7d1      	b.n	800623e <_dtoa_r+0x25e>
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w
 80062a0:	636f4361 	.word	0x636f4361
 80062a4:	3fd287a7 	.word	0x3fd287a7
 80062a8:	8b60c8b3 	.word	0x8b60c8b3
 80062ac:	3fc68a28 	.word	0x3fc68a28
 80062b0:	509f79fb 	.word	0x509f79fb
 80062b4:	3fd34413 	.word	0x3fd34413
 80062b8:	080096b4 	.word	0x080096b4
 80062bc:	080096cb 	.word	0x080096cb
 80062c0:	7ff00000 	.word	0x7ff00000
 80062c4:	080096b0 	.word	0x080096b0
 80062c8:	080096a7 	.word	0x080096a7
 80062cc:	0800967f 	.word	0x0800967f
 80062d0:	3ff80000 	.word	0x3ff80000
 80062d4:	080097b8 	.word	0x080097b8
 80062d8:	08009723 	.word	0x08009723
 80062dc:	2301      	movs	r3, #1
 80062de:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e0:	e7d4      	b.n	800628c <_dtoa_r+0x2ac>
 80062e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062e4:	9306      	str	r3, [sp, #24]
 80062e6:	9308      	str	r3, [sp, #32]
 80062e8:	e7b7      	b.n	800625a <_dtoa_r+0x27a>
 80062ea:	3101      	adds	r1, #1
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	e7b7      	b.n	8006260 <_dtoa_r+0x280>
 80062f0:	69eb      	ldr	r3, [r5, #28]
 80062f2:	9a03      	ldr	r2, [sp, #12]
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	9b08      	ldr	r3, [sp, #32]
 80062f8:	2b0e      	cmp	r3, #14
 80062fa:	f200 80a8 	bhi.w	800644e <_dtoa_r+0x46e>
 80062fe:	2c00      	cmp	r4, #0
 8006300:	f000 80a5 	beq.w	800644e <_dtoa_r+0x46e>
 8006304:	f1bb 0f00 	cmp.w	fp, #0
 8006308:	dd34      	ble.n	8006374 <_dtoa_r+0x394>
 800630a:	4b9a      	ldr	r3, [pc, #616]	; (8006574 <_dtoa_r+0x594>)
 800630c:	f00b 020f 	and.w	r2, fp, #15
 8006310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006318:	e9d3 3400 	ldrd	r3, r4, [r3]
 800631c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006320:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006324:	d016      	beq.n	8006354 <_dtoa_r+0x374>
 8006326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800632a:	4b93      	ldr	r3, [pc, #588]	; (8006578 <_dtoa_r+0x598>)
 800632c:	2703      	movs	r7, #3
 800632e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006332:	f7fa f9fb 	bl	800072c <__aeabi_ddiv>
 8006336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800633a:	f004 040f 	and.w	r4, r4, #15
 800633e:	4e8e      	ldr	r6, [pc, #568]	; (8006578 <_dtoa_r+0x598>)
 8006340:	b954      	cbnz	r4, 8006358 <_dtoa_r+0x378>
 8006342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800634a:	f7fa f9ef 	bl	800072c <__aeabi_ddiv>
 800634e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006352:	e029      	b.n	80063a8 <_dtoa_r+0x3c8>
 8006354:	2702      	movs	r7, #2
 8006356:	e7f2      	b.n	800633e <_dtoa_r+0x35e>
 8006358:	07e1      	lsls	r1, r4, #31
 800635a:	d508      	bpl.n	800636e <_dtoa_r+0x38e>
 800635c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006360:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006364:	f7fa f8b8 	bl	80004d8 <__aeabi_dmul>
 8006368:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800636c:	3701      	adds	r7, #1
 800636e:	1064      	asrs	r4, r4, #1
 8006370:	3608      	adds	r6, #8
 8006372:	e7e5      	b.n	8006340 <_dtoa_r+0x360>
 8006374:	f000 80a5 	beq.w	80064c2 <_dtoa_r+0x4e2>
 8006378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800637c:	f1cb 0400 	rsb	r4, fp, #0
 8006380:	4b7c      	ldr	r3, [pc, #496]	; (8006574 <_dtoa_r+0x594>)
 8006382:	f004 020f 	and.w	r2, r4, #15
 8006386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7fa f8a3 	bl	80004d8 <__aeabi_dmul>
 8006392:	2702      	movs	r7, #2
 8006394:	2300      	movs	r3, #0
 8006396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800639a:	4e77      	ldr	r6, [pc, #476]	; (8006578 <_dtoa_r+0x598>)
 800639c:	1124      	asrs	r4, r4, #4
 800639e:	2c00      	cmp	r4, #0
 80063a0:	f040 8084 	bne.w	80064ac <_dtoa_r+0x4cc>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1d2      	bne.n	800634e <_dtoa_r+0x36e>
 80063a8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8087 	beq.w	80064c6 <_dtoa_r+0x4e6>
 80063b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063bc:	2200      	movs	r2, #0
 80063be:	4b6f      	ldr	r3, [pc, #444]	; (800657c <_dtoa_r+0x59c>)
 80063c0:	f7fa fafc 	bl	80009bc <__aeabi_dcmplt>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d07e      	beq.n	80064c6 <_dtoa_r+0x4e6>
 80063c8:	9b08      	ldr	r3, [sp, #32]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d07b      	beq.n	80064c6 <_dtoa_r+0x4e6>
 80063ce:	9b06      	ldr	r3, [sp, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dd38      	ble.n	8006446 <_dtoa_r+0x466>
 80063d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063d8:	2200      	movs	r2, #0
 80063da:	4b69      	ldr	r3, [pc, #420]	; (8006580 <_dtoa_r+0x5a0>)
 80063dc:	f7fa f87c 	bl	80004d8 <__aeabi_dmul>
 80063e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e4:	9c06      	ldr	r4, [sp, #24]
 80063e6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80063ea:	3701      	adds	r7, #1
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7fa f809 	bl	8000404 <__aeabi_i2d>
 80063f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f6:	f7fa f86f 	bl	80004d8 <__aeabi_dmul>
 80063fa:	2200      	movs	r2, #0
 80063fc:	4b61      	ldr	r3, [pc, #388]	; (8006584 <_dtoa_r+0x5a4>)
 80063fe:	f7f9 feb5 	bl	800016c <__adddf3>
 8006402:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006406:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800640a:	9611      	str	r6, [sp, #68]	; 0x44
 800640c:	2c00      	cmp	r4, #0
 800640e:	d15d      	bne.n	80064cc <_dtoa_r+0x4ec>
 8006410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006414:	2200      	movs	r2, #0
 8006416:	4b5c      	ldr	r3, [pc, #368]	; (8006588 <_dtoa_r+0x5a8>)
 8006418:	f7f9 fea6 	bl	8000168 <__aeabi_dsub>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006424:	4633      	mov	r3, r6
 8006426:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006428:	f7fa fae6 	bl	80009f8 <__aeabi_dcmpgt>
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 8295 	bne.w	800695c <_dtoa_r+0x97c>
 8006432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006436:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006438:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800643c:	f7fa fabe 	bl	80009bc <__aeabi_dcmplt>
 8006440:	2800      	cmp	r0, #0
 8006442:	f040 8289 	bne.w	8006958 <_dtoa_r+0x978>
 8006446:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800644a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800644e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006450:	2b00      	cmp	r3, #0
 8006452:	f2c0 8151 	blt.w	80066f8 <_dtoa_r+0x718>
 8006456:	f1bb 0f0e 	cmp.w	fp, #14
 800645a:	f300 814d 	bgt.w	80066f8 <_dtoa_r+0x718>
 800645e:	4b45      	ldr	r3, [pc, #276]	; (8006574 <_dtoa_r+0x594>)
 8006460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006464:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006468:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800646c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800646e:	2b00      	cmp	r3, #0
 8006470:	f280 80da 	bge.w	8006628 <_dtoa_r+0x648>
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f300 80d6 	bgt.w	8006628 <_dtoa_r+0x648>
 800647c:	f040 826b 	bne.w	8006956 <_dtoa_r+0x976>
 8006480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006484:	2200      	movs	r2, #0
 8006486:	4b40      	ldr	r3, [pc, #256]	; (8006588 <_dtoa_r+0x5a8>)
 8006488:	f7fa f826 	bl	80004d8 <__aeabi_dmul>
 800648c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006490:	f7fa faa8 	bl	80009e4 <__aeabi_dcmpge>
 8006494:	9c08      	ldr	r4, [sp, #32]
 8006496:	4626      	mov	r6, r4
 8006498:	2800      	cmp	r0, #0
 800649a:	f040 8241 	bne.w	8006920 <_dtoa_r+0x940>
 800649e:	2331      	movs	r3, #49	; 0x31
 80064a0:	9f03      	ldr	r7, [sp, #12]
 80064a2:	f10b 0b01 	add.w	fp, fp, #1
 80064a6:	f807 3b01 	strb.w	r3, [r7], #1
 80064aa:	e23d      	b.n	8006928 <_dtoa_r+0x948>
 80064ac:	07e2      	lsls	r2, r4, #31
 80064ae:	d505      	bpl.n	80064bc <_dtoa_r+0x4dc>
 80064b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064b4:	f7fa f810 	bl	80004d8 <__aeabi_dmul>
 80064b8:	2301      	movs	r3, #1
 80064ba:	3701      	adds	r7, #1
 80064bc:	1064      	asrs	r4, r4, #1
 80064be:	3608      	adds	r6, #8
 80064c0:	e76d      	b.n	800639e <_dtoa_r+0x3be>
 80064c2:	2702      	movs	r7, #2
 80064c4:	e770      	b.n	80063a8 <_dtoa_r+0x3c8>
 80064c6:	46d8      	mov	r8, fp
 80064c8:	9c08      	ldr	r4, [sp, #32]
 80064ca:	e78f      	b.n	80063ec <_dtoa_r+0x40c>
 80064cc:	9903      	ldr	r1, [sp, #12]
 80064ce:	4b29      	ldr	r3, [pc, #164]	; (8006574 <_dtoa_r+0x594>)
 80064d0:	4421      	add	r1, r4
 80064d2:	9112      	str	r1, [sp, #72]	; 0x48
 80064d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064da:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064e2:	2900      	cmp	r1, #0
 80064e4:	d054      	beq.n	8006590 <_dtoa_r+0x5b0>
 80064e6:	2000      	movs	r0, #0
 80064e8:	4928      	ldr	r1, [pc, #160]	; (800658c <_dtoa_r+0x5ac>)
 80064ea:	f7fa f91f 	bl	800072c <__aeabi_ddiv>
 80064ee:	463b      	mov	r3, r7
 80064f0:	4632      	mov	r2, r6
 80064f2:	f7f9 fe39 	bl	8000168 <__aeabi_dsub>
 80064f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064fa:	9f03      	ldr	r7, [sp, #12]
 80064fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006500:	f7fa fa9a 	bl	8000a38 <__aeabi_d2iz>
 8006504:	4604      	mov	r4, r0
 8006506:	f7f9 ff7d 	bl	8000404 <__aeabi_i2d>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006512:	f7f9 fe29 	bl	8000168 <__aeabi_dsub>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	3430      	adds	r4, #48	; 0x30
 800651c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006524:	f807 4b01 	strb.w	r4, [r7], #1
 8006528:	f7fa fa48 	bl	80009bc <__aeabi_dcmplt>
 800652c:	2800      	cmp	r0, #0
 800652e:	d173      	bne.n	8006618 <_dtoa_r+0x638>
 8006530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006534:	2000      	movs	r0, #0
 8006536:	4911      	ldr	r1, [pc, #68]	; (800657c <_dtoa_r+0x59c>)
 8006538:	f7f9 fe16 	bl	8000168 <__aeabi_dsub>
 800653c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006540:	f7fa fa3c 	bl	80009bc <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	f040 80b6 	bne.w	80066b6 <_dtoa_r+0x6d6>
 800654a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654c:	429f      	cmp	r7, r3
 800654e:	f43f af7a 	beq.w	8006446 <_dtoa_r+0x466>
 8006552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006556:	2200      	movs	r2, #0
 8006558:	4b09      	ldr	r3, [pc, #36]	; (8006580 <_dtoa_r+0x5a0>)
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	2200      	movs	r2, #0
 8006560:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <_dtoa_r+0x5a0>)
 800656a:	f7f9 ffb5 	bl	80004d8 <__aeabi_dmul>
 800656e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006572:	e7c3      	b.n	80064fc <_dtoa_r+0x51c>
 8006574:	080097b8 	.word	0x080097b8
 8006578:	08009790 	.word	0x08009790
 800657c:	3ff00000 	.word	0x3ff00000
 8006580:	40240000 	.word	0x40240000
 8006584:	401c0000 	.word	0x401c0000
 8006588:	40140000 	.word	0x40140000
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	4630      	mov	r0, r6
 8006592:	4639      	mov	r1, r7
 8006594:	f7f9 ffa0 	bl	80004d8 <__aeabi_dmul>
 8006598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800659a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800659e:	9c03      	ldr	r4, [sp, #12]
 80065a0:	9314      	str	r3, [sp, #80]	; 0x50
 80065a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065a6:	f7fa fa47 	bl	8000a38 <__aeabi_d2iz>
 80065aa:	9015      	str	r0, [sp, #84]	; 0x54
 80065ac:	f7f9 ff2a 	bl	8000404 <__aeabi_i2d>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b8:	f7f9 fdd6 	bl	8000168 <__aeabi_dsub>
 80065bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065be:	4606      	mov	r6, r0
 80065c0:	3330      	adds	r3, #48	; 0x30
 80065c2:	f804 3b01 	strb.w	r3, [r4], #1
 80065c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c8:	460f      	mov	r7, r1
 80065ca:	429c      	cmp	r4, r3
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	d124      	bne.n	800661c <_dtoa_r+0x63c>
 80065d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065d6:	4baf      	ldr	r3, [pc, #700]	; (8006894 <_dtoa_r+0x8b4>)
 80065d8:	f7f9 fdc8 	bl	800016c <__adddf3>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4630      	mov	r0, r6
 80065e2:	4639      	mov	r1, r7
 80065e4:	f7fa fa08 	bl	80009f8 <__aeabi_dcmpgt>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d163      	bne.n	80066b4 <_dtoa_r+0x6d4>
 80065ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065f0:	2000      	movs	r0, #0
 80065f2:	49a8      	ldr	r1, [pc, #672]	; (8006894 <_dtoa_r+0x8b4>)
 80065f4:	f7f9 fdb8 	bl	8000168 <__aeabi_dsub>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7fa f9dc 	bl	80009bc <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	f43f af1e 	beq.w	8006446 <_dtoa_r+0x466>
 800660a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800660c:	1e7b      	subs	r3, r7, #1
 800660e:	9314      	str	r3, [sp, #80]	; 0x50
 8006610:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d0f8      	beq.n	800660a <_dtoa_r+0x62a>
 8006618:	46c3      	mov	fp, r8
 800661a:	e03b      	b.n	8006694 <_dtoa_r+0x6b4>
 800661c:	4b9e      	ldr	r3, [pc, #632]	; (8006898 <_dtoa_r+0x8b8>)
 800661e:	f7f9 ff5b 	bl	80004d8 <__aeabi_dmul>
 8006622:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006626:	e7bc      	b.n	80065a2 <_dtoa_r+0x5c2>
 8006628:	9f03      	ldr	r7, [sp, #12]
 800662a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800662e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006632:	4640      	mov	r0, r8
 8006634:	4649      	mov	r1, r9
 8006636:	f7fa f879 	bl	800072c <__aeabi_ddiv>
 800663a:	f7fa f9fd 	bl	8000a38 <__aeabi_d2iz>
 800663e:	4604      	mov	r4, r0
 8006640:	f7f9 fee0 	bl	8000404 <__aeabi_i2d>
 8006644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006648:	f7f9 ff46 	bl	80004d8 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	f7f9 fd88 	bl	8000168 <__aeabi_dsub>
 8006658:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800665c:	f807 6b01 	strb.w	r6, [r7], #1
 8006660:	9e03      	ldr	r6, [sp, #12]
 8006662:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006666:	1bbe      	subs	r6, r7, r6
 8006668:	45b4      	cmp	ip, r6
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	d136      	bne.n	80066de <_dtoa_r+0x6fe>
 8006670:	f7f9 fd7c 	bl	800016c <__adddf3>
 8006674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006678:	4680      	mov	r8, r0
 800667a:	4689      	mov	r9, r1
 800667c:	f7fa f9bc 	bl	80009f8 <__aeabi_dcmpgt>
 8006680:	bb58      	cbnz	r0, 80066da <_dtoa_r+0x6fa>
 8006682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7fa f98d 	bl	80009a8 <__aeabi_dcmpeq>
 800668e:	b108      	cbz	r0, 8006694 <_dtoa_r+0x6b4>
 8006690:	07e3      	lsls	r3, r4, #31
 8006692:	d422      	bmi.n	80066da <_dtoa_r+0x6fa>
 8006694:	4651      	mov	r1, sl
 8006696:	4628      	mov	r0, r5
 8006698:	f000 fbc2 	bl	8006e20 <_Bfree>
 800669c:	2300      	movs	r3, #0
 800669e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066a0:	703b      	strb	r3, [r7, #0]
 80066a2:	f10b 0301 	add.w	r3, fp, #1
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f43f ace6 	beq.w	800607c <_dtoa_r+0x9c>
 80066b0:	601f      	str	r7, [r3, #0]
 80066b2:	e4e3      	b.n	800607c <_dtoa_r+0x9c>
 80066b4:	4627      	mov	r7, r4
 80066b6:	463b      	mov	r3, r7
 80066b8:	461f      	mov	r7, r3
 80066ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066be:	2a39      	cmp	r2, #57	; 0x39
 80066c0:	d107      	bne.n	80066d2 <_dtoa_r+0x6f2>
 80066c2:	9a03      	ldr	r2, [sp, #12]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1f7      	bne.n	80066b8 <_dtoa_r+0x6d8>
 80066c8:	2230      	movs	r2, #48	; 0x30
 80066ca:	9903      	ldr	r1, [sp, #12]
 80066cc:	f108 0801 	add.w	r8, r8, #1
 80066d0:	700a      	strb	r2, [r1, #0]
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	3201      	adds	r2, #1
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e79e      	b.n	8006618 <_dtoa_r+0x638>
 80066da:	46d8      	mov	r8, fp
 80066dc:	e7eb      	b.n	80066b6 <_dtoa_r+0x6d6>
 80066de:	2200      	movs	r2, #0
 80066e0:	4b6d      	ldr	r3, [pc, #436]	; (8006898 <_dtoa_r+0x8b8>)
 80066e2:	f7f9 fef9 	bl	80004d8 <__aeabi_dmul>
 80066e6:	2200      	movs	r2, #0
 80066e8:	2300      	movs	r3, #0
 80066ea:	4680      	mov	r8, r0
 80066ec:	4689      	mov	r9, r1
 80066ee:	f7fa f95b 	bl	80009a8 <__aeabi_dcmpeq>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d09b      	beq.n	800662e <_dtoa_r+0x64e>
 80066f6:	e7cd      	b.n	8006694 <_dtoa_r+0x6b4>
 80066f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	f000 80c4 	beq.w	8006888 <_dtoa_r+0x8a8>
 8006700:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006702:	2a01      	cmp	r2, #1
 8006704:	f300 80a8 	bgt.w	8006858 <_dtoa_r+0x878>
 8006708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800670a:	2a00      	cmp	r2, #0
 800670c:	f000 80a0 	beq.w	8006850 <_dtoa_r+0x870>
 8006710:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006714:	464f      	mov	r7, r9
 8006716:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800671a:	2101      	movs	r1, #1
 800671c:	441a      	add	r2, r3
 800671e:	4628      	mov	r0, r5
 8006720:	4499      	add	r9, r3
 8006722:	9209      	str	r2, [sp, #36]	; 0x24
 8006724:	f000 fc7c 	bl	8007020 <__i2b>
 8006728:	4606      	mov	r6, r0
 800672a:	b15f      	cbz	r7, 8006744 <_dtoa_r+0x764>
 800672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd08      	ble.n	8006744 <_dtoa_r+0x764>
 8006732:	42bb      	cmp	r3, r7
 8006734:	bfa8      	it	ge
 8006736:	463b      	movge	r3, r7
 8006738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673a:	eba9 0903 	sub.w	r9, r9, r3
 800673e:	1aff      	subs	r7, r7, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	9309      	str	r3, [sp, #36]	; 0x24
 8006744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006746:	b1f3      	cbz	r3, 8006786 <_dtoa_r+0x7a6>
 8006748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80a0 	beq.w	8006890 <_dtoa_r+0x8b0>
 8006750:	2c00      	cmp	r4, #0
 8006752:	dd10      	ble.n	8006776 <_dtoa_r+0x796>
 8006754:	4631      	mov	r1, r6
 8006756:	4622      	mov	r2, r4
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fd1f 	bl	800719c <__pow5mult>
 800675e:	4652      	mov	r2, sl
 8006760:	4601      	mov	r1, r0
 8006762:	4606      	mov	r6, r0
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fc71 	bl	800704c <__multiply>
 800676a:	4680      	mov	r8, r0
 800676c:	4651      	mov	r1, sl
 800676e:	4628      	mov	r0, r5
 8006770:	f000 fb56 	bl	8006e20 <_Bfree>
 8006774:	46c2      	mov	sl, r8
 8006776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006778:	1b1a      	subs	r2, r3, r4
 800677a:	d004      	beq.n	8006786 <_dtoa_r+0x7a6>
 800677c:	4651      	mov	r1, sl
 800677e:	4628      	mov	r0, r5
 8006780:	f000 fd0c 	bl	800719c <__pow5mult>
 8006784:	4682      	mov	sl, r0
 8006786:	2101      	movs	r1, #1
 8006788:	4628      	mov	r0, r5
 800678a:	f000 fc49 	bl	8007020 <__i2b>
 800678e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006790:	4604      	mov	r4, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	f340 8082 	ble.w	800689c <_dtoa_r+0x8bc>
 8006798:	461a      	mov	r2, r3
 800679a:	4601      	mov	r1, r0
 800679c:	4628      	mov	r0, r5
 800679e:	f000 fcfd 	bl	800719c <__pow5mult>
 80067a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067a4:	4604      	mov	r4, r0
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	dd7b      	ble.n	80068a2 <_dtoa_r+0x8c2>
 80067aa:	f04f 0800 	mov.w	r8, #0
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067b4:	6918      	ldr	r0, [r3, #16]
 80067b6:	f000 fbe5 	bl	8006f84 <__hi0bits>
 80067ba:	f1c0 0020 	rsb	r0, r0, #32
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	4418      	add	r0, r3
 80067c2:	f010 001f 	ands.w	r0, r0, #31
 80067c6:	f000 8092 	beq.w	80068ee <_dtoa_r+0x90e>
 80067ca:	f1c0 0320 	rsb	r3, r0, #32
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	f340 8085 	ble.w	80068de <_dtoa_r+0x8fe>
 80067d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d6:	f1c0 001c 	rsb	r0, r0, #28
 80067da:	4403      	add	r3, r0
 80067dc:	4481      	add	r9, r0
 80067de:	4407      	add	r7, r0
 80067e0:	9309      	str	r3, [sp, #36]	; 0x24
 80067e2:	f1b9 0f00 	cmp.w	r9, #0
 80067e6:	dd05      	ble.n	80067f4 <_dtoa_r+0x814>
 80067e8:	4651      	mov	r1, sl
 80067ea:	464a      	mov	r2, r9
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 fd2f 	bl	8007250 <__lshift>
 80067f2:	4682      	mov	sl, r0
 80067f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dd05      	ble.n	8006806 <_dtoa_r+0x826>
 80067fa:	4621      	mov	r1, r4
 80067fc:	461a      	mov	r2, r3
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fd26 	bl	8007250 <__lshift>
 8006804:	4604      	mov	r4, r0
 8006806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d072      	beq.n	80068f2 <_dtoa_r+0x912>
 800680c:	4621      	mov	r1, r4
 800680e:	4650      	mov	r0, sl
 8006810:	f000 fd8a 	bl	8007328 <__mcmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	da6c      	bge.n	80068f2 <_dtoa_r+0x912>
 8006818:	2300      	movs	r3, #0
 800681a:	4651      	mov	r1, sl
 800681c:	220a      	movs	r2, #10
 800681e:	4628      	mov	r0, r5
 8006820:	f000 fb20 	bl	8006e64 <__multadd>
 8006824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006826:	4682      	mov	sl, r0
 8006828:	f10b 3bff 	add.w	fp, fp, #4294967295
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 81ac 	beq.w	8006b8a <_dtoa_r+0xbaa>
 8006832:	2300      	movs	r3, #0
 8006834:	4631      	mov	r1, r6
 8006836:	220a      	movs	r2, #10
 8006838:	4628      	mov	r0, r5
 800683a:	f000 fb13 	bl	8006e64 <__multadd>
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	4606      	mov	r6, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	f300 8093 	bgt.w	800696e <_dtoa_r+0x98e>
 8006848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800684a:	2b02      	cmp	r3, #2
 800684c:	dc59      	bgt.n	8006902 <_dtoa_r+0x922>
 800684e:	e08e      	b.n	800696e <_dtoa_r+0x98e>
 8006850:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006852:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006856:	e75d      	b.n	8006714 <_dtoa_r+0x734>
 8006858:	9b08      	ldr	r3, [sp, #32]
 800685a:	1e5c      	subs	r4, r3, #1
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	42a3      	cmp	r3, r4
 8006860:	bfbf      	itttt	lt
 8006862:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006864:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006866:	1ae3      	sublt	r3, r4, r3
 8006868:	18d2      	addlt	r2, r2, r3
 800686a:	bfa8      	it	ge
 800686c:	1b1c      	subge	r4, r3, r4
 800686e:	9b08      	ldr	r3, [sp, #32]
 8006870:	bfbe      	ittt	lt
 8006872:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006874:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006876:	2400      	movlt	r4, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfb5      	itete	lt
 800687c:	eba9 0703 	sublt.w	r7, r9, r3
 8006880:	464f      	movge	r7, r9
 8006882:	2300      	movlt	r3, #0
 8006884:	9b08      	ldrge	r3, [sp, #32]
 8006886:	e747      	b.n	8006718 <_dtoa_r+0x738>
 8006888:	464f      	mov	r7, r9
 800688a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800688c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800688e:	e74c      	b.n	800672a <_dtoa_r+0x74a>
 8006890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006892:	e773      	b.n	800677c <_dtoa_r+0x79c>
 8006894:	3fe00000 	.word	0x3fe00000
 8006898:	40240000 	.word	0x40240000
 800689c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800689e:	2b01      	cmp	r3, #1
 80068a0:	dc18      	bgt.n	80068d4 <_dtoa_r+0x8f4>
 80068a2:	9b04      	ldr	r3, [sp, #16]
 80068a4:	b9b3      	cbnz	r3, 80068d4 <_dtoa_r+0x8f4>
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ac:	b993      	cbnz	r3, 80068d4 <_dtoa_r+0x8f4>
 80068ae:	9b05      	ldr	r3, [sp, #20]
 80068b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068b4:	0d1b      	lsrs	r3, r3, #20
 80068b6:	051b      	lsls	r3, r3, #20
 80068b8:	b17b      	cbz	r3, 80068da <_dtoa_r+0x8fa>
 80068ba:	f04f 0801 	mov.w	r8, #1
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	f109 0901 	add.w	r9, r9, #1
 80068c4:	3301      	adds	r3, #1
 80068c6:	9309      	str	r3, [sp, #36]	; 0x24
 80068c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f47f af6f 	bne.w	80067ae <_dtoa_r+0x7ce>
 80068d0:	2001      	movs	r0, #1
 80068d2:	e774      	b.n	80067be <_dtoa_r+0x7de>
 80068d4:	f04f 0800 	mov.w	r8, #0
 80068d8:	e7f6      	b.n	80068c8 <_dtoa_r+0x8e8>
 80068da:	4698      	mov	r8, r3
 80068dc:	e7f4      	b.n	80068c8 <_dtoa_r+0x8e8>
 80068de:	d080      	beq.n	80067e2 <_dtoa_r+0x802>
 80068e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e2:	331c      	adds	r3, #28
 80068e4:	441a      	add	r2, r3
 80068e6:	4499      	add	r9, r3
 80068e8:	441f      	add	r7, r3
 80068ea:	9209      	str	r2, [sp, #36]	; 0x24
 80068ec:	e779      	b.n	80067e2 <_dtoa_r+0x802>
 80068ee:	4603      	mov	r3, r0
 80068f0:	e7f6      	b.n	80068e0 <_dtoa_r+0x900>
 80068f2:	9b08      	ldr	r3, [sp, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dc34      	bgt.n	8006962 <_dtoa_r+0x982>
 80068f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	dd31      	ble.n	8006962 <_dtoa_r+0x982>
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	9306      	str	r3, [sp, #24]
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	b963      	cbnz	r3, 8006920 <_dtoa_r+0x940>
 8006906:	4621      	mov	r1, r4
 8006908:	2205      	movs	r2, #5
 800690a:	4628      	mov	r0, r5
 800690c:	f000 faaa 	bl	8006e64 <__multadd>
 8006910:	4601      	mov	r1, r0
 8006912:	4604      	mov	r4, r0
 8006914:	4650      	mov	r0, sl
 8006916:	f000 fd07 	bl	8007328 <__mcmp>
 800691a:	2800      	cmp	r0, #0
 800691c:	f73f adbf 	bgt.w	800649e <_dtoa_r+0x4be>
 8006920:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006922:	9f03      	ldr	r7, [sp, #12]
 8006924:	ea6f 0b03 	mvn.w	fp, r3
 8006928:	f04f 0800 	mov.w	r8, #0
 800692c:	4621      	mov	r1, r4
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fa76 	bl	8006e20 <_Bfree>
 8006934:	2e00      	cmp	r6, #0
 8006936:	f43f aead 	beq.w	8006694 <_dtoa_r+0x6b4>
 800693a:	f1b8 0f00 	cmp.w	r8, #0
 800693e:	d005      	beq.n	800694c <_dtoa_r+0x96c>
 8006940:	45b0      	cmp	r8, r6
 8006942:	d003      	beq.n	800694c <_dtoa_r+0x96c>
 8006944:	4641      	mov	r1, r8
 8006946:	4628      	mov	r0, r5
 8006948:	f000 fa6a 	bl	8006e20 <_Bfree>
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fa66 	bl	8006e20 <_Bfree>
 8006954:	e69e      	b.n	8006694 <_dtoa_r+0x6b4>
 8006956:	2400      	movs	r4, #0
 8006958:	4626      	mov	r6, r4
 800695a:	e7e1      	b.n	8006920 <_dtoa_r+0x940>
 800695c:	46c3      	mov	fp, r8
 800695e:	4626      	mov	r6, r4
 8006960:	e59d      	b.n	800649e <_dtoa_r+0x4be>
 8006962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80c8 	beq.w	8006afa <_dtoa_r+0xb1a>
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	9306      	str	r3, [sp, #24]
 800696e:	2f00      	cmp	r7, #0
 8006970:	dd05      	ble.n	800697e <_dtoa_r+0x99e>
 8006972:	4631      	mov	r1, r6
 8006974:	463a      	mov	r2, r7
 8006976:	4628      	mov	r0, r5
 8006978:	f000 fc6a 	bl	8007250 <__lshift>
 800697c:	4606      	mov	r6, r0
 800697e:	f1b8 0f00 	cmp.w	r8, #0
 8006982:	d05b      	beq.n	8006a3c <_dtoa_r+0xa5c>
 8006984:	4628      	mov	r0, r5
 8006986:	6871      	ldr	r1, [r6, #4]
 8006988:	f000 fa0a 	bl	8006da0 <_Balloc>
 800698c:	4607      	mov	r7, r0
 800698e:	b928      	cbnz	r0, 800699c <_dtoa_r+0x9bc>
 8006990:	4602      	mov	r2, r0
 8006992:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006996:	4b81      	ldr	r3, [pc, #516]	; (8006b9c <_dtoa_r+0xbbc>)
 8006998:	f7ff bb36 	b.w	8006008 <_dtoa_r+0x28>
 800699c:	6932      	ldr	r2, [r6, #16]
 800699e:	f106 010c 	add.w	r1, r6, #12
 80069a2:	3202      	adds	r2, #2
 80069a4:	0092      	lsls	r2, r2, #2
 80069a6:	300c      	adds	r0, #12
 80069a8:	f001 ff72 	bl	8008890 <memcpy>
 80069ac:	2201      	movs	r2, #1
 80069ae:	4639      	mov	r1, r7
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 fc4d 	bl	8007250 <__lshift>
 80069b6:	46b0      	mov	r8, r6
 80069b8:	4606      	mov	r6, r0
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	9a03      	ldr	r2, [sp, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	9308      	str	r3, [sp, #32]
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	4413      	add	r3, r2
 80069c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c8:	9b04      	ldr	r3, [sp, #16]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	930a      	str	r3, [sp, #40]	; 0x28
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	4621      	mov	r1, r4
 80069d4:	3b01      	subs	r3, #1
 80069d6:	4650      	mov	r0, sl
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	f7ff fa77 	bl	8005ecc <quorem>
 80069de:	4641      	mov	r1, r8
 80069e0:	9006      	str	r0, [sp, #24]
 80069e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069e6:	4650      	mov	r0, sl
 80069e8:	f000 fc9e 	bl	8007328 <__mcmp>
 80069ec:	4632      	mov	r2, r6
 80069ee:	9009      	str	r0, [sp, #36]	; 0x24
 80069f0:	4621      	mov	r1, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 fcb4 	bl	8007360 <__mdiff>
 80069f8:	68c2      	ldr	r2, [r0, #12]
 80069fa:	4607      	mov	r7, r0
 80069fc:	bb02      	cbnz	r2, 8006a40 <_dtoa_r+0xa60>
 80069fe:	4601      	mov	r1, r0
 8006a00:	4650      	mov	r0, sl
 8006a02:	f000 fc91 	bl	8007328 <__mcmp>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4639      	mov	r1, r7
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	920c      	str	r2, [sp, #48]	; 0x30
 8006a0e:	f000 fa07 	bl	8006e20 <_Bfree>
 8006a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a16:	9f08      	ldr	r7, [sp, #32]
 8006a18:	ea43 0102 	orr.w	r1, r3, r2
 8006a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1e:	4319      	orrs	r1, r3
 8006a20:	d110      	bne.n	8006a44 <_dtoa_r+0xa64>
 8006a22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a26:	d029      	beq.n	8006a7c <_dtoa_r+0xa9c>
 8006a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dd02      	ble.n	8006a34 <_dtoa_r+0xa54>
 8006a2e:	9b06      	ldr	r3, [sp, #24]
 8006a30:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	f883 9000 	strb.w	r9, [r3]
 8006a3a:	e777      	b.n	800692c <_dtoa_r+0x94c>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	e7ba      	b.n	80069b6 <_dtoa_r+0x9d6>
 8006a40:	2201      	movs	r2, #1
 8006a42:	e7e1      	b.n	8006a08 <_dtoa_r+0xa28>
 8006a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db04      	blt.n	8006a54 <_dtoa_r+0xa74>
 8006a4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a50:	430b      	orrs	r3, r1
 8006a52:	d120      	bne.n	8006a96 <_dtoa_r+0xab6>
 8006a54:	2a00      	cmp	r2, #0
 8006a56:	dded      	ble.n	8006a34 <_dtoa_r+0xa54>
 8006a58:	4651      	mov	r1, sl
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fbf7 	bl	8007250 <__lshift>
 8006a62:	4621      	mov	r1, r4
 8006a64:	4682      	mov	sl, r0
 8006a66:	f000 fc5f 	bl	8007328 <__mcmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	dc03      	bgt.n	8006a76 <_dtoa_r+0xa96>
 8006a6e:	d1e1      	bne.n	8006a34 <_dtoa_r+0xa54>
 8006a70:	f019 0f01 	tst.w	r9, #1
 8006a74:	d0de      	beq.n	8006a34 <_dtoa_r+0xa54>
 8006a76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a7a:	d1d8      	bne.n	8006a2e <_dtoa_r+0xa4e>
 8006a7c:	2339      	movs	r3, #57	; 0x39
 8006a7e:	9a04      	ldr	r2, [sp, #16]
 8006a80:	7013      	strb	r3, [r2, #0]
 8006a82:	463b      	mov	r3, r7
 8006a84:	461f      	mov	r7, r3
 8006a86:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2a39      	cmp	r2, #57	; 0x39
 8006a8e:	d06b      	beq.n	8006b68 <_dtoa_r+0xb88>
 8006a90:	3201      	adds	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e74a      	b.n	800692c <_dtoa_r+0x94c>
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	dd07      	ble.n	8006aaa <_dtoa_r+0xaca>
 8006a9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a9e:	d0ed      	beq.n	8006a7c <_dtoa_r+0xa9c>
 8006aa0:	9a04      	ldr	r2, [sp, #16]
 8006aa2:	f109 0301 	add.w	r3, r9, #1
 8006aa6:	7013      	strb	r3, [r2, #0]
 8006aa8:	e740      	b.n	800692c <_dtoa_r+0x94c>
 8006aaa:	9b08      	ldr	r3, [sp, #32]
 8006aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aae:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d042      	beq.n	8006b3c <_dtoa_r+0xb5c>
 8006ab6:	4651      	mov	r1, sl
 8006ab8:	2300      	movs	r3, #0
 8006aba:	220a      	movs	r2, #10
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f9d1 	bl	8006e64 <__multadd>
 8006ac2:	45b0      	cmp	r8, r6
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	f04f 020a 	mov.w	r2, #10
 8006ace:	4641      	mov	r1, r8
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	d107      	bne.n	8006ae4 <_dtoa_r+0xb04>
 8006ad4:	f000 f9c6 	bl	8006e64 <__multadd>
 8006ad8:	4680      	mov	r8, r0
 8006ada:	4606      	mov	r6, r0
 8006adc:	9b08      	ldr	r3, [sp, #32]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	9308      	str	r3, [sp, #32]
 8006ae2:	e775      	b.n	80069d0 <_dtoa_r+0x9f0>
 8006ae4:	f000 f9be 	bl	8006e64 <__multadd>
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4680      	mov	r8, r0
 8006aec:	2300      	movs	r3, #0
 8006aee:	220a      	movs	r2, #10
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 f9b7 	bl	8006e64 <__multadd>
 8006af6:	4606      	mov	r6, r0
 8006af8:	e7f0      	b.n	8006adc <_dtoa_r+0xafc>
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	9306      	str	r3, [sp, #24]
 8006afe:	9f03      	ldr	r7, [sp, #12]
 8006b00:	4621      	mov	r1, r4
 8006b02:	4650      	mov	r0, sl
 8006b04:	f7ff f9e2 	bl	8005ecc <quorem>
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b0e:	f807 9b01 	strb.w	r9, [r7], #1
 8006b12:	1afa      	subs	r2, r7, r3
 8006b14:	9b06      	ldr	r3, [sp, #24]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	dd07      	ble.n	8006b2a <_dtoa_r+0xb4a>
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	220a      	movs	r2, #10
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 f99f 	bl	8006e64 <__multadd>
 8006b26:	4682      	mov	sl, r0
 8006b28:	e7ea      	b.n	8006b00 <_dtoa_r+0xb20>
 8006b2a:	9b06      	ldr	r3, [sp, #24]
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfcc      	ite	gt
 8006b34:	461f      	movgt	r7, r3
 8006b36:	2701      	movle	r7, #1
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	441f      	add	r7, r3
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 fb85 	bl	8007250 <__lshift>
 8006b46:	4621      	mov	r1, r4
 8006b48:	4682      	mov	sl, r0
 8006b4a:	f000 fbed 	bl	8007328 <__mcmp>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	dc97      	bgt.n	8006a82 <_dtoa_r+0xaa2>
 8006b52:	d102      	bne.n	8006b5a <_dtoa_r+0xb7a>
 8006b54:	f019 0f01 	tst.w	r9, #1
 8006b58:	d193      	bne.n	8006a82 <_dtoa_r+0xaa2>
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	461f      	mov	r7, r3
 8006b5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b62:	2a30      	cmp	r2, #48	; 0x30
 8006b64:	d0fa      	beq.n	8006b5c <_dtoa_r+0xb7c>
 8006b66:	e6e1      	b.n	800692c <_dtoa_r+0x94c>
 8006b68:	9a03      	ldr	r2, [sp, #12]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d18a      	bne.n	8006a84 <_dtoa_r+0xaa4>
 8006b6e:	2331      	movs	r3, #49	; 0x31
 8006b70:	f10b 0b01 	add.w	fp, fp, #1
 8006b74:	e797      	b.n	8006aa6 <_dtoa_r+0xac6>
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <_dtoa_r+0xbc0>)
 8006b78:	f7ff ba9f 	b.w	80060ba <_dtoa_r+0xda>
 8006b7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f47f aa77 	bne.w	8006072 <_dtoa_r+0x92>
 8006b84:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <_dtoa_r+0xbc4>)
 8006b86:	f7ff ba98 	b.w	80060ba <_dtoa_r+0xda>
 8006b8a:	9b06      	ldr	r3, [sp, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dcb6      	bgt.n	8006afe <_dtoa_r+0xb1e>
 8006b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	f73f aeb5 	bgt.w	8006902 <_dtoa_r+0x922>
 8006b98:	e7b1      	b.n	8006afe <_dtoa_r+0xb1e>
 8006b9a:	bf00      	nop
 8006b9c:	08009723 	.word	0x08009723
 8006ba0:	0800967e 	.word	0x0800967e
 8006ba4:	080096a7 	.word	0x080096a7

08006ba8 <_free_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4605      	mov	r5, r0
 8006bac:	2900      	cmp	r1, #0
 8006bae:	d040      	beq.n	8006c32 <_free_r+0x8a>
 8006bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb4:	1f0c      	subs	r4, r1, #4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfb8      	it	lt
 8006bba:	18e4      	addlt	r4, r4, r3
 8006bbc:	f000 f8e4 	bl	8006d88 <__malloc_lock>
 8006bc0:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <_free_r+0x8c>)
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	b933      	cbnz	r3, 8006bd4 <_free_r+0x2c>
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	6014      	str	r4, [r2, #0]
 8006bca:	4628      	mov	r0, r5
 8006bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd0:	f000 b8e0 	b.w	8006d94 <__malloc_unlock>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d908      	bls.n	8006bea <_free_r+0x42>
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	1821      	adds	r1, r4, r0
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf01      	itttt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	1809      	addeq	r1, r1, r0
 8006be6:	6021      	streq	r1, [r4, #0]
 8006be8:	e7ed      	b.n	8006bc6 <_free_r+0x1e>
 8006bea:	461a      	mov	r2, r3
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b10b      	cbz	r3, 8006bf4 <_free_r+0x4c>
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d9fa      	bls.n	8006bea <_free_r+0x42>
 8006bf4:	6811      	ldr	r1, [r2, #0]
 8006bf6:	1850      	adds	r0, r2, r1
 8006bf8:	42a0      	cmp	r0, r4
 8006bfa:	d10b      	bne.n	8006c14 <_free_r+0x6c>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	4401      	add	r1, r0
 8006c00:	1850      	adds	r0, r2, r1
 8006c02:	4283      	cmp	r3, r0
 8006c04:	6011      	str	r1, [r2, #0]
 8006c06:	d1e0      	bne.n	8006bca <_free_r+0x22>
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4408      	add	r0, r1
 8006c0e:	6010      	str	r0, [r2, #0]
 8006c10:	6053      	str	r3, [r2, #4]
 8006c12:	e7da      	b.n	8006bca <_free_r+0x22>
 8006c14:	d902      	bls.n	8006c1c <_free_r+0x74>
 8006c16:	230c      	movs	r3, #12
 8006c18:	602b      	str	r3, [r5, #0]
 8006c1a:	e7d6      	b.n	8006bca <_free_r+0x22>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	1821      	adds	r1, r4, r0
 8006c20:	428b      	cmp	r3, r1
 8006c22:	bf01      	itttt	eq
 8006c24:	6819      	ldreq	r1, [r3, #0]
 8006c26:	685b      	ldreq	r3, [r3, #4]
 8006c28:	1809      	addeq	r1, r1, r0
 8006c2a:	6021      	streq	r1, [r4, #0]
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	6054      	str	r4, [r2, #4]
 8006c30:	e7cb      	b.n	8006bca <_free_r+0x22>
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200004a0 	.word	0x200004a0

08006c38 <malloc>:
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <malloc+0xc>)
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	f000 b823 	b.w	8006c88 <_malloc_r>
 8006c42:	bf00      	nop
 8006c44:	20000064 	.word	0x20000064

08006c48 <sbrk_aligned>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4e0e      	ldr	r6, [pc, #56]	; (8006c84 <sbrk_aligned+0x3c>)
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	6831      	ldr	r1, [r6, #0]
 8006c50:	4605      	mov	r5, r0
 8006c52:	b911      	cbnz	r1, 8006c5a <sbrk_aligned+0x12>
 8006c54:	f001 fe0c 	bl	8008870 <_sbrk_r>
 8006c58:	6030      	str	r0, [r6, #0]
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f001 fe07 	bl	8008870 <_sbrk_r>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d00a      	beq.n	8006c7c <sbrk_aligned+0x34>
 8006c66:	1cc4      	adds	r4, r0, #3
 8006c68:	f024 0403 	bic.w	r4, r4, #3
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	d007      	beq.n	8006c80 <sbrk_aligned+0x38>
 8006c70:	1a21      	subs	r1, r4, r0
 8006c72:	4628      	mov	r0, r5
 8006c74:	f001 fdfc 	bl	8008870 <_sbrk_r>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d101      	bne.n	8006c80 <sbrk_aligned+0x38>
 8006c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c80:	4620      	mov	r0, r4
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	200004a4 	.word	0x200004a4

08006c88 <_malloc_r>:
 8006c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	1ccd      	adds	r5, r1, #3
 8006c8e:	f025 0503 	bic.w	r5, r5, #3
 8006c92:	3508      	adds	r5, #8
 8006c94:	2d0c      	cmp	r5, #12
 8006c96:	bf38      	it	cc
 8006c98:	250c      	movcc	r5, #12
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	db01      	blt.n	8006ca4 <_malloc_r+0x1c>
 8006ca0:	42a9      	cmp	r1, r5
 8006ca2:	d905      	bls.n	8006cb0 <_malloc_r+0x28>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	4630      	mov	r0, r6
 8006cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d84 <_malloc_r+0xfc>
 8006cb4:	f000 f868 	bl	8006d88 <__malloc_lock>
 8006cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cbc:	461c      	mov	r4, r3
 8006cbe:	bb5c      	cbnz	r4, 8006d18 <_malloc_r+0x90>
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	f7ff ffc0 	bl	8006c48 <sbrk_aligned>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	4604      	mov	r4, r0
 8006ccc:	d155      	bne.n	8006d7a <_malloc_r+0xf2>
 8006cce:	f8d8 4000 	ldr.w	r4, [r8]
 8006cd2:	4626      	mov	r6, r4
 8006cd4:	2e00      	cmp	r6, #0
 8006cd6:	d145      	bne.n	8006d64 <_malloc_r+0xdc>
 8006cd8:	2c00      	cmp	r4, #0
 8006cda:	d048      	beq.n	8006d6e <_malloc_r+0xe6>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	eb04 0903 	add.w	r9, r4, r3
 8006ce6:	f001 fdc3 	bl	8008870 <_sbrk_r>
 8006cea:	4581      	cmp	r9, r0
 8006cec:	d13f      	bne.n	8006d6e <_malloc_r+0xe6>
 8006cee:	6821      	ldr	r1, [r4, #0]
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	1a6d      	subs	r5, r5, r1
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7ff ffa7 	bl	8006c48 <sbrk_aligned>
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d037      	beq.n	8006d6e <_malloc_r+0xe6>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	442b      	add	r3, r5
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	f8d8 3000 	ldr.w	r3, [r8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d038      	beq.n	8006d7e <_malloc_r+0xf6>
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	42a2      	cmp	r2, r4
 8006d10:	d12b      	bne.n	8006d6a <_malloc_r+0xe2>
 8006d12:	2200      	movs	r2, #0
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e00f      	b.n	8006d38 <_malloc_r+0xb0>
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	1b52      	subs	r2, r2, r5
 8006d1c:	d41f      	bmi.n	8006d5e <_malloc_r+0xd6>
 8006d1e:	2a0b      	cmp	r2, #11
 8006d20:	d917      	bls.n	8006d52 <_malloc_r+0xca>
 8006d22:	1961      	adds	r1, r4, r5
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	6025      	str	r5, [r4, #0]
 8006d28:	bf18      	it	ne
 8006d2a:	6059      	strne	r1, [r3, #4]
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	bf08      	it	eq
 8006d30:	f8c8 1000 	streq.w	r1, [r8]
 8006d34:	5162      	str	r2, [r4, r5]
 8006d36:	604b      	str	r3, [r1, #4]
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f104 060b 	add.w	r6, r4, #11
 8006d3e:	f000 f829 	bl	8006d94 <__malloc_unlock>
 8006d42:	f026 0607 	bic.w	r6, r6, #7
 8006d46:	1d23      	adds	r3, r4, #4
 8006d48:	1af2      	subs	r2, r6, r3
 8006d4a:	d0ae      	beq.n	8006caa <_malloc_r+0x22>
 8006d4c:	1b9b      	subs	r3, r3, r6
 8006d4e:	50a3      	str	r3, [r4, r2]
 8006d50:	e7ab      	b.n	8006caa <_malloc_r+0x22>
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	6862      	ldr	r2, [r4, #4]
 8006d56:	d1dd      	bne.n	8006d14 <_malloc_r+0x8c>
 8006d58:	f8c8 2000 	str.w	r2, [r8]
 8006d5c:	e7ec      	b.n	8006d38 <_malloc_r+0xb0>
 8006d5e:	4623      	mov	r3, r4
 8006d60:	6864      	ldr	r4, [r4, #4]
 8006d62:	e7ac      	b.n	8006cbe <_malloc_r+0x36>
 8006d64:	4634      	mov	r4, r6
 8006d66:	6876      	ldr	r6, [r6, #4]
 8006d68:	e7b4      	b.n	8006cd4 <_malloc_r+0x4c>
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	e7cc      	b.n	8006d08 <_malloc_r+0x80>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	4638      	mov	r0, r7
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	f000 f80e 	bl	8006d94 <__malloc_unlock>
 8006d78:	e797      	b.n	8006caa <_malloc_r+0x22>
 8006d7a:	6025      	str	r5, [r4, #0]
 8006d7c:	e7dc      	b.n	8006d38 <_malloc_r+0xb0>
 8006d7e:	605b      	str	r3, [r3, #4]
 8006d80:	deff      	udf	#255	; 0xff
 8006d82:	bf00      	nop
 8006d84:	200004a0 	.word	0x200004a0

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f7ff b88a 	b.w	8005ea2 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	2000049c 	.word	0x2000049c

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f7ff b885 	b.w	8005ea4 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	2000049c 	.word	0x2000049c

08006da0 <_Balloc>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	69c6      	ldr	r6, [r0, #28]
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	b976      	cbnz	r6, 8006dc8 <_Balloc+0x28>
 8006daa:	2010      	movs	r0, #16
 8006dac:	f7ff ff44 	bl	8006c38 <malloc>
 8006db0:	4602      	mov	r2, r0
 8006db2:	61e0      	str	r0, [r4, #28]
 8006db4:	b920      	cbnz	r0, 8006dc0 <_Balloc+0x20>
 8006db6:	216b      	movs	r1, #107	; 0x6b
 8006db8:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <_Balloc+0x78>)
 8006dba:	4818      	ldr	r0, [pc, #96]	; (8006e1c <_Balloc+0x7c>)
 8006dbc:	f001 fd7c 	bl	80088b8 <__assert_func>
 8006dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc4:	6006      	str	r6, [r0, #0]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	69e6      	ldr	r6, [r4, #28]
 8006dca:	68f3      	ldr	r3, [r6, #12]
 8006dcc:	b183      	cbz	r3, 8006df0 <_Balloc+0x50>
 8006dce:	69e3      	ldr	r3, [r4, #28]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dd6:	b9b8      	cbnz	r0, 8006e08 <_Balloc+0x68>
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f605 	lsl.w	r6, r1, r5
 8006dde:	1d72      	adds	r2, r6, #5
 8006de0:	4620      	mov	r0, r4
 8006de2:	0092      	lsls	r2, r2, #2
 8006de4:	f001 fd86 	bl	80088f4 <_calloc_r>
 8006de8:	b160      	cbz	r0, 8006e04 <_Balloc+0x64>
 8006dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dee:	e00e      	b.n	8006e0e <_Balloc+0x6e>
 8006df0:	2221      	movs	r2, #33	; 0x21
 8006df2:	2104      	movs	r1, #4
 8006df4:	4620      	mov	r0, r4
 8006df6:	f001 fd7d 	bl	80088f4 <_calloc_r>
 8006dfa:	69e3      	ldr	r3, [r4, #28]
 8006dfc:	60f0      	str	r0, [r6, #12]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <_Balloc+0x2e>
 8006e04:	2000      	movs	r0, #0
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	6802      	ldr	r2, [r0, #0]
 8006e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e14:	e7f7      	b.n	8006e06 <_Balloc+0x66>
 8006e16:	bf00      	nop
 8006e18:	080096b4 	.word	0x080096b4
 8006e1c:	08009734 	.word	0x08009734

08006e20 <_Bfree>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	69c6      	ldr	r6, [r0, #28]
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b976      	cbnz	r6, 8006e48 <_Bfree+0x28>
 8006e2a:	2010      	movs	r0, #16
 8006e2c:	f7ff ff04 	bl	8006c38 <malloc>
 8006e30:	4602      	mov	r2, r0
 8006e32:	61e8      	str	r0, [r5, #28]
 8006e34:	b920      	cbnz	r0, 8006e40 <_Bfree+0x20>
 8006e36:	218f      	movs	r1, #143	; 0x8f
 8006e38:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <_Bfree+0x3c>)
 8006e3a:	4809      	ldr	r0, [pc, #36]	; (8006e60 <_Bfree+0x40>)
 8006e3c:	f001 fd3c 	bl	80088b8 <__assert_func>
 8006e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e44:	6006      	str	r6, [r0, #0]
 8006e46:	60c6      	str	r6, [r0, #12]
 8006e48:	b13c      	cbz	r4, 8006e5a <_Bfree+0x3a>
 8006e4a:	69eb      	ldr	r3, [r5, #28]
 8006e4c:	6862      	ldr	r2, [r4, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e54:	6021      	str	r1, [r4, #0]
 8006e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	080096b4 	.word	0x080096b4
 8006e60:	08009734 	.word	0x08009734

08006e64 <__multadd>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	4607      	mov	r7, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	461e      	mov	r6, r3
 8006e6e:	2000      	movs	r0, #0
 8006e70:	690d      	ldr	r5, [r1, #16]
 8006e72:	f101 0c14 	add.w	ip, r1, #20
 8006e76:	f8dc 3000 	ldr.w	r3, [ip]
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	b299      	uxth	r1, r3
 8006e7e:	fb02 6101 	mla	r1, r2, r1, r6
 8006e82:	0c1e      	lsrs	r6, r3, #16
 8006e84:	0c0b      	lsrs	r3, r1, #16
 8006e86:	fb02 3306 	mla	r3, r2, r6, r3
 8006e8a:	b289      	uxth	r1, r1
 8006e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e90:	4285      	cmp	r5, r0
 8006e92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e96:	f84c 1b04 	str.w	r1, [ip], #4
 8006e9a:	dcec      	bgt.n	8006e76 <__multadd+0x12>
 8006e9c:	b30e      	cbz	r6, 8006ee2 <__multadd+0x7e>
 8006e9e:	68a3      	ldr	r3, [r4, #8]
 8006ea0:	42ab      	cmp	r3, r5
 8006ea2:	dc19      	bgt.n	8006ed8 <__multadd+0x74>
 8006ea4:	6861      	ldr	r1, [r4, #4]
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	f7ff ff79 	bl	8006da0 <_Balloc>
 8006eae:	4680      	mov	r8, r0
 8006eb0:	b928      	cbnz	r0, 8006ebe <__multadd+0x5a>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	21ba      	movs	r1, #186	; 0xba
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <__multadd+0x84>)
 8006eb8:	480c      	ldr	r0, [pc, #48]	; (8006eec <__multadd+0x88>)
 8006eba:	f001 fcfd 	bl	80088b8 <__assert_func>
 8006ebe:	6922      	ldr	r2, [r4, #16]
 8006ec0:	f104 010c 	add.w	r1, r4, #12
 8006ec4:	3202      	adds	r2, #2
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	300c      	adds	r0, #12
 8006eca:	f001 fce1 	bl	8008890 <memcpy>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ffa5 	bl	8006e20 <_Bfree>
 8006ed6:	4644      	mov	r4, r8
 8006ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006edc:	3501      	adds	r5, #1
 8006ede:	615e      	str	r6, [r3, #20]
 8006ee0:	6125      	str	r5, [r4, #16]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee8:	08009723 	.word	0x08009723
 8006eec:	08009734 	.word	0x08009734

08006ef0 <__s2b>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	4615      	mov	r5, r2
 8006ef6:	2209      	movs	r2, #9
 8006ef8:	461f      	mov	r7, r3
 8006efa:	3308      	adds	r3, #8
 8006efc:	460c      	mov	r4, r1
 8006efe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f02:	4606      	mov	r6, r0
 8006f04:	2201      	movs	r2, #1
 8006f06:	2100      	movs	r1, #0
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	db09      	blt.n	8006f20 <__s2b+0x30>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff ff47 	bl	8006da0 <_Balloc>
 8006f12:	b940      	cbnz	r0, 8006f26 <__s2b+0x36>
 8006f14:	4602      	mov	r2, r0
 8006f16:	21d3      	movs	r1, #211	; 0xd3
 8006f18:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <__s2b+0x8c>)
 8006f1a:	4819      	ldr	r0, [pc, #100]	; (8006f80 <__s2b+0x90>)
 8006f1c:	f001 fccc 	bl	80088b8 <__assert_func>
 8006f20:	0052      	lsls	r2, r2, #1
 8006f22:	3101      	adds	r1, #1
 8006f24:	e7f0      	b.n	8006f08 <__s2b+0x18>
 8006f26:	9b08      	ldr	r3, [sp, #32]
 8006f28:	2d09      	cmp	r5, #9
 8006f2a:	6143      	str	r3, [r0, #20]
 8006f2c:	f04f 0301 	mov.w	r3, #1
 8006f30:	6103      	str	r3, [r0, #16]
 8006f32:	dd16      	ble.n	8006f62 <__s2b+0x72>
 8006f34:	f104 0909 	add.w	r9, r4, #9
 8006f38:	46c8      	mov	r8, r9
 8006f3a:	442c      	add	r4, r5
 8006f3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f40:	4601      	mov	r1, r0
 8006f42:	220a      	movs	r2, #10
 8006f44:	4630      	mov	r0, r6
 8006f46:	3b30      	subs	r3, #48	; 0x30
 8006f48:	f7ff ff8c 	bl	8006e64 <__multadd>
 8006f4c:	45a0      	cmp	r8, r4
 8006f4e:	d1f5      	bne.n	8006f3c <__s2b+0x4c>
 8006f50:	f1a5 0408 	sub.w	r4, r5, #8
 8006f54:	444c      	add	r4, r9
 8006f56:	1b2d      	subs	r5, r5, r4
 8006f58:	1963      	adds	r3, r4, r5
 8006f5a:	42bb      	cmp	r3, r7
 8006f5c:	db04      	blt.n	8006f68 <__s2b+0x78>
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	2509      	movs	r5, #9
 8006f64:	340a      	adds	r4, #10
 8006f66:	e7f6      	b.n	8006f56 <__s2b+0x66>
 8006f68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	220a      	movs	r2, #10
 8006f70:	4630      	mov	r0, r6
 8006f72:	3b30      	subs	r3, #48	; 0x30
 8006f74:	f7ff ff76 	bl	8006e64 <__multadd>
 8006f78:	e7ee      	b.n	8006f58 <__s2b+0x68>
 8006f7a:	bf00      	nop
 8006f7c:	08009723 	.word	0x08009723
 8006f80:	08009734 	.word	0x08009734

08006f84 <__hi0bits>:
 8006f84:	0c02      	lsrs	r2, r0, #16
 8006f86:	0412      	lsls	r2, r2, #16
 8006f88:	4603      	mov	r3, r0
 8006f8a:	b9ca      	cbnz	r2, 8006fc0 <__hi0bits+0x3c>
 8006f8c:	0403      	lsls	r3, r0, #16
 8006f8e:	2010      	movs	r0, #16
 8006f90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f94:	bf04      	itt	eq
 8006f96:	021b      	lsleq	r3, r3, #8
 8006f98:	3008      	addeq	r0, #8
 8006f9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f9e:	bf04      	itt	eq
 8006fa0:	011b      	lsleq	r3, r3, #4
 8006fa2:	3004      	addeq	r0, #4
 8006fa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fa8:	bf04      	itt	eq
 8006faa:	009b      	lsleq	r3, r3, #2
 8006fac:	3002      	addeq	r0, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	db05      	blt.n	8006fbe <__hi0bits+0x3a>
 8006fb2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006fb6:	f100 0001 	add.w	r0, r0, #1
 8006fba:	bf08      	it	eq
 8006fbc:	2020      	moveq	r0, #32
 8006fbe:	4770      	bx	lr
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e7e5      	b.n	8006f90 <__hi0bits+0xc>

08006fc4 <__lo0bits>:
 8006fc4:	6803      	ldr	r3, [r0, #0]
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	f013 0007 	ands.w	r0, r3, #7
 8006fcc:	d00b      	beq.n	8006fe6 <__lo0bits+0x22>
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d421      	bmi.n	8007016 <__lo0bits+0x52>
 8006fd2:	0798      	lsls	r0, r3, #30
 8006fd4:	bf49      	itett	mi
 8006fd6:	085b      	lsrmi	r3, r3, #1
 8006fd8:	089b      	lsrpl	r3, r3, #2
 8006fda:	2001      	movmi	r0, #1
 8006fdc:	6013      	strmi	r3, [r2, #0]
 8006fde:	bf5c      	itt	pl
 8006fe0:	2002      	movpl	r0, #2
 8006fe2:	6013      	strpl	r3, [r2, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	b299      	uxth	r1, r3
 8006fe8:	b909      	cbnz	r1, 8006fee <__lo0bits+0x2a>
 8006fea:	2010      	movs	r0, #16
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	b2d9      	uxtb	r1, r3
 8006ff0:	b909      	cbnz	r1, 8006ff6 <__lo0bits+0x32>
 8006ff2:	3008      	adds	r0, #8
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	0719      	lsls	r1, r3, #28
 8006ff8:	bf04      	itt	eq
 8006ffa:	091b      	lsreq	r3, r3, #4
 8006ffc:	3004      	addeq	r0, #4
 8006ffe:	0799      	lsls	r1, r3, #30
 8007000:	bf04      	itt	eq
 8007002:	089b      	lsreq	r3, r3, #2
 8007004:	3002      	addeq	r0, #2
 8007006:	07d9      	lsls	r1, r3, #31
 8007008:	d403      	bmi.n	8007012 <__lo0bits+0x4e>
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	f100 0001 	add.w	r0, r0, #1
 8007010:	d003      	beq.n	800701a <__lo0bits+0x56>
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4770      	bx	lr
 8007016:	2000      	movs	r0, #0
 8007018:	4770      	bx	lr
 800701a:	2020      	movs	r0, #32
 800701c:	4770      	bx	lr
	...

08007020 <__i2b>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	2101      	movs	r1, #1
 8007026:	f7ff febb 	bl	8006da0 <_Balloc>
 800702a:	4602      	mov	r2, r0
 800702c:	b928      	cbnz	r0, 800703a <__i2b+0x1a>
 800702e:	f240 1145 	movw	r1, #325	; 0x145
 8007032:	4b04      	ldr	r3, [pc, #16]	; (8007044 <__i2b+0x24>)
 8007034:	4804      	ldr	r0, [pc, #16]	; (8007048 <__i2b+0x28>)
 8007036:	f001 fc3f 	bl	80088b8 <__assert_func>
 800703a:	2301      	movs	r3, #1
 800703c:	6144      	str	r4, [r0, #20]
 800703e:	6103      	str	r3, [r0, #16]
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop
 8007044:	08009723 	.word	0x08009723
 8007048:	08009734 	.word	0x08009734

0800704c <__multiply>:
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	4691      	mov	r9, r2
 8007052:	690a      	ldr	r2, [r1, #16]
 8007054:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007058:	460c      	mov	r4, r1
 800705a:	429a      	cmp	r2, r3
 800705c:	bfbe      	ittt	lt
 800705e:	460b      	movlt	r3, r1
 8007060:	464c      	movlt	r4, r9
 8007062:	4699      	movlt	r9, r3
 8007064:	6927      	ldr	r7, [r4, #16]
 8007066:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	6861      	ldr	r1, [r4, #4]
 800706e:	eb07 060a 	add.w	r6, r7, sl
 8007072:	42b3      	cmp	r3, r6
 8007074:	b085      	sub	sp, #20
 8007076:	bfb8      	it	lt
 8007078:	3101      	addlt	r1, #1
 800707a:	f7ff fe91 	bl	8006da0 <_Balloc>
 800707e:	b930      	cbnz	r0, 800708e <__multiply+0x42>
 8007080:	4602      	mov	r2, r0
 8007082:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007086:	4b43      	ldr	r3, [pc, #268]	; (8007194 <__multiply+0x148>)
 8007088:	4843      	ldr	r0, [pc, #268]	; (8007198 <__multiply+0x14c>)
 800708a:	f001 fc15 	bl	80088b8 <__assert_func>
 800708e:	f100 0514 	add.w	r5, r0, #20
 8007092:	462b      	mov	r3, r5
 8007094:	2200      	movs	r2, #0
 8007096:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800709a:	4543      	cmp	r3, r8
 800709c:	d321      	bcc.n	80070e2 <__multiply+0x96>
 800709e:	f104 0314 	add.w	r3, r4, #20
 80070a2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070a6:	f109 0314 	add.w	r3, r9, #20
 80070aa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070ae:	9202      	str	r2, [sp, #8]
 80070b0:	1b3a      	subs	r2, r7, r4
 80070b2:	3a15      	subs	r2, #21
 80070b4:	f022 0203 	bic.w	r2, r2, #3
 80070b8:	3204      	adds	r2, #4
 80070ba:	f104 0115 	add.w	r1, r4, #21
 80070be:	428f      	cmp	r7, r1
 80070c0:	bf38      	it	cc
 80070c2:	2204      	movcc	r2, #4
 80070c4:	9201      	str	r2, [sp, #4]
 80070c6:	9a02      	ldr	r2, [sp, #8]
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d80c      	bhi.n	80070e8 <__multiply+0x9c>
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	dd03      	ble.n	80070da <__multiply+0x8e>
 80070d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d05a      	beq.n	8007190 <__multiply+0x144>
 80070da:	6106      	str	r6, [r0, #16]
 80070dc:	b005      	add	sp, #20
 80070de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e2:	f843 2b04 	str.w	r2, [r3], #4
 80070e6:	e7d8      	b.n	800709a <__multiply+0x4e>
 80070e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80070ec:	f1ba 0f00 	cmp.w	sl, #0
 80070f0:	d023      	beq.n	800713a <__multiply+0xee>
 80070f2:	46a9      	mov	r9, r5
 80070f4:	f04f 0c00 	mov.w	ip, #0
 80070f8:	f104 0e14 	add.w	lr, r4, #20
 80070fc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007100:	f8d9 1000 	ldr.w	r1, [r9]
 8007104:	fa1f fb82 	uxth.w	fp, r2
 8007108:	b289      	uxth	r1, r1
 800710a:	fb0a 110b 	mla	r1, sl, fp, r1
 800710e:	4461      	add	r1, ip
 8007110:	f8d9 c000 	ldr.w	ip, [r9]
 8007114:	0c12      	lsrs	r2, r2, #16
 8007116:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800711a:	fb0a c202 	mla	r2, sl, r2, ip
 800711e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007122:	b289      	uxth	r1, r1
 8007124:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007128:	4577      	cmp	r7, lr
 800712a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800712e:	f849 1b04 	str.w	r1, [r9], #4
 8007132:	d8e3      	bhi.n	80070fc <__multiply+0xb0>
 8007134:	9a01      	ldr	r2, [sp, #4]
 8007136:	f845 c002 	str.w	ip, [r5, r2]
 800713a:	9a03      	ldr	r2, [sp, #12]
 800713c:	3304      	adds	r3, #4
 800713e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007142:	f1b9 0f00 	cmp.w	r9, #0
 8007146:	d021      	beq.n	800718c <__multiply+0x140>
 8007148:	46ae      	mov	lr, r5
 800714a:	f04f 0a00 	mov.w	sl, #0
 800714e:	6829      	ldr	r1, [r5, #0]
 8007150:	f104 0c14 	add.w	ip, r4, #20
 8007154:	f8bc b000 	ldrh.w	fp, [ip]
 8007158:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800715c:	b289      	uxth	r1, r1
 800715e:	fb09 220b 	mla	r2, r9, fp, r2
 8007162:	4452      	add	r2, sl
 8007164:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007168:	f84e 1b04 	str.w	r1, [lr], #4
 800716c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007174:	f8be 1000 	ldrh.w	r1, [lr]
 8007178:	4567      	cmp	r7, ip
 800717a:	fb09 110a 	mla	r1, r9, sl, r1
 800717e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007182:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007186:	d8e5      	bhi.n	8007154 <__multiply+0x108>
 8007188:	9a01      	ldr	r2, [sp, #4]
 800718a:	50a9      	str	r1, [r5, r2]
 800718c:	3504      	adds	r5, #4
 800718e:	e79a      	b.n	80070c6 <__multiply+0x7a>
 8007190:	3e01      	subs	r6, #1
 8007192:	e79c      	b.n	80070ce <__multiply+0x82>
 8007194:	08009723 	.word	0x08009723
 8007198:	08009734 	.word	0x08009734

0800719c <__pow5mult>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	4615      	mov	r5, r2
 80071a2:	f012 0203 	ands.w	r2, r2, #3
 80071a6:	4606      	mov	r6, r0
 80071a8:	460f      	mov	r7, r1
 80071aa:	d007      	beq.n	80071bc <__pow5mult+0x20>
 80071ac:	4c25      	ldr	r4, [pc, #148]	; (8007244 <__pow5mult+0xa8>)
 80071ae:	3a01      	subs	r2, #1
 80071b0:	2300      	movs	r3, #0
 80071b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071b6:	f7ff fe55 	bl	8006e64 <__multadd>
 80071ba:	4607      	mov	r7, r0
 80071bc:	10ad      	asrs	r5, r5, #2
 80071be:	d03d      	beq.n	800723c <__pow5mult+0xa0>
 80071c0:	69f4      	ldr	r4, [r6, #28]
 80071c2:	b97c      	cbnz	r4, 80071e4 <__pow5mult+0x48>
 80071c4:	2010      	movs	r0, #16
 80071c6:	f7ff fd37 	bl	8006c38 <malloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	61f0      	str	r0, [r6, #28]
 80071ce:	b928      	cbnz	r0, 80071dc <__pow5mult+0x40>
 80071d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80071d4:	4b1c      	ldr	r3, [pc, #112]	; (8007248 <__pow5mult+0xac>)
 80071d6:	481d      	ldr	r0, [pc, #116]	; (800724c <__pow5mult+0xb0>)
 80071d8:	f001 fb6e 	bl	80088b8 <__assert_func>
 80071dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e0:	6004      	str	r4, [r0, #0]
 80071e2:	60c4      	str	r4, [r0, #12]
 80071e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80071e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071ec:	b94c      	cbnz	r4, 8007202 <__pow5mult+0x66>
 80071ee:	f240 2171 	movw	r1, #625	; 0x271
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ff14 	bl	8007020 <__i2b>
 80071f8:	2300      	movs	r3, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007200:	6003      	str	r3, [r0, #0]
 8007202:	f04f 0900 	mov.w	r9, #0
 8007206:	07eb      	lsls	r3, r5, #31
 8007208:	d50a      	bpl.n	8007220 <__pow5mult+0x84>
 800720a:	4639      	mov	r1, r7
 800720c:	4622      	mov	r2, r4
 800720e:	4630      	mov	r0, r6
 8007210:	f7ff ff1c 	bl	800704c <__multiply>
 8007214:	4680      	mov	r8, r0
 8007216:	4639      	mov	r1, r7
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff fe01 	bl	8006e20 <_Bfree>
 800721e:	4647      	mov	r7, r8
 8007220:	106d      	asrs	r5, r5, #1
 8007222:	d00b      	beq.n	800723c <__pow5mult+0xa0>
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	b938      	cbnz	r0, 8007238 <__pow5mult+0x9c>
 8007228:	4622      	mov	r2, r4
 800722a:	4621      	mov	r1, r4
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff ff0d 	bl	800704c <__multiply>
 8007232:	6020      	str	r0, [r4, #0]
 8007234:	f8c0 9000 	str.w	r9, [r0]
 8007238:	4604      	mov	r4, r0
 800723a:	e7e4      	b.n	8007206 <__pow5mult+0x6a>
 800723c:	4638      	mov	r0, r7
 800723e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007242:	bf00      	nop
 8007244:	08009880 	.word	0x08009880
 8007248:	080096b4 	.word	0x080096b4
 800724c:	08009734 	.word	0x08009734

08007250 <__lshift>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	460c      	mov	r4, r1
 8007256:	4607      	mov	r7, r0
 8007258:	4691      	mov	r9, r2
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	6849      	ldr	r1, [r1, #4]
 800725e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007262:	68a3      	ldr	r3, [r4, #8]
 8007264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007268:	f108 0601 	add.w	r6, r8, #1
 800726c:	42b3      	cmp	r3, r6
 800726e:	db0b      	blt.n	8007288 <__lshift+0x38>
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff fd95 	bl	8006da0 <_Balloc>
 8007276:	4605      	mov	r5, r0
 8007278:	b948      	cbnz	r0, 800728e <__lshift+0x3e>
 800727a:	4602      	mov	r2, r0
 800727c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <__lshift+0xd0>)
 8007282:	4828      	ldr	r0, [pc, #160]	; (8007324 <__lshift+0xd4>)
 8007284:	f001 fb18 	bl	80088b8 <__assert_func>
 8007288:	3101      	adds	r1, #1
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	e7ee      	b.n	800726c <__lshift+0x1c>
 800728e:	2300      	movs	r3, #0
 8007290:	f100 0114 	add.w	r1, r0, #20
 8007294:	f100 0210 	add.w	r2, r0, #16
 8007298:	4618      	mov	r0, r3
 800729a:	4553      	cmp	r3, sl
 800729c:	db33      	blt.n	8007306 <__lshift+0xb6>
 800729e:	6920      	ldr	r0, [r4, #16]
 80072a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072a4:	f104 0314 	add.w	r3, r4, #20
 80072a8:	f019 091f 	ands.w	r9, r9, #31
 80072ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072b4:	d02b      	beq.n	800730e <__lshift+0xbe>
 80072b6:	468a      	mov	sl, r1
 80072b8:	2200      	movs	r2, #0
 80072ba:	f1c9 0e20 	rsb	lr, r9, #32
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	fa00 f009 	lsl.w	r0, r0, r9
 80072c4:	4310      	orrs	r0, r2
 80072c6:	f84a 0b04 	str.w	r0, [sl], #4
 80072ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ce:	459c      	cmp	ip, r3
 80072d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80072d4:	d8f3      	bhi.n	80072be <__lshift+0x6e>
 80072d6:	ebac 0304 	sub.w	r3, ip, r4
 80072da:	3b15      	subs	r3, #21
 80072dc:	f023 0303 	bic.w	r3, r3, #3
 80072e0:	3304      	adds	r3, #4
 80072e2:	f104 0015 	add.w	r0, r4, #21
 80072e6:	4584      	cmp	ip, r0
 80072e8:	bf38      	it	cc
 80072ea:	2304      	movcc	r3, #4
 80072ec:	50ca      	str	r2, [r1, r3]
 80072ee:	b10a      	cbz	r2, 80072f4 <__lshift+0xa4>
 80072f0:	f108 0602 	add.w	r6, r8, #2
 80072f4:	3e01      	subs	r6, #1
 80072f6:	4638      	mov	r0, r7
 80072f8:	4621      	mov	r1, r4
 80072fa:	612e      	str	r6, [r5, #16]
 80072fc:	f7ff fd90 	bl	8006e20 <_Bfree>
 8007300:	4628      	mov	r0, r5
 8007302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007306:	f842 0f04 	str.w	r0, [r2, #4]!
 800730a:	3301      	adds	r3, #1
 800730c:	e7c5      	b.n	800729a <__lshift+0x4a>
 800730e:	3904      	subs	r1, #4
 8007310:	f853 2b04 	ldr.w	r2, [r3], #4
 8007314:	459c      	cmp	ip, r3
 8007316:	f841 2f04 	str.w	r2, [r1, #4]!
 800731a:	d8f9      	bhi.n	8007310 <__lshift+0xc0>
 800731c:	e7ea      	b.n	80072f4 <__lshift+0xa4>
 800731e:	bf00      	nop
 8007320:	08009723 	.word	0x08009723
 8007324:	08009734 	.word	0x08009734

08007328 <__mcmp>:
 8007328:	4603      	mov	r3, r0
 800732a:	690a      	ldr	r2, [r1, #16]
 800732c:	6900      	ldr	r0, [r0, #16]
 800732e:	b530      	push	{r4, r5, lr}
 8007330:	1a80      	subs	r0, r0, r2
 8007332:	d10d      	bne.n	8007350 <__mcmp+0x28>
 8007334:	3314      	adds	r3, #20
 8007336:	3114      	adds	r1, #20
 8007338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800733c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007348:	4295      	cmp	r5, r2
 800734a:	d002      	beq.n	8007352 <__mcmp+0x2a>
 800734c:	d304      	bcc.n	8007358 <__mcmp+0x30>
 800734e:	2001      	movs	r0, #1
 8007350:	bd30      	pop	{r4, r5, pc}
 8007352:	42a3      	cmp	r3, r4
 8007354:	d3f4      	bcc.n	8007340 <__mcmp+0x18>
 8007356:	e7fb      	b.n	8007350 <__mcmp+0x28>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	e7f8      	b.n	8007350 <__mcmp+0x28>
	...

08007360 <__mdiff>:
 8007360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	460d      	mov	r5, r1
 8007366:	4607      	mov	r7, r0
 8007368:	4611      	mov	r1, r2
 800736a:	4628      	mov	r0, r5
 800736c:	4614      	mov	r4, r2
 800736e:	f7ff ffdb 	bl	8007328 <__mcmp>
 8007372:	1e06      	subs	r6, r0, #0
 8007374:	d111      	bne.n	800739a <__mdiff+0x3a>
 8007376:	4631      	mov	r1, r6
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff fd11 	bl	8006da0 <_Balloc>
 800737e:	4602      	mov	r2, r0
 8007380:	b928      	cbnz	r0, 800738e <__mdiff+0x2e>
 8007382:	f240 2137 	movw	r1, #567	; 0x237
 8007386:	4b3a      	ldr	r3, [pc, #232]	; (8007470 <__mdiff+0x110>)
 8007388:	483a      	ldr	r0, [pc, #232]	; (8007474 <__mdiff+0x114>)
 800738a:	f001 fa95 	bl	80088b8 <__assert_func>
 800738e:	2301      	movs	r3, #1
 8007390:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007394:	4610      	mov	r0, r2
 8007396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	bfa4      	itt	ge
 800739c:	4623      	movge	r3, r4
 800739e:	462c      	movge	r4, r5
 80073a0:	4638      	mov	r0, r7
 80073a2:	6861      	ldr	r1, [r4, #4]
 80073a4:	bfa6      	itte	ge
 80073a6:	461d      	movge	r5, r3
 80073a8:	2600      	movge	r6, #0
 80073aa:	2601      	movlt	r6, #1
 80073ac:	f7ff fcf8 	bl	8006da0 <_Balloc>
 80073b0:	4602      	mov	r2, r0
 80073b2:	b918      	cbnz	r0, 80073bc <__mdiff+0x5c>
 80073b4:	f240 2145 	movw	r1, #581	; 0x245
 80073b8:	4b2d      	ldr	r3, [pc, #180]	; (8007470 <__mdiff+0x110>)
 80073ba:	e7e5      	b.n	8007388 <__mdiff+0x28>
 80073bc:	f102 0814 	add.w	r8, r2, #20
 80073c0:	46c2      	mov	sl, r8
 80073c2:	f04f 0c00 	mov.w	ip, #0
 80073c6:	6927      	ldr	r7, [r4, #16]
 80073c8:	60c6      	str	r6, [r0, #12]
 80073ca:	692e      	ldr	r6, [r5, #16]
 80073cc:	f104 0014 	add.w	r0, r4, #20
 80073d0:	f105 0914 	add.w	r9, r5, #20
 80073d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80073d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073dc:	3410      	adds	r4, #16
 80073de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80073e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80073e6:	fa1f f18b 	uxth.w	r1, fp
 80073ea:	4461      	add	r1, ip
 80073ec:	fa1f fc83 	uxth.w	ip, r3
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	eba1 010c 	sub.w	r1, r1, ip
 80073f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80073fe:	b289      	uxth	r1, r1
 8007400:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007404:	454e      	cmp	r6, r9
 8007406:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800740a:	f84a 1b04 	str.w	r1, [sl], #4
 800740e:	d8e6      	bhi.n	80073de <__mdiff+0x7e>
 8007410:	1b73      	subs	r3, r6, r5
 8007412:	3b15      	subs	r3, #21
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	3515      	adds	r5, #21
 800741a:	3304      	adds	r3, #4
 800741c:	42ae      	cmp	r6, r5
 800741e:	bf38      	it	cc
 8007420:	2304      	movcc	r3, #4
 8007422:	4418      	add	r0, r3
 8007424:	4443      	add	r3, r8
 8007426:	461e      	mov	r6, r3
 8007428:	4605      	mov	r5, r0
 800742a:	4575      	cmp	r5, lr
 800742c:	d30e      	bcc.n	800744c <__mdiff+0xec>
 800742e:	f10e 0103 	add.w	r1, lr, #3
 8007432:	1a09      	subs	r1, r1, r0
 8007434:	f021 0103 	bic.w	r1, r1, #3
 8007438:	3803      	subs	r0, #3
 800743a:	4586      	cmp	lr, r0
 800743c:	bf38      	it	cc
 800743e:	2100      	movcc	r1, #0
 8007440:	440b      	add	r3, r1
 8007442:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007446:	b189      	cbz	r1, 800746c <__mdiff+0x10c>
 8007448:	6117      	str	r7, [r2, #16]
 800744a:	e7a3      	b.n	8007394 <__mdiff+0x34>
 800744c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007450:	fa1f f188 	uxth.w	r1, r8
 8007454:	4461      	add	r1, ip
 8007456:	140c      	asrs	r4, r1, #16
 8007458:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800745c:	b289      	uxth	r1, r1
 800745e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007462:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007466:	f846 1b04 	str.w	r1, [r6], #4
 800746a:	e7de      	b.n	800742a <__mdiff+0xca>
 800746c:	3f01      	subs	r7, #1
 800746e:	e7e8      	b.n	8007442 <__mdiff+0xe2>
 8007470:	08009723 	.word	0x08009723
 8007474:	08009734 	.word	0x08009734

08007478 <__ulp>:
 8007478:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <__ulp+0x3c>)
 800747a:	400b      	ands	r3, r1
 800747c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007480:	2b00      	cmp	r3, #0
 8007482:	dc08      	bgt.n	8007496 <__ulp+0x1e>
 8007484:	425b      	negs	r3, r3
 8007486:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800748a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800748e:	da04      	bge.n	800749a <__ulp+0x22>
 8007490:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007494:	4113      	asrs	r3, r2
 8007496:	2200      	movs	r2, #0
 8007498:	e008      	b.n	80074ac <__ulp+0x34>
 800749a:	f1a2 0314 	sub.w	r3, r2, #20
 800749e:	2b1e      	cmp	r3, #30
 80074a0:	bfd6      	itet	le
 80074a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80074a6:	2201      	movgt	r2, #1
 80074a8:	40da      	lsrle	r2, r3
 80074aa:	2300      	movs	r3, #0
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	7ff00000 	.word	0x7ff00000

080074b8 <__b2d>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	6905      	ldr	r5, [r0, #16]
 80074bc:	f100 0714 	add.w	r7, r0, #20
 80074c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80074c4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80074c8:	1f2e      	subs	r6, r5, #4
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7ff fd5a 	bl	8006f84 <__hi0bits>
 80074d0:	f1c0 0220 	rsb	r2, r0, #32
 80074d4:	280a      	cmp	r0, #10
 80074d6:	4603      	mov	r3, r0
 80074d8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007544 <__b2d+0x8c>
 80074dc:	600a      	str	r2, [r1, #0]
 80074de:	dc12      	bgt.n	8007506 <__b2d+0x4e>
 80074e0:	f1c0 0e0b 	rsb	lr, r0, #11
 80074e4:	fa24 f20e 	lsr.w	r2, r4, lr
 80074e8:	42b7      	cmp	r7, r6
 80074ea:	ea42 010c 	orr.w	r1, r2, ip
 80074ee:	bf2c      	ite	cs
 80074f0:	2200      	movcs	r2, #0
 80074f2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80074f6:	3315      	adds	r3, #21
 80074f8:	fa04 f303 	lsl.w	r3, r4, r3
 80074fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007500:	431a      	orrs	r2, r3
 8007502:	4610      	mov	r0, r2
 8007504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007506:	42b7      	cmp	r7, r6
 8007508:	bf2e      	itee	cs
 800750a:	2200      	movcs	r2, #0
 800750c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007510:	f1a5 0608 	subcc.w	r6, r5, #8
 8007514:	3b0b      	subs	r3, #11
 8007516:	d012      	beq.n	800753e <__b2d+0x86>
 8007518:	f1c3 0520 	rsb	r5, r3, #32
 800751c:	fa22 f105 	lsr.w	r1, r2, r5
 8007520:	409c      	lsls	r4, r3
 8007522:	430c      	orrs	r4, r1
 8007524:	42be      	cmp	r6, r7
 8007526:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800752a:	bf94      	ite	ls
 800752c:	2400      	movls	r4, #0
 800752e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007532:	409a      	lsls	r2, r3
 8007534:	40ec      	lsrs	r4, r5
 8007536:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800753a:	4322      	orrs	r2, r4
 800753c:	e7e1      	b.n	8007502 <__b2d+0x4a>
 800753e:	ea44 010c 	orr.w	r1, r4, ip
 8007542:	e7de      	b.n	8007502 <__b2d+0x4a>
 8007544:	3ff00000 	.word	0x3ff00000

08007548 <__d2b>:
 8007548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800754a:	2101      	movs	r1, #1
 800754c:	4617      	mov	r7, r2
 800754e:	461c      	mov	r4, r3
 8007550:	9e08      	ldr	r6, [sp, #32]
 8007552:	f7ff fc25 	bl	8006da0 <_Balloc>
 8007556:	4605      	mov	r5, r0
 8007558:	b930      	cbnz	r0, 8007568 <__d2b+0x20>
 800755a:	4602      	mov	r2, r0
 800755c:	f240 310f 	movw	r1, #783	; 0x30f
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <__d2b+0xa4>)
 8007562:	4823      	ldr	r0, [pc, #140]	; (80075f0 <__d2b+0xa8>)
 8007564:	f001 f9a8 	bl	80088b8 <__assert_func>
 8007568:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800756c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007570:	bb24      	cbnz	r4, 80075bc <__d2b+0x74>
 8007572:	2f00      	cmp	r7, #0
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	d026      	beq.n	80075c6 <__d2b+0x7e>
 8007578:	4668      	mov	r0, sp
 800757a:	9700      	str	r7, [sp, #0]
 800757c:	f7ff fd22 	bl	8006fc4 <__lo0bits>
 8007580:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007584:	b1e8      	cbz	r0, 80075c2 <__d2b+0x7a>
 8007586:	f1c0 0320 	rsb	r3, r0, #32
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	430b      	orrs	r3, r1
 8007590:	40c2      	lsrs	r2, r0
 8007592:	616b      	str	r3, [r5, #20]
 8007594:	9201      	str	r2, [sp, #4]
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	bf14      	ite	ne
 800759c:	2102      	movne	r1, #2
 800759e:	2101      	moveq	r1, #1
 80075a0:	61ab      	str	r3, [r5, #24]
 80075a2:	6129      	str	r1, [r5, #16]
 80075a4:	b1bc      	cbz	r4, 80075d6 <__d2b+0x8e>
 80075a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80075aa:	4404      	add	r4, r0
 80075ac:	6034      	str	r4, [r6, #0]
 80075ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b4:	6018      	str	r0, [r3, #0]
 80075b6:	4628      	mov	r0, r5
 80075b8:	b003      	add	sp, #12
 80075ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c0:	e7d7      	b.n	8007572 <__d2b+0x2a>
 80075c2:	6169      	str	r1, [r5, #20]
 80075c4:	e7e7      	b.n	8007596 <__d2b+0x4e>
 80075c6:	a801      	add	r0, sp, #4
 80075c8:	f7ff fcfc 	bl	8006fc4 <__lo0bits>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	2101      	movs	r1, #1
 80075d0:	616b      	str	r3, [r5, #20]
 80075d2:	3020      	adds	r0, #32
 80075d4:	e7e5      	b.n	80075a2 <__d2b+0x5a>
 80075d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075da:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80075de:	6030      	str	r0, [r6, #0]
 80075e0:	6918      	ldr	r0, [r3, #16]
 80075e2:	f7ff fccf 	bl	8006f84 <__hi0bits>
 80075e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80075ea:	e7e2      	b.n	80075b2 <__d2b+0x6a>
 80075ec:	08009723 	.word	0x08009723
 80075f0:	08009734 	.word	0x08009734

080075f4 <__ratio>:
 80075f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	4688      	mov	r8, r1
 80075fa:	4669      	mov	r1, sp
 80075fc:	4681      	mov	r9, r0
 80075fe:	f7ff ff5b 	bl	80074b8 <__b2d>
 8007602:	460f      	mov	r7, r1
 8007604:	4604      	mov	r4, r0
 8007606:	460d      	mov	r5, r1
 8007608:	4640      	mov	r0, r8
 800760a:	a901      	add	r1, sp, #4
 800760c:	f7ff ff54 	bl	80074b8 <__b2d>
 8007610:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007614:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007618:	468b      	mov	fp, r1
 800761a:	eba3 0c02 	sub.w	ip, r3, r2
 800761e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfd5      	itete	le
 800762c:	460a      	movle	r2, r1
 800762e:	462a      	movgt	r2, r5
 8007630:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007634:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007638:	bfd8      	it	le
 800763a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800763e:	465b      	mov	r3, fp
 8007640:	4602      	mov	r2, r0
 8007642:	4639      	mov	r1, r7
 8007644:	4620      	mov	r0, r4
 8007646:	f7f9 f871 	bl	800072c <__aeabi_ddiv>
 800764a:	b003      	add	sp, #12
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007650 <__copybits>:
 8007650:	3901      	subs	r1, #1
 8007652:	b570      	push	{r4, r5, r6, lr}
 8007654:	1149      	asrs	r1, r1, #5
 8007656:	6914      	ldr	r4, [r2, #16]
 8007658:	3101      	adds	r1, #1
 800765a:	f102 0314 	add.w	r3, r2, #20
 800765e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007662:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007666:	1f05      	subs	r5, r0, #4
 8007668:	42a3      	cmp	r3, r4
 800766a:	d30c      	bcc.n	8007686 <__copybits+0x36>
 800766c:	1aa3      	subs	r3, r4, r2
 800766e:	3b11      	subs	r3, #17
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	3211      	adds	r2, #17
 8007676:	42a2      	cmp	r2, r4
 8007678:	bf88      	it	hi
 800767a:	2300      	movhi	r3, #0
 800767c:	4418      	add	r0, r3
 800767e:	2300      	movs	r3, #0
 8007680:	4288      	cmp	r0, r1
 8007682:	d305      	bcc.n	8007690 <__copybits+0x40>
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	f853 6b04 	ldr.w	r6, [r3], #4
 800768a:	f845 6f04 	str.w	r6, [r5, #4]!
 800768e:	e7eb      	b.n	8007668 <__copybits+0x18>
 8007690:	f840 3b04 	str.w	r3, [r0], #4
 8007694:	e7f4      	b.n	8007680 <__copybits+0x30>

08007696 <__any_on>:
 8007696:	f100 0214 	add.w	r2, r0, #20
 800769a:	6900      	ldr	r0, [r0, #16]
 800769c:	114b      	asrs	r3, r1, #5
 800769e:	4298      	cmp	r0, r3
 80076a0:	b510      	push	{r4, lr}
 80076a2:	db11      	blt.n	80076c8 <__any_on+0x32>
 80076a4:	dd0a      	ble.n	80076bc <__any_on+0x26>
 80076a6:	f011 011f 	ands.w	r1, r1, #31
 80076aa:	d007      	beq.n	80076bc <__any_on+0x26>
 80076ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076b0:	fa24 f001 	lsr.w	r0, r4, r1
 80076b4:	fa00 f101 	lsl.w	r1, r0, r1
 80076b8:	428c      	cmp	r4, r1
 80076ba:	d10b      	bne.n	80076d4 <__any_on+0x3e>
 80076bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d803      	bhi.n	80076cc <__any_on+0x36>
 80076c4:	2000      	movs	r0, #0
 80076c6:	bd10      	pop	{r4, pc}
 80076c8:	4603      	mov	r3, r0
 80076ca:	e7f7      	b.n	80076bc <__any_on+0x26>
 80076cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d0f5      	beq.n	80076c0 <__any_on+0x2a>
 80076d4:	2001      	movs	r0, #1
 80076d6:	e7f6      	b.n	80076c6 <__any_on+0x30>

080076d8 <sulp>:
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	460f      	mov	r7, r1
 80076de:	4690      	mov	r8, r2
 80076e0:	f7ff feca 	bl	8007478 <__ulp>
 80076e4:	4604      	mov	r4, r0
 80076e6:	460d      	mov	r5, r1
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	d011      	beq.n	8007712 <sulp+0x3a>
 80076ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80076f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dd0b      	ble.n	8007712 <sulp+0x3a>
 80076fa:	2400      	movs	r4, #0
 80076fc:	051b      	lsls	r3, r3, #20
 80076fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007702:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007706:	4622      	mov	r2, r4
 8007708:	462b      	mov	r3, r5
 800770a:	f7f8 fee5 	bl	80004d8 <__aeabi_dmul>
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771a:	0000      	movs	r0, r0
 800771c:	0000      	movs	r0, r0
	...

08007720 <_strtod_l>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	b09f      	sub	sp, #124	; 0x7c
 8007726:	9217      	str	r2, [sp, #92]	; 0x5c
 8007728:	2200      	movs	r2, #0
 800772a:	4604      	mov	r4, r0
 800772c:	921a      	str	r2, [sp, #104]	; 0x68
 800772e:	460d      	mov	r5, r1
 8007730:	f04f 0800 	mov.w	r8, #0
 8007734:	f04f 0900 	mov.w	r9, #0
 8007738:	460a      	mov	r2, r1
 800773a:	9219      	str	r2, [sp, #100]	; 0x64
 800773c:	7811      	ldrb	r1, [r2, #0]
 800773e:	292b      	cmp	r1, #43	; 0x2b
 8007740:	d04a      	beq.n	80077d8 <_strtod_l+0xb8>
 8007742:	d838      	bhi.n	80077b6 <_strtod_l+0x96>
 8007744:	290d      	cmp	r1, #13
 8007746:	d832      	bhi.n	80077ae <_strtod_l+0x8e>
 8007748:	2908      	cmp	r1, #8
 800774a:	d832      	bhi.n	80077b2 <_strtod_l+0x92>
 800774c:	2900      	cmp	r1, #0
 800774e:	d03b      	beq.n	80077c8 <_strtod_l+0xa8>
 8007750:	2200      	movs	r2, #0
 8007752:	920e      	str	r2, [sp, #56]	; 0x38
 8007754:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007756:	7832      	ldrb	r2, [r6, #0]
 8007758:	2a30      	cmp	r2, #48	; 0x30
 800775a:	f040 80b2 	bne.w	80078c2 <_strtod_l+0x1a2>
 800775e:	7872      	ldrb	r2, [r6, #1]
 8007760:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007764:	2a58      	cmp	r2, #88	; 0x58
 8007766:	d16e      	bne.n	8007846 <_strtod_l+0x126>
 8007768:	9302      	str	r3, [sp, #8]
 800776a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800776c:	4620      	mov	r0, r4
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	ab1a      	add	r3, sp, #104	; 0x68
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	4a8c      	ldr	r2, [pc, #560]	; (80079a8 <_strtod_l+0x288>)
 8007776:	ab1b      	add	r3, sp, #108	; 0x6c
 8007778:	a919      	add	r1, sp, #100	; 0x64
 800777a:	f001 f937 	bl	80089ec <__gethex>
 800777e:	f010 070f 	ands.w	r7, r0, #15
 8007782:	4605      	mov	r5, r0
 8007784:	d005      	beq.n	8007792 <_strtod_l+0x72>
 8007786:	2f06      	cmp	r7, #6
 8007788:	d128      	bne.n	80077dc <_strtod_l+0xbc>
 800778a:	2300      	movs	r3, #0
 800778c:	3601      	adds	r6, #1
 800778e:	9619      	str	r6, [sp, #100]	; 0x64
 8007790:	930e      	str	r3, [sp, #56]	; 0x38
 8007792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f040 85a0 	bne.w	80082da <_strtod_l+0xbba>
 800779a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800779c:	b1cb      	cbz	r3, 80077d2 <_strtod_l+0xb2>
 800779e:	4642      	mov	r2, r8
 80077a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077a4:	4610      	mov	r0, r2
 80077a6:	4619      	mov	r1, r3
 80077a8:	b01f      	add	sp, #124	; 0x7c
 80077aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ae:	2920      	cmp	r1, #32
 80077b0:	d1ce      	bne.n	8007750 <_strtod_l+0x30>
 80077b2:	3201      	adds	r2, #1
 80077b4:	e7c1      	b.n	800773a <_strtod_l+0x1a>
 80077b6:	292d      	cmp	r1, #45	; 0x2d
 80077b8:	d1ca      	bne.n	8007750 <_strtod_l+0x30>
 80077ba:	2101      	movs	r1, #1
 80077bc:	910e      	str	r1, [sp, #56]	; 0x38
 80077be:	1c51      	adds	r1, r2, #1
 80077c0:	9119      	str	r1, [sp, #100]	; 0x64
 80077c2:	7852      	ldrb	r2, [r2, #1]
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	d1c5      	bne.n	8007754 <_strtod_l+0x34>
 80077c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ca:	9519      	str	r5, [sp, #100]	; 0x64
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 8582 	bne.w	80082d6 <_strtod_l+0xbb6>
 80077d2:	4642      	mov	r2, r8
 80077d4:	464b      	mov	r3, r9
 80077d6:	e7e5      	b.n	80077a4 <_strtod_l+0x84>
 80077d8:	2100      	movs	r1, #0
 80077da:	e7ef      	b.n	80077bc <_strtod_l+0x9c>
 80077dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077de:	b13a      	cbz	r2, 80077f0 <_strtod_l+0xd0>
 80077e0:	2135      	movs	r1, #53	; 0x35
 80077e2:	a81c      	add	r0, sp, #112	; 0x70
 80077e4:	f7ff ff34 	bl	8007650 <__copybits>
 80077e8:	4620      	mov	r0, r4
 80077ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077ec:	f7ff fb18 	bl	8006e20 <_Bfree>
 80077f0:	3f01      	subs	r7, #1
 80077f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80077f4:	2f04      	cmp	r7, #4
 80077f6:	d806      	bhi.n	8007806 <_strtod_l+0xe6>
 80077f8:	e8df f007 	tbb	[pc, r7]
 80077fc:	201d0314 	.word	0x201d0314
 8007800:	14          	.byte	0x14
 8007801:	00          	.byte	0x00
 8007802:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007806:	05e9      	lsls	r1, r5, #23
 8007808:	bf48      	it	mi
 800780a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800780e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007812:	0d1b      	lsrs	r3, r3, #20
 8007814:	051b      	lsls	r3, r3, #20
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1bb      	bne.n	8007792 <_strtod_l+0x72>
 800781a:	f7fe fb17 	bl	8005e4c <__errno>
 800781e:	2322      	movs	r3, #34	; 0x22
 8007820:	6003      	str	r3, [r0, #0]
 8007822:	e7b6      	b.n	8007792 <_strtod_l+0x72>
 8007824:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007828:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800782c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007830:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007834:	e7e7      	b.n	8007806 <_strtod_l+0xe6>
 8007836:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80079ac <_strtod_l+0x28c>
 800783a:	e7e4      	b.n	8007806 <_strtod_l+0xe6>
 800783c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007840:	f04f 38ff 	mov.w	r8, #4294967295
 8007844:	e7df      	b.n	8007806 <_strtod_l+0xe6>
 8007846:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	9219      	str	r2, [sp, #100]	; 0x64
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b30      	cmp	r3, #48	; 0x30
 8007850:	d0f9      	beq.n	8007846 <_strtod_l+0x126>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d09d      	beq.n	8007792 <_strtod_l+0x72>
 8007856:	2301      	movs	r3, #1
 8007858:	f04f 0a00 	mov.w	sl, #0
 800785c:	220a      	movs	r2, #10
 800785e:	46d3      	mov	fp, sl
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007864:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007868:	930b      	str	r3, [sp, #44]	; 0x2c
 800786a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800786c:	7806      	ldrb	r6, [r0, #0]
 800786e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007872:	b2d9      	uxtb	r1, r3
 8007874:	2909      	cmp	r1, #9
 8007876:	d926      	bls.n	80078c6 <_strtod_l+0x1a6>
 8007878:	2201      	movs	r2, #1
 800787a:	494d      	ldr	r1, [pc, #308]	; (80079b0 <_strtod_l+0x290>)
 800787c:	f000 ffe6 	bl	800884c <strncmp>
 8007880:	2800      	cmp	r0, #0
 8007882:	d030      	beq.n	80078e6 <_strtod_l+0x1c6>
 8007884:	2000      	movs	r0, #0
 8007886:	4632      	mov	r2, r6
 8007888:	4603      	mov	r3, r0
 800788a:	465e      	mov	r6, fp
 800788c:	9008      	str	r0, [sp, #32]
 800788e:	2a65      	cmp	r2, #101	; 0x65
 8007890:	d001      	beq.n	8007896 <_strtod_l+0x176>
 8007892:	2a45      	cmp	r2, #69	; 0x45
 8007894:	d113      	bne.n	80078be <_strtod_l+0x19e>
 8007896:	b91e      	cbnz	r6, 80078a0 <_strtod_l+0x180>
 8007898:	9a05      	ldr	r2, [sp, #20]
 800789a:	4302      	orrs	r2, r0
 800789c:	d094      	beq.n	80077c8 <_strtod_l+0xa8>
 800789e:	2600      	movs	r6, #0
 80078a0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80078a2:	1c6a      	adds	r2, r5, #1
 80078a4:	9219      	str	r2, [sp, #100]	; 0x64
 80078a6:	786a      	ldrb	r2, [r5, #1]
 80078a8:	2a2b      	cmp	r2, #43	; 0x2b
 80078aa:	d074      	beq.n	8007996 <_strtod_l+0x276>
 80078ac:	2a2d      	cmp	r2, #45	; 0x2d
 80078ae:	d078      	beq.n	80079a2 <_strtod_l+0x282>
 80078b0:	f04f 0c00 	mov.w	ip, #0
 80078b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078b8:	2909      	cmp	r1, #9
 80078ba:	d97f      	bls.n	80079bc <_strtod_l+0x29c>
 80078bc:	9519      	str	r5, [sp, #100]	; 0x64
 80078be:	2700      	movs	r7, #0
 80078c0:	e09e      	b.n	8007a00 <_strtod_l+0x2e0>
 80078c2:	2300      	movs	r3, #0
 80078c4:	e7c8      	b.n	8007858 <_strtod_l+0x138>
 80078c6:	f1bb 0f08 	cmp.w	fp, #8
 80078ca:	bfd8      	it	le
 80078cc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80078ce:	f100 0001 	add.w	r0, r0, #1
 80078d2:	bfd6      	itet	le
 80078d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80078d8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80078dc:	930a      	strle	r3, [sp, #40]	; 0x28
 80078de:	f10b 0b01 	add.w	fp, fp, #1
 80078e2:	9019      	str	r0, [sp, #100]	; 0x64
 80078e4:	e7c1      	b.n	800786a <_strtod_l+0x14a>
 80078e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	9219      	str	r2, [sp, #100]	; 0x64
 80078ec:	785a      	ldrb	r2, [r3, #1]
 80078ee:	f1bb 0f00 	cmp.w	fp, #0
 80078f2:	d037      	beq.n	8007964 <_strtod_l+0x244>
 80078f4:	465e      	mov	r6, fp
 80078f6:	9008      	str	r0, [sp, #32]
 80078f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d912      	bls.n	8007926 <_strtod_l+0x206>
 8007900:	2301      	movs	r3, #1
 8007902:	e7c4      	b.n	800788e <_strtod_l+0x16e>
 8007904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007906:	3001      	adds	r0, #1
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	9219      	str	r2, [sp, #100]	; 0x64
 800790c:	785a      	ldrb	r2, [r3, #1]
 800790e:	2a30      	cmp	r2, #48	; 0x30
 8007910:	d0f8      	beq.n	8007904 <_strtod_l+0x1e4>
 8007912:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007916:	2b08      	cmp	r3, #8
 8007918:	f200 84e4 	bhi.w	80082e4 <_strtod_l+0xbc4>
 800791c:	9008      	str	r0, [sp, #32]
 800791e:	2000      	movs	r0, #0
 8007920:	4606      	mov	r6, r0
 8007922:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007924:	930b      	str	r3, [sp, #44]	; 0x2c
 8007926:	3a30      	subs	r2, #48	; 0x30
 8007928:	f100 0301 	add.w	r3, r0, #1
 800792c:	d014      	beq.n	8007958 <_strtod_l+0x238>
 800792e:	9908      	ldr	r1, [sp, #32]
 8007930:	eb00 0c06 	add.w	ip, r0, r6
 8007934:	4419      	add	r1, r3
 8007936:	9108      	str	r1, [sp, #32]
 8007938:	4633      	mov	r3, r6
 800793a:	210a      	movs	r1, #10
 800793c:	4563      	cmp	r3, ip
 800793e:	d113      	bne.n	8007968 <_strtod_l+0x248>
 8007940:	1833      	adds	r3, r6, r0
 8007942:	2b08      	cmp	r3, #8
 8007944:	f106 0601 	add.w	r6, r6, #1
 8007948:	4406      	add	r6, r0
 800794a:	dc1a      	bgt.n	8007982 <_strtod_l+0x262>
 800794c:	230a      	movs	r3, #10
 800794e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007950:	fb03 2301 	mla	r3, r3, r1, r2
 8007954:	930a      	str	r3, [sp, #40]	; 0x28
 8007956:	2300      	movs	r3, #0
 8007958:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800795a:	4618      	mov	r0, r3
 800795c:	1c51      	adds	r1, r2, #1
 800795e:	9119      	str	r1, [sp, #100]	; 0x64
 8007960:	7852      	ldrb	r2, [r2, #1]
 8007962:	e7c9      	b.n	80078f8 <_strtod_l+0x1d8>
 8007964:	4658      	mov	r0, fp
 8007966:	e7d2      	b.n	800790e <_strtod_l+0x1ee>
 8007968:	2b08      	cmp	r3, #8
 800796a:	f103 0301 	add.w	r3, r3, #1
 800796e:	dc03      	bgt.n	8007978 <_strtod_l+0x258>
 8007970:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007972:	434f      	muls	r7, r1
 8007974:	970a      	str	r7, [sp, #40]	; 0x28
 8007976:	e7e1      	b.n	800793c <_strtod_l+0x21c>
 8007978:	2b10      	cmp	r3, #16
 800797a:	bfd8      	it	le
 800797c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007980:	e7dc      	b.n	800793c <_strtod_l+0x21c>
 8007982:	2e10      	cmp	r6, #16
 8007984:	bfdc      	itt	le
 8007986:	230a      	movle	r3, #10
 8007988:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800798c:	e7e3      	b.n	8007956 <_strtod_l+0x236>
 800798e:	2300      	movs	r3, #0
 8007990:	9308      	str	r3, [sp, #32]
 8007992:	2301      	movs	r3, #1
 8007994:	e780      	b.n	8007898 <_strtod_l+0x178>
 8007996:	f04f 0c00 	mov.w	ip, #0
 800799a:	1caa      	adds	r2, r5, #2
 800799c:	9219      	str	r2, [sp, #100]	; 0x64
 800799e:	78aa      	ldrb	r2, [r5, #2]
 80079a0:	e788      	b.n	80078b4 <_strtod_l+0x194>
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	e7f8      	b.n	800799a <_strtod_l+0x27a>
 80079a8:	08009890 	.word	0x08009890
 80079ac:	7ff00000 	.word	0x7ff00000
 80079b0:	0800988c 	.word	0x0800988c
 80079b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079b6:	1c51      	adds	r1, r2, #1
 80079b8:	9119      	str	r1, [sp, #100]	; 0x64
 80079ba:	7852      	ldrb	r2, [r2, #1]
 80079bc:	2a30      	cmp	r2, #48	; 0x30
 80079be:	d0f9      	beq.n	80079b4 <_strtod_l+0x294>
 80079c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80079c4:	2908      	cmp	r1, #8
 80079c6:	f63f af7a 	bhi.w	80078be <_strtod_l+0x19e>
 80079ca:	3a30      	subs	r2, #48	; 0x30
 80079cc:	9209      	str	r2, [sp, #36]	; 0x24
 80079ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079d0:	920c      	str	r2, [sp, #48]	; 0x30
 80079d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079d4:	1c57      	adds	r7, r2, #1
 80079d6:	9719      	str	r7, [sp, #100]	; 0x64
 80079d8:	7852      	ldrb	r2, [r2, #1]
 80079da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80079de:	f1be 0f09 	cmp.w	lr, #9
 80079e2:	d938      	bls.n	8007a56 <_strtod_l+0x336>
 80079e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079e6:	1a7f      	subs	r7, r7, r1
 80079e8:	2f08      	cmp	r7, #8
 80079ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80079ee:	dc03      	bgt.n	80079f8 <_strtod_l+0x2d8>
 80079f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079f2:	428f      	cmp	r7, r1
 80079f4:	bfa8      	it	ge
 80079f6:	460f      	movge	r7, r1
 80079f8:	f1bc 0f00 	cmp.w	ip, #0
 80079fc:	d000      	beq.n	8007a00 <_strtod_l+0x2e0>
 80079fe:	427f      	negs	r7, r7
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	d14f      	bne.n	8007aa4 <_strtod_l+0x384>
 8007a04:	9905      	ldr	r1, [sp, #20]
 8007a06:	4301      	orrs	r1, r0
 8007a08:	f47f aec3 	bne.w	8007792 <_strtod_l+0x72>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f47f aedb 	bne.w	80077c8 <_strtod_l+0xa8>
 8007a12:	2a69      	cmp	r2, #105	; 0x69
 8007a14:	d029      	beq.n	8007a6a <_strtod_l+0x34a>
 8007a16:	dc26      	bgt.n	8007a66 <_strtod_l+0x346>
 8007a18:	2a49      	cmp	r2, #73	; 0x49
 8007a1a:	d026      	beq.n	8007a6a <_strtod_l+0x34a>
 8007a1c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a1e:	f47f aed3 	bne.w	80077c8 <_strtod_l+0xa8>
 8007a22:	499a      	ldr	r1, [pc, #616]	; (8007c8c <_strtod_l+0x56c>)
 8007a24:	a819      	add	r0, sp, #100	; 0x64
 8007a26:	f001 fa23 	bl	8008e70 <__match>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f43f aecc 	beq.w	80077c8 <_strtod_l+0xa8>
 8007a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b28      	cmp	r3, #40	; 0x28
 8007a36:	d12f      	bne.n	8007a98 <_strtod_l+0x378>
 8007a38:	4995      	ldr	r1, [pc, #596]	; (8007c90 <_strtod_l+0x570>)
 8007a3a:	aa1c      	add	r2, sp, #112	; 0x70
 8007a3c:	a819      	add	r0, sp, #100	; 0x64
 8007a3e:	f001 fa2b 	bl	8008e98 <__hexnan>
 8007a42:	2805      	cmp	r0, #5
 8007a44:	d128      	bne.n	8007a98 <_strtod_l+0x378>
 8007a46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a48:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007a4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a54:	e69d      	b.n	8007792 <_strtod_l+0x72>
 8007a56:	210a      	movs	r1, #10
 8007a58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a5a:	fb01 2107 	mla	r1, r1, r7, r2
 8007a5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007a62:	9209      	str	r2, [sp, #36]	; 0x24
 8007a64:	e7b5      	b.n	80079d2 <_strtod_l+0x2b2>
 8007a66:	2a6e      	cmp	r2, #110	; 0x6e
 8007a68:	e7d9      	b.n	8007a1e <_strtod_l+0x2fe>
 8007a6a:	498a      	ldr	r1, [pc, #552]	; (8007c94 <_strtod_l+0x574>)
 8007a6c:	a819      	add	r0, sp, #100	; 0x64
 8007a6e:	f001 f9ff 	bl	8008e70 <__match>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f aea8 	beq.w	80077c8 <_strtod_l+0xa8>
 8007a78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a7a:	4987      	ldr	r1, [pc, #540]	; (8007c98 <_strtod_l+0x578>)
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	a819      	add	r0, sp, #100	; 0x64
 8007a80:	9319      	str	r3, [sp, #100]	; 0x64
 8007a82:	f001 f9f5 	bl	8008e70 <__match>
 8007a86:	b910      	cbnz	r0, 8007a8e <_strtod_l+0x36e>
 8007a88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	9319      	str	r3, [sp, #100]	; 0x64
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007c9c <_strtod_l+0x57c>
 8007a96:	e67c      	b.n	8007792 <_strtod_l+0x72>
 8007a98:	4881      	ldr	r0, [pc, #516]	; (8007ca0 <_strtod_l+0x580>)
 8007a9a:	f000 ff07 	bl	80088ac <nan>
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	4689      	mov	r9, r1
 8007aa2:	e676      	b.n	8007792 <_strtod_l+0x72>
 8007aa4:	9b08      	ldr	r3, [sp, #32]
 8007aa6:	f1bb 0f00 	cmp.w	fp, #0
 8007aaa:	bf08      	it	eq
 8007aac:	46b3      	moveq	fp, r6
 8007aae:	1afb      	subs	r3, r7, r3
 8007ab0:	2e10      	cmp	r6, #16
 8007ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ab4:	4635      	mov	r5, r6
 8007ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab8:	bfa8      	it	ge
 8007aba:	2510      	movge	r5, #16
 8007abc:	f7f8 fc92 	bl	80003e4 <__aeabi_ui2d>
 8007ac0:	2e09      	cmp	r6, #9
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	4689      	mov	r9, r1
 8007ac6:	dd13      	ble.n	8007af0 <_strtod_l+0x3d0>
 8007ac8:	4b76      	ldr	r3, [pc, #472]	; (8007ca4 <_strtod_l+0x584>)
 8007aca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ace:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ad2:	f7f8 fd01 	bl	80004d8 <__aeabi_dmul>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4689      	mov	r9, r1
 8007adc:	f7f8 fc82 	bl	80003e4 <__aeabi_ui2d>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f8 fb40 	bl	800016c <__adddf3>
 8007aec:	4680      	mov	r8, r0
 8007aee:	4689      	mov	r9, r1
 8007af0:	2e0f      	cmp	r6, #15
 8007af2:	dc36      	bgt.n	8007b62 <_strtod_l+0x442>
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f43f ae4b 	beq.w	8007792 <_strtod_l+0x72>
 8007afc:	dd22      	ble.n	8007b44 <_strtod_l+0x424>
 8007afe:	2b16      	cmp	r3, #22
 8007b00:	dc09      	bgt.n	8007b16 <_strtod_l+0x3f6>
 8007b02:	4968      	ldr	r1, [pc, #416]	; (8007ca4 <_strtod_l+0x584>)
 8007b04:	4642      	mov	r2, r8
 8007b06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b10:	f7f8 fce2 	bl	80004d8 <__aeabi_dmul>
 8007b14:	e7c3      	b.n	8007a9e <_strtod_l+0x37e>
 8007b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b18:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	db20      	blt.n	8007b62 <_strtod_l+0x442>
 8007b20:	4c60      	ldr	r4, [pc, #384]	; (8007ca4 <_strtod_l+0x584>)
 8007b22:	f1c6 060f 	rsb	r6, r6, #15
 8007b26:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b2a:	4642      	mov	r2, r8
 8007b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b30:	464b      	mov	r3, r9
 8007b32:	f7f8 fcd1 	bl	80004d8 <__aeabi_dmul>
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	1b9e      	subs	r6, r3, r6
 8007b3a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b42:	e7e5      	b.n	8007b10 <_strtod_l+0x3f0>
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	3316      	adds	r3, #22
 8007b48:	db0b      	blt.n	8007b62 <_strtod_l+0x442>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	1bdf      	subs	r7, r3, r7
 8007b50:	4b54      	ldr	r3, [pc, #336]	; (8007ca4 <_strtod_l+0x584>)
 8007b52:	4649      	mov	r1, r9
 8007b54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5c:	f7f8 fde6 	bl	800072c <__aeabi_ddiv>
 8007b60:	e79d      	b.n	8007a9e <_strtod_l+0x37e>
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	1b75      	subs	r5, r6, r5
 8007b66:	441d      	add	r5, r3
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	dd70      	ble.n	8007c4e <_strtod_l+0x52e>
 8007b6c:	f015 030f 	ands.w	r3, r5, #15
 8007b70:	d00a      	beq.n	8007b88 <_strtod_l+0x468>
 8007b72:	494c      	ldr	r1, [pc, #304]	; (8007ca4 <_strtod_l+0x584>)
 8007b74:	4642      	mov	r2, r8
 8007b76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b7e:	464b      	mov	r3, r9
 8007b80:	f7f8 fcaa 	bl	80004d8 <__aeabi_dmul>
 8007b84:	4680      	mov	r8, r0
 8007b86:	4689      	mov	r9, r1
 8007b88:	f035 050f 	bics.w	r5, r5, #15
 8007b8c:	d04d      	beq.n	8007c2a <_strtod_l+0x50a>
 8007b8e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007b92:	dd22      	ble.n	8007bda <_strtod_l+0x4ba>
 8007b94:	2600      	movs	r6, #0
 8007b96:	46b3      	mov	fp, r6
 8007b98:	960b      	str	r6, [sp, #44]	; 0x2c
 8007b9a:	9608      	str	r6, [sp, #32]
 8007b9c:	2322      	movs	r3, #34	; 0x22
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007c9c <_strtod_l+0x57c>
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f43f adf1 	beq.w	8007792 <_strtod_l+0x72>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bb4:	f7ff f934 	bl	8006e20 <_Bfree>
 8007bb8:	4620      	mov	r0, r4
 8007bba:	9908      	ldr	r1, [sp, #32]
 8007bbc:	f7ff f930 	bl	8006e20 <_Bfree>
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f7ff f92c 	bl	8006e20 <_Bfree>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bcc:	f7ff f928 	bl	8006e20 <_Bfree>
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff f924 	bl	8006e20 <_Bfree>
 8007bd8:	e5db      	b.n	8007792 <_strtod_l+0x72>
 8007bda:	4b33      	ldr	r3, [pc, #204]	; (8007ca8 <_strtod_l+0x588>)
 8007bdc:	4640      	mov	r0, r8
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	2300      	movs	r3, #0
 8007be2:	4649      	mov	r1, r9
 8007be4:	469a      	mov	sl, r3
 8007be6:	112d      	asrs	r5, r5, #4
 8007be8:	2d01      	cmp	r5, #1
 8007bea:	dc21      	bgt.n	8007c30 <_strtod_l+0x510>
 8007bec:	b10b      	cbz	r3, 8007bf2 <_strtod_l+0x4d2>
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	492d      	ldr	r1, [pc, #180]	; (8007ca8 <_strtod_l+0x588>)
 8007bf4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007bf8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c02:	464b      	mov	r3, r9
 8007c04:	f7f8 fc68 	bl	80004d8 <__aeabi_dmul>
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <_strtod_l+0x57c>)
 8007c0a:	460a      	mov	r2, r1
 8007c0c:	400b      	ands	r3, r1
 8007c0e:	4927      	ldr	r1, [pc, #156]	; (8007cac <_strtod_l+0x58c>)
 8007c10:	4680      	mov	r8, r0
 8007c12:	428b      	cmp	r3, r1
 8007c14:	d8be      	bhi.n	8007b94 <_strtod_l+0x474>
 8007c16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c1a:	428b      	cmp	r3, r1
 8007c1c:	bf86      	itte	hi
 8007c1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c22:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007cb0 <_strtod_l+0x590>
 8007c26:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	e07b      	b.n	8007d28 <_strtod_l+0x608>
 8007c30:	07ea      	lsls	r2, r5, #31
 8007c32:	d505      	bpl.n	8007c40 <_strtod_l+0x520>
 8007c34:	9b05      	ldr	r3, [sp, #20]
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 fc4d 	bl	80004d8 <__aeabi_dmul>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	9a05      	ldr	r2, [sp, #20]
 8007c42:	f10a 0a01 	add.w	sl, sl, #1
 8007c46:	3208      	adds	r2, #8
 8007c48:	106d      	asrs	r5, r5, #1
 8007c4a:	9205      	str	r2, [sp, #20]
 8007c4c:	e7cc      	b.n	8007be8 <_strtod_l+0x4c8>
 8007c4e:	d0ec      	beq.n	8007c2a <_strtod_l+0x50a>
 8007c50:	426d      	negs	r5, r5
 8007c52:	f015 020f 	ands.w	r2, r5, #15
 8007c56:	d00a      	beq.n	8007c6e <_strtod_l+0x54e>
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <_strtod_l+0x584>)
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c60:	4649      	mov	r1, r9
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fd61 	bl	800072c <__aeabi_ddiv>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	4689      	mov	r9, r1
 8007c6e:	112d      	asrs	r5, r5, #4
 8007c70:	d0db      	beq.n	8007c2a <_strtod_l+0x50a>
 8007c72:	2d1f      	cmp	r5, #31
 8007c74:	dd1e      	ble.n	8007cb4 <_strtod_l+0x594>
 8007c76:	2600      	movs	r6, #0
 8007c78:	46b3      	mov	fp, r6
 8007c7a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007c7c:	9608      	str	r6, [sp, #32]
 8007c7e:	2322      	movs	r3, #34	; 0x22
 8007c80:	f04f 0800 	mov.w	r8, #0
 8007c84:	f04f 0900 	mov.w	r9, #0
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	e78d      	b.n	8007ba8 <_strtod_l+0x488>
 8007c8c:	0800967b 	.word	0x0800967b
 8007c90:	080098a4 	.word	0x080098a4
 8007c94:	08009673 	.word	0x08009673
 8007c98:	080096aa 	.word	0x080096aa
 8007c9c:	7ff00000 	.word	0x7ff00000
 8007ca0:	08009a35 	.word	0x08009a35
 8007ca4:	080097b8 	.word	0x080097b8
 8007ca8:	08009790 	.word	0x08009790
 8007cac:	7ca00000 	.word	0x7ca00000
 8007cb0:	7fefffff 	.word	0x7fefffff
 8007cb4:	f015 0310 	ands.w	r3, r5, #16
 8007cb8:	bf18      	it	ne
 8007cba:	236a      	movne	r3, #106	; 0x6a
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007f90 <_strtod_l+0x870>
 8007cc8:	07ea      	lsls	r2, r5, #31
 8007cca:	d504      	bpl.n	8007cd6 <_strtod_l+0x5b6>
 8007ccc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007cd0:	f7f8 fc02 	bl	80004d8 <__aeabi_dmul>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	106d      	asrs	r5, r5, #1
 8007cd8:	f10a 0a08 	add.w	sl, sl, #8
 8007cdc:	d1f4      	bne.n	8007cc8 <_strtod_l+0x5a8>
 8007cde:	b10b      	cbz	r3, 8007ce4 <_strtod_l+0x5c4>
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	4689      	mov	r9, r1
 8007ce4:	9b05      	ldr	r3, [sp, #20]
 8007ce6:	b1bb      	cbz	r3, 8007d18 <_strtod_l+0x5f8>
 8007ce8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007cec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	dd10      	ble.n	8007d18 <_strtod_l+0x5f8>
 8007cf6:	2b1f      	cmp	r3, #31
 8007cf8:	f340 8128 	ble.w	8007f4c <_strtod_l+0x82c>
 8007cfc:	2b34      	cmp	r3, #52	; 0x34
 8007cfe:	bfd8      	it	le
 8007d00:	f04f 33ff 	movle.w	r3, #4294967295
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	bfcf      	iteee	gt
 8007d0a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d0e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d12:	4093      	lslle	r3, r2
 8007d14:	ea03 0901 	andle.w	r9, r3, r1
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fe42 	bl	80009a8 <__aeabi_dcmpeq>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1a6      	bne.n	8007c76 <_strtod_l+0x556>
 8007d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4633      	mov	r3, r6
 8007d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d34:	f7ff f8dc 	bl	8006ef0 <__s2b>
 8007d38:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f af2a 	beq.w	8007b94 <_strtod_l+0x474>
 8007d40:	2600      	movs	r6, #0
 8007d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d44:	9b08      	ldr	r3, [sp, #32]
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	eba3 0307 	sub.w	r3, r3, r7
 8007d4c:	bfa8      	it	ge
 8007d4e:	2300      	movge	r3, #0
 8007d50:	46b3      	mov	fp, r6
 8007d52:	9312      	str	r3, [sp, #72]	; 0x48
 8007d54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d58:	9316      	str	r3, [sp, #88]	; 0x58
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	6859      	ldr	r1, [r3, #4]
 8007d60:	f7ff f81e 	bl	8006da0 <_Balloc>
 8007d64:	9008      	str	r0, [sp, #32]
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f43f af18 	beq.w	8007b9c <_strtod_l+0x47c>
 8007d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d6e:	300c      	adds	r0, #12
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	f103 010c 	add.w	r1, r3, #12
 8007d76:	3202      	adds	r2, #2
 8007d78:	0092      	lsls	r2, r2, #2
 8007d7a:	f000 fd89 	bl	8008890 <memcpy>
 8007d7e:	ab1c      	add	r3, sp, #112	; 0x70
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4642      	mov	r2, r8
 8007d88:	464b      	mov	r3, r9
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007d90:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007d94:	f7ff fbd8 	bl	8007548 <__d2b>
 8007d98:	901a      	str	r0, [sp, #104]	; 0x68
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	f43f aefe 	beq.w	8007b9c <_strtod_l+0x47c>
 8007da0:	2101      	movs	r1, #1
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff f93c 	bl	8007020 <__i2b>
 8007da8:	4683      	mov	fp, r0
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f43f aef6 	beq.w	8007b9c <_strtod_l+0x47c>
 8007db0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007db2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	bfab      	itete	ge
 8007db8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007dba:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007dbc:	eb07 0a03 	addge.w	sl, r7, r3
 8007dc0:	1bdd      	sublt	r5, r3, r7
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	bfa8      	it	ge
 8007dc6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007dc8:	eba7 0703 	sub.w	r7, r7, r3
 8007dcc:	4417      	add	r7, r2
 8007dce:	4b71      	ldr	r3, [pc, #452]	; (8007f94 <_strtod_l+0x874>)
 8007dd0:	f107 37ff 	add.w	r7, r7, #4294967295
 8007dd4:	bfb8      	it	lt
 8007dd6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007dda:	429f      	cmp	r7, r3
 8007ddc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007de0:	f280 80c7 	bge.w	8007f72 <_strtod_l+0x852>
 8007de4:	1bdb      	subs	r3, r3, r7
 8007de6:	2b1f      	cmp	r3, #31
 8007de8:	f04f 0101 	mov.w	r1, #1
 8007dec:	eba2 0203 	sub.w	r2, r2, r3
 8007df0:	f300 80b3 	bgt.w	8007f5a <_strtod_l+0x83a>
 8007df4:	fa01 f303 	lsl.w	r3, r1, r3
 8007df8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8007dfe:	eb0a 0702 	add.w	r7, sl, r2
 8007e02:	9b05      	ldr	r3, [sp, #20]
 8007e04:	45ba      	cmp	sl, r7
 8007e06:	4415      	add	r5, r2
 8007e08:	441d      	add	r5, r3
 8007e0a:	4653      	mov	r3, sl
 8007e0c:	bfa8      	it	ge
 8007e0e:	463b      	movge	r3, r7
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	bfa8      	it	ge
 8007e14:	462b      	movge	r3, r5
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bfc2      	ittt	gt
 8007e1a:	1aff      	subgt	r7, r7, r3
 8007e1c:	1aed      	subgt	r5, r5, r3
 8007e1e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dd17      	ble.n	8007e58 <_strtod_l+0x738>
 8007e28:	4659      	mov	r1, fp
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff f9b5 	bl	800719c <__pow5mult>
 8007e32:	4683      	mov	fp, r0
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f43f aeb1 	beq.w	8007b9c <_strtod_l+0x47c>
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7ff f904 	bl	800704c <__multiply>
 8007e44:	900a      	str	r0, [sp, #40]	; 0x28
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f43f aea8 	beq.w	8007b9c <_strtod_l+0x47c>
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e50:	f7fe ffe6 	bl	8006e20 <_Bfree>
 8007e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e56:	931a      	str	r3, [sp, #104]	; 0x68
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	f300 808f 	bgt.w	8007f7c <_strtod_l+0x85c>
 8007e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dd08      	ble.n	8007e76 <_strtod_l+0x756>
 8007e64:	4620      	mov	r0, r4
 8007e66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e68:	9908      	ldr	r1, [sp, #32]
 8007e6a:	f7ff f997 	bl	800719c <__pow5mult>
 8007e6e:	9008      	str	r0, [sp, #32]
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f43f ae93 	beq.w	8007b9c <_strtod_l+0x47c>
 8007e76:	2d00      	cmp	r5, #0
 8007e78:	dd08      	ble.n	8007e8c <_strtod_l+0x76c>
 8007e7a:	462a      	mov	r2, r5
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	9908      	ldr	r1, [sp, #32]
 8007e80:	f7ff f9e6 	bl	8007250 <__lshift>
 8007e84:	9008      	str	r0, [sp, #32]
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f ae88 	beq.w	8007b9c <_strtod_l+0x47c>
 8007e8c:	f1ba 0f00 	cmp.w	sl, #0
 8007e90:	dd08      	ble.n	8007ea4 <_strtod_l+0x784>
 8007e92:	4659      	mov	r1, fp
 8007e94:	4652      	mov	r2, sl
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff f9da 	bl	8007250 <__lshift>
 8007e9c:	4683      	mov	fp, r0
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f ae7c 	beq.w	8007b9c <_strtod_l+0x47c>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	9a08      	ldr	r2, [sp, #32]
 8007ea8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007eaa:	f7ff fa59 	bl	8007360 <__mdiff>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f43f ae73 	beq.w	8007b9c <_strtod_l+0x47c>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	68c3      	ldr	r3, [r0, #12]
 8007eba:	4659      	mov	r1, fp
 8007ebc:	60c5      	str	r5, [r0, #12]
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	f7ff fa32 	bl	8007328 <__mcmp>
 8007ec4:	42a8      	cmp	r0, r5
 8007ec6:	da6b      	bge.n	8007fa0 <_strtod_l+0x880>
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	ea53 0308 	orrs.w	r3, r3, r8
 8007ece:	f040 808f 	bne.w	8007ff0 <_strtod_l+0x8d0>
 8007ed2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 808a 	bne.w	8007ff0 <_strtod_l+0x8d0>
 8007edc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ee0:	0d1b      	lsrs	r3, r3, #20
 8007ee2:	051b      	lsls	r3, r3, #20
 8007ee4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ee8:	f240 8082 	bls.w	8007ff0 <_strtod_l+0x8d0>
 8007eec:	6973      	ldr	r3, [r6, #20]
 8007eee:	b913      	cbnz	r3, 8007ef6 <_strtod_l+0x7d6>
 8007ef0:	6933      	ldr	r3, [r6, #16]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	dd7c      	ble.n	8007ff0 <_strtod_l+0x8d0>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	2201      	movs	r2, #1
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7ff f9a8 	bl	8007250 <__lshift>
 8007f00:	4659      	mov	r1, fp
 8007f02:	4606      	mov	r6, r0
 8007f04:	f7ff fa10 	bl	8007328 <__mcmp>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	dd71      	ble.n	8007ff0 <_strtod_l+0x8d0>
 8007f0c:	9905      	ldr	r1, [sp, #20]
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4a21      	ldr	r2, [pc, #132]	; (8007f98 <_strtod_l+0x878>)
 8007f12:	2900      	cmp	r1, #0
 8007f14:	f000 808d 	beq.w	8008032 <_strtod_l+0x912>
 8007f18:	ea02 0109 	and.w	r1, r2, r9
 8007f1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f20:	f300 8087 	bgt.w	8008032 <_strtod_l+0x912>
 8007f24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f28:	f77f aea9 	ble.w	8007c7e <_strtod_l+0x55e>
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <_strtod_l+0x87c>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 fad0 	bl	80004d8 <__aeabi_dmul>
 8007f38:	4b17      	ldr	r3, [pc, #92]	; (8007f98 <_strtod_l+0x878>)
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	400b      	ands	r3, r1
 8007f3e:	4689      	mov	r9, r1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f47f ae35 	bne.w	8007bb0 <_strtod_l+0x490>
 8007f46:	2322      	movs	r3, #34	; 0x22
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	e631      	b.n	8007bb0 <_strtod_l+0x490>
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	ea03 0808 	and.w	r8, r3, r8
 8007f58:	e6de      	b.n	8007d18 <_strtod_l+0x5f8>
 8007f5a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007f5e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007f62:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007f66:	37e2      	adds	r7, #226	; 0xe2
 8007f68:	fa01 f307 	lsl.w	r3, r1, r7
 8007f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8007f6e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007f70:	e745      	b.n	8007dfe <_strtod_l+0x6de>
 8007f72:	2300      	movs	r3, #0
 8007f74:	9310      	str	r3, [sp, #64]	; 0x40
 8007f76:	2301      	movs	r3, #1
 8007f78:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f7a:	e740      	b.n	8007dfe <_strtod_l+0x6de>
 8007f7c:	463a      	mov	r2, r7
 8007f7e:	4620      	mov	r0, r4
 8007f80:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f82:	f7ff f965 	bl	8007250 <__lshift>
 8007f86:	901a      	str	r0, [sp, #104]	; 0x68
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f47f af68 	bne.w	8007e5e <_strtod_l+0x73e>
 8007f8e:	e605      	b.n	8007b9c <_strtod_l+0x47c>
 8007f90:	080098b8 	.word	0x080098b8
 8007f94:	fffffc02 	.word	0xfffffc02
 8007f98:	7ff00000 	.word	0x7ff00000
 8007f9c:	39500000 	.word	0x39500000
 8007fa0:	46ca      	mov	sl, r9
 8007fa2:	d165      	bne.n	8008070 <_strtod_l+0x950>
 8007fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007faa:	b352      	cbz	r2, 8008002 <_strtod_l+0x8e2>
 8007fac:	4a9e      	ldr	r2, [pc, #632]	; (8008228 <_strtod_l+0xb08>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d12a      	bne.n	8008008 <_strtod_l+0x8e8>
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	b1fb      	cbz	r3, 8007ff8 <_strtod_l+0x8d8>
 8007fb8:	4b9c      	ldr	r3, [pc, #624]	; (800822c <_strtod_l+0xb0c>)
 8007fba:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbe:	ea09 0303 	and.w	r3, r9, r3
 8007fc2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fc6:	d81a      	bhi.n	8007ffe <_strtod_l+0x8de>
 8007fc8:	0d1b      	lsrs	r3, r3, #20
 8007fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d118      	bne.n	8008008 <_strtod_l+0x8e8>
 8007fd6:	4b96      	ldr	r3, [pc, #600]	; (8008230 <_strtod_l+0xb10>)
 8007fd8:	459a      	cmp	sl, r3
 8007fda:	d102      	bne.n	8007fe2 <_strtod_l+0x8c2>
 8007fdc:	3101      	adds	r1, #1
 8007fde:	f43f addd 	beq.w	8007b9c <_strtod_l+0x47c>
 8007fe2:	f04f 0800 	mov.w	r8, #0
 8007fe6:	4b91      	ldr	r3, [pc, #580]	; (800822c <_strtod_l+0xb0c>)
 8007fe8:	ea0a 0303 	and.w	r3, sl, r3
 8007fec:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ff0:	9b05      	ldr	r3, [sp, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d19a      	bne.n	8007f2c <_strtod_l+0x80c>
 8007ff6:	e5db      	b.n	8007bb0 <_strtod_l+0x490>
 8007ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffc:	e7e9      	b.n	8007fd2 <_strtod_l+0x8b2>
 8007ffe:	4613      	mov	r3, r2
 8008000:	e7e7      	b.n	8007fd2 <_strtod_l+0x8b2>
 8008002:	ea53 0308 	orrs.w	r3, r3, r8
 8008006:	d081      	beq.n	8007f0c <_strtod_l+0x7ec>
 8008008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800a:	b1e3      	cbz	r3, 8008046 <_strtod_l+0x926>
 800800c:	ea13 0f0a 	tst.w	r3, sl
 8008010:	d0ee      	beq.n	8007ff0 <_strtod_l+0x8d0>
 8008012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	9a05      	ldr	r2, [sp, #20]
 800801a:	b1c3      	cbz	r3, 800804e <_strtod_l+0x92e>
 800801c:	f7ff fb5c 	bl	80076d8 <sulp>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008026:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008028:	f7f8 f8a0 	bl	800016c <__adddf3>
 800802c:	4680      	mov	r8, r0
 800802e:	4689      	mov	r9, r1
 8008030:	e7de      	b.n	8007ff0 <_strtod_l+0x8d0>
 8008032:	4013      	ands	r3, r2
 8008034:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008038:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800803c:	f04f 38ff 	mov.w	r8, #4294967295
 8008040:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008044:	e7d4      	b.n	8007ff0 <_strtod_l+0x8d0>
 8008046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008048:	ea13 0f08 	tst.w	r3, r8
 800804c:	e7e0      	b.n	8008010 <_strtod_l+0x8f0>
 800804e:	f7ff fb43 	bl	80076d8 <sulp>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008058:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800805a:	f7f8 f885 	bl	8000168 <__aeabi_dsub>
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	4680      	mov	r8, r0
 8008064:	4689      	mov	r9, r1
 8008066:	f7f8 fc9f 	bl	80009a8 <__aeabi_dcmpeq>
 800806a:	2800      	cmp	r0, #0
 800806c:	d0c0      	beq.n	8007ff0 <_strtod_l+0x8d0>
 800806e:	e606      	b.n	8007c7e <_strtod_l+0x55e>
 8008070:	4659      	mov	r1, fp
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff fabe 	bl	80075f4 <__ratio>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008080:	2200      	movs	r2, #0
 8008082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008086:	f7f8 fca3 	bl	80009d0 <__aeabi_dcmple>
 800808a:	2800      	cmp	r0, #0
 800808c:	d06f      	beq.n	800816e <_strtod_l+0xa4e>
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	2b00      	cmp	r3, #0
 8008092:	d17c      	bne.n	800818e <_strtod_l+0xa6e>
 8008094:	f1b8 0f00 	cmp.w	r8, #0
 8008098:	d159      	bne.n	800814e <_strtod_l+0xa2e>
 800809a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d17b      	bne.n	800819a <_strtod_l+0xa7a>
 80080a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080a6:	2200      	movs	r2, #0
 80080a8:	4b62      	ldr	r3, [pc, #392]	; (8008234 <_strtod_l+0xb14>)
 80080aa:	f7f8 fc87 	bl	80009bc <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d15a      	bne.n	8008168 <_strtod_l+0xa48>
 80080b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b5f      	ldr	r3, [pc, #380]	; (8008238 <_strtod_l+0xb18>)
 80080ba:	f7f8 fa0d 	bl	80004d8 <__aeabi_dmul>
 80080be:	4605      	mov	r5, r0
 80080c0:	460f      	mov	r7, r1
 80080c2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80080c6:	9506      	str	r5, [sp, #24]
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80080d2:	4b56      	ldr	r3, [pc, #344]	; (800822c <_strtod_l+0xb0c>)
 80080d4:	4a55      	ldr	r2, [pc, #340]	; (800822c <_strtod_l+0xb0c>)
 80080d6:	ea0a 0303 	and.w	r3, sl, r3
 80080da:	9313      	str	r3, [sp, #76]	; 0x4c
 80080dc:	4b57      	ldr	r3, [pc, #348]	; (800823c <_strtod_l+0xb1c>)
 80080de:	ea0a 0202 	and.w	r2, sl, r2
 80080e2:	429a      	cmp	r2, r3
 80080e4:	f040 80b0 	bne.w	8008248 <_strtod_l+0xb28>
 80080e8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7ff f9c2 	bl	8007478 <__ulp>
 80080f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080f8:	f7f8 f9ee 	bl	80004d8 <__aeabi_dmul>
 80080fc:	4642      	mov	r2, r8
 80080fe:	464b      	mov	r3, r9
 8008100:	f7f8 f834 	bl	800016c <__adddf3>
 8008104:	f8df a124 	ldr.w	sl, [pc, #292]	; 800822c <_strtod_l+0xb0c>
 8008108:	4a4d      	ldr	r2, [pc, #308]	; (8008240 <_strtod_l+0xb20>)
 800810a:	ea01 0a0a 	and.w	sl, r1, sl
 800810e:	4592      	cmp	sl, r2
 8008110:	4680      	mov	r8, r0
 8008112:	d948      	bls.n	80081a6 <_strtod_l+0xa86>
 8008114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008116:	4b46      	ldr	r3, [pc, #280]	; (8008230 <_strtod_l+0xb10>)
 8008118:	429a      	cmp	r2, r3
 800811a:	d103      	bne.n	8008124 <_strtod_l+0xa04>
 800811c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800811e:	3301      	adds	r3, #1
 8008120:	f43f ad3c 	beq.w	8007b9c <_strtod_l+0x47c>
 8008124:	f04f 38ff 	mov.w	r8, #4294967295
 8008128:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008230 <_strtod_l+0xb10>
 800812c:	4620      	mov	r0, r4
 800812e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008130:	f7fe fe76 	bl	8006e20 <_Bfree>
 8008134:	4620      	mov	r0, r4
 8008136:	9908      	ldr	r1, [sp, #32]
 8008138:	f7fe fe72 	bl	8006e20 <_Bfree>
 800813c:	4659      	mov	r1, fp
 800813e:	4620      	mov	r0, r4
 8008140:	f7fe fe6e 	bl	8006e20 <_Bfree>
 8008144:	4631      	mov	r1, r6
 8008146:	4620      	mov	r0, r4
 8008148:	f7fe fe6a 	bl	8006e20 <_Bfree>
 800814c:	e605      	b.n	8007d5a <_strtod_l+0x63a>
 800814e:	f1b8 0f01 	cmp.w	r8, #1
 8008152:	d103      	bne.n	800815c <_strtod_l+0xa3c>
 8008154:	f1b9 0f00 	cmp.w	r9, #0
 8008158:	f43f ad91 	beq.w	8007c7e <_strtod_l+0x55e>
 800815c:	2200      	movs	r2, #0
 800815e:	4b39      	ldr	r3, [pc, #228]	; (8008244 <_strtod_l+0xb24>)
 8008160:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008162:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008166:	e016      	b.n	8008196 <_strtod_l+0xa76>
 8008168:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800816a:	4f33      	ldr	r7, [pc, #204]	; (8008238 <_strtod_l+0xb18>)
 800816c:	e7a9      	b.n	80080c2 <_strtod_l+0x9a2>
 800816e:	4b32      	ldr	r3, [pc, #200]	; (8008238 <_strtod_l+0xb18>)
 8008170:	2200      	movs	r2, #0
 8008172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008176:	f7f8 f9af 	bl	80004d8 <__aeabi_dmul>
 800817a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800817c:	4605      	mov	r5, r0
 800817e:	460f      	mov	r7, r1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d09e      	beq.n	80080c2 <_strtod_l+0x9a2>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800818c:	e79d      	b.n	80080ca <_strtod_l+0x9aa>
 800818e:	2200      	movs	r2, #0
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <_strtod_l+0xb14>)
 8008192:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008196:	4f27      	ldr	r7, [pc, #156]	; (8008234 <_strtod_l+0xb14>)
 8008198:	e797      	b.n	80080ca <_strtod_l+0x9aa>
 800819a:	2200      	movs	r2, #0
 800819c:	4b29      	ldr	r3, [pc, #164]	; (8008244 <_strtod_l+0xb24>)
 800819e:	4645      	mov	r5, r8
 80081a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081a4:	e7f7      	b.n	8008196 <_strtod_l+0xa76>
 80081a6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80081aa:	9b05      	ldr	r3, [sp, #20]
 80081ac:	46ca      	mov	sl, r9
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1bc      	bne.n	800812c <_strtod_l+0xa0c>
 80081b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081b8:	0d1b      	lsrs	r3, r3, #20
 80081ba:	051b      	lsls	r3, r3, #20
 80081bc:	429a      	cmp	r2, r3
 80081be:	d1b5      	bne.n	800812c <_strtod_l+0xa0c>
 80081c0:	4628      	mov	r0, r5
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fdde 	bl	8000d84 <__aeabi_d2lz>
 80081c8:	f7f8 f958 	bl	800047c <__aeabi_l2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4628      	mov	r0, r5
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f7 ffc8 	bl	8000168 <__aeabi_dsub>
 80081d8:	460b      	mov	r3, r1
 80081da:	4602      	mov	r2, r0
 80081dc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80081e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80081e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e6:	ea4a 0a08 	orr.w	sl, sl, r8
 80081ea:	ea5a 0a03 	orrs.w	sl, sl, r3
 80081ee:	d06c      	beq.n	80082ca <_strtod_l+0xbaa>
 80081f0:	a309      	add	r3, pc, #36	; (adr r3, 8008218 <_strtod_l+0xaf8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fbe1 	bl	80009bc <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f47f acd8 	bne.w	8007bb0 <_strtod_l+0x490>
 8008200:	a307      	add	r3, pc, #28	; (adr r3, 8008220 <_strtod_l+0xb00>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800820a:	f7f8 fbf5 	bl	80009f8 <__aeabi_dcmpgt>
 800820e:	2800      	cmp	r0, #0
 8008210:	d08c      	beq.n	800812c <_strtod_l+0xa0c>
 8008212:	e4cd      	b.n	8007bb0 <_strtod_l+0x490>
 8008214:	f3af 8000 	nop.w
 8008218:	94a03595 	.word	0x94a03595
 800821c:	3fdfffff 	.word	0x3fdfffff
 8008220:	35afe535 	.word	0x35afe535
 8008224:	3fe00000 	.word	0x3fe00000
 8008228:	000fffff 	.word	0x000fffff
 800822c:	7ff00000 	.word	0x7ff00000
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	3ff00000 	.word	0x3ff00000
 8008238:	3fe00000 	.word	0x3fe00000
 800823c:	7fe00000 	.word	0x7fe00000
 8008240:	7c9fffff 	.word	0x7c9fffff
 8008244:	bff00000 	.word	0xbff00000
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	b333      	cbz	r3, 800829a <_strtod_l+0xb7a>
 800824c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800824e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008252:	d822      	bhi.n	800829a <_strtod_l+0xb7a>
 8008254:	a328      	add	r3, pc, #160	; (adr r3, 80082f8 <_strtod_l+0xbd8>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	4628      	mov	r0, r5
 800825c:	4639      	mov	r1, r7
 800825e:	f7f8 fbb7 	bl	80009d0 <__aeabi_dcmple>
 8008262:	b1a0      	cbz	r0, 800828e <_strtod_l+0xb6e>
 8008264:	4639      	mov	r1, r7
 8008266:	4628      	mov	r0, r5
 8008268:	f7f8 fc0e 	bl	8000a88 <__aeabi_d2uiz>
 800826c:	2801      	cmp	r0, #1
 800826e:	bf38      	it	cc
 8008270:	2001      	movcc	r0, #1
 8008272:	f7f8 f8b7 	bl	80003e4 <__aeabi_ui2d>
 8008276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008278:	4605      	mov	r5, r0
 800827a:	460f      	mov	r7, r1
 800827c:	bb03      	cbnz	r3, 80082c0 <_strtod_l+0xba0>
 800827e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008282:	9014      	str	r0, [sp, #80]	; 0x50
 8008284:	9315      	str	r3, [sp, #84]	; 0x54
 8008286:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800828a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800828e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008292:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	9311      	str	r3, [sp, #68]	; 0x44
 800829a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800829c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800829e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80082a2:	f7ff f8e9 	bl	8007478 <__ulp>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f8 f913 	bl	80004d8 <__aeabi_dmul>
 80082b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082b6:	f7f7 ff59 	bl	800016c <__adddf3>
 80082ba:	4680      	mov	r8, r0
 80082bc:	4689      	mov	r9, r1
 80082be:	e774      	b.n	80081aa <_strtod_l+0xa8a>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80082c8:	e7dd      	b.n	8008286 <_strtod_l+0xb66>
 80082ca:	a30d      	add	r3, pc, #52	; (adr r3, 8008300 <_strtod_l+0xbe0>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f8 fb74 	bl	80009bc <__aeabi_dcmplt>
 80082d4:	e79b      	b.n	800820e <_strtod_l+0xaee>
 80082d6:	2300      	movs	r3, #0
 80082d8:	930e      	str	r3, [sp, #56]	; 0x38
 80082da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	f7ff ba5b 	b.w	800779a <_strtod_l+0x7a>
 80082e4:	2a65      	cmp	r2, #101	; 0x65
 80082e6:	f43f ab52 	beq.w	800798e <_strtod_l+0x26e>
 80082ea:	2a45      	cmp	r2, #69	; 0x45
 80082ec:	f43f ab4f 	beq.w	800798e <_strtod_l+0x26e>
 80082f0:	2301      	movs	r3, #1
 80082f2:	f7ff bb87 	b.w	8007a04 <_strtod_l+0x2e4>
 80082f6:	bf00      	nop
 80082f8:	ffc00000 	.word	0xffc00000
 80082fc:	41dfffff 	.word	0x41dfffff
 8008300:	94a03595 	.word	0x94a03595
 8008304:	3fcfffff 	.word	0x3fcfffff

08008308 <_strtod_r>:
 8008308:	4b01      	ldr	r3, [pc, #4]	; (8008310 <_strtod_r+0x8>)
 800830a:	f7ff ba09 	b.w	8007720 <_strtod_l>
 800830e:	bf00      	nop
 8008310:	20000068 	.word	0x20000068

08008314 <_strtol_l.constprop.0>:
 8008314:	2b01      	cmp	r3, #1
 8008316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831a:	4686      	mov	lr, r0
 800831c:	4690      	mov	r8, r2
 800831e:	d001      	beq.n	8008324 <_strtol_l.constprop.0+0x10>
 8008320:	2b24      	cmp	r3, #36	; 0x24
 8008322:	d906      	bls.n	8008332 <_strtol_l.constprop.0+0x1e>
 8008324:	f7fd fd92 	bl	8005e4c <__errno>
 8008328:	2316      	movs	r3, #22
 800832a:	6003      	str	r3, [r0, #0]
 800832c:	2000      	movs	r0, #0
 800832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008332:	460d      	mov	r5, r1
 8008334:	4835      	ldr	r0, [pc, #212]	; (800840c <_strtol_l.constprop.0+0xf8>)
 8008336:	462a      	mov	r2, r5
 8008338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800833c:	5d06      	ldrb	r6, [r0, r4]
 800833e:	f016 0608 	ands.w	r6, r6, #8
 8008342:	d1f8      	bne.n	8008336 <_strtol_l.constprop.0+0x22>
 8008344:	2c2d      	cmp	r4, #45	; 0x2d
 8008346:	d12e      	bne.n	80083a6 <_strtol_l.constprop.0+0x92>
 8008348:	2601      	movs	r6, #1
 800834a:	782c      	ldrb	r4, [r5, #0]
 800834c:	1c95      	adds	r5, r2, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d057      	beq.n	8008402 <_strtol_l.constprop.0+0xee>
 8008352:	2b10      	cmp	r3, #16
 8008354:	d109      	bne.n	800836a <_strtol_l.constprop.0+0x56>
 8008356:	2c30      	cmp	r4, #48	; 0x30
 8008358:	d107      	bne.n	800836a <_strtol_l.constprop.0+0x56>
 800835a:	782a      	ldrb	r2, [r5, #0]
 800835c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008360:	2a58      	cmp	r2, #88	; 0x58
 8008362:	d149      	bne.n	80083f8 <_strtol_l.constprop.0+0xe4>
 8008364:	2310      	movs	r3, #16
 8008366:	786c      	ldrb	r4, [r5, #1]
 8008368:	3502      	adds	r5, #2
 800836a:	2200      	movs	r2, #0
 800836c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008370:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008374:	fbbc f9f3 	udiv	r9, ip, r3
 8008378:	4610      	mov	r0, r2
 800837a:	fb03 ca19 	mls	sl, r3, r9, ip
 800837e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008382:	2f09      	cmp	r7, #9
 8008384:	d814      	bhi.n	80083b0 <_strtol_l.constprop.0+0x9c>
 8008386:	463c      	mov	r4, r7
 8008388:	42a3      	cmp	r3, r4
 800838a:	dd20      	ble.n	80083ce <_strtol_l.constprop.0+0xba>
 800838c:	1c57      	adds	r7, r2, #1
 800838e:	d007      	beq.n	80083a0 <_strtol_l.constprop.0+0x8c>
 8008390:	4581      	cmp	r9, r0
 8008392:	d319      	bcc.n	80083c8 <_strtol_l.constprop.0+0xb4>
 8008394:	d101      	bne.n	800839a <_strtol_l.constprop.0+0x86>
 8008396:	45a2      	cmp	sl, r4
 8008398:	db16      	blt.n	80083c8 <_strtol_l.constprop.0+0xb4>
 800839a:	2201      	movs	r2, #1
 800839c:	fb00 4003 	mla	r0, r0, r3, r4
 80083a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083a4:	e7eb      	b.n	800837e <_strtol_l.constprop.0+0x6a>
 80083a6:	2c2b      	cmp	r4, #43	; 0x2b
 80083a8:	bf04      	itt	eq
 80083aa:	782c      	ldrbeq	r4, [r5, #0]
 80083ac:	1c95      	addeq	r5, r2, #2
 80083ae:	e7ce      	b.n	800834e <_strtol_l.constprop.0+0x3a>
 80083b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80083b4:	2f19      	cmp	r7, #25
 80083b6:	d801      	bhi.n	80083bc <_strtol_l.constprop.0+0xa8>
 80083b8:	3c37      	subs	r4, #55	; 0x37
 80083ba:	e7e5      	b.n	8008388 <_strtol_l.constprop.0+0x74>
 80083bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80083c0:	2f19      	cmp	r7, #25
 80083c2:	d804      	bhi.n	80083ce <_strtol_l.constprop.0+0xba>
 80083c4:	3c57      	subs	r4, #87	; 0x57
 80083c6:	e7df      	b.n	8008388 <_strtol_l.constprop.0+0x74>
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295
 80083cc:	e7e8      	b.n	80083a0 <_strtol_l.constprop.0+0x8c>
 80083ce:	1c53      	adds	r3, r2, #1
 80083d0:	d108      	bne.n	80083e4 <_strtol_l.constprop.0+0xd0>
 80083d2:	2322      	movs	r3, #34	; 0x22
 80083d4:	4660      	mov	r0, ip
 80083d6:	f8ce 3000 	str.w	r3, [lr]
 80083da:	f1b8 0f00 	cmp.w	r8, #0
 80083de:	d0a6      	beq.n	800832e <_strtol_l.constprop.0+0x1a>
 80083e0:	1e69      	subs	r1, r5, #1
 80083e2:	e006      	b.n	80083f2 <_strtol_l.constprop.0+0xde>
 80083e4:	b106      	cbz	r6, 80083e8 <_strtol_l.constprop.0+0xd4>
 80083e6:	4240      	negs	r0, r0
 80083e8:	f1b8 0f00 	cmp.w	r8, #0
 80083ec:	d09f      	beq.n	800832e <_strtol_l.constprop.0+0x1a>
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	d1f6      	bne.n	80083e0 <_strtol_l.constprop.0+0xcc>
 80083f2:	f8c8 1000 	str.w	r1, [r8]
 80083f6:	e79a      	b.n	800832e <_strtol_l.constprop.0+0x1a>
 80083f8:	2430      	movs	r4, #48	; 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1b5      	bne.n	800836a <_strtol_l.constprop.0+0x56>
 80083fe:	2308      	movs	r3, #8
 8008400:	e7b3      	b.n	800836a <_strtol_l.constprop.0+0x56>
 8008402:	2c30      	cmp	r4, #48	; 0x30
 8008404:	d0a9      	beq.n	800835a <_strtol_l.constprop.0+0x46>
 8008406:	230a      	movs	r3, #10
 8008408:	e7af      	b.n	800836a <_strtol_l.constprop.0+0x56>
 800840a:	bf00      	nop
 800840c:	080098e1 	.word	0x080098e1

08008410 <_strtol_r>:
 8008410:	f7ff bf80 	b.w	8008314 <_strtol_l.constprop.0>

08008414 <__ssputs_r>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	461f      	mov	r7, r3
 800841a:	688e      	ldr	r6, [r1, #8]
 800841c:	4682      	mov	sl, r0
 800841e:	42be      	cmp	r6, r7
 8008420:	460c      	mov	r4, r1
 8008422:	4690      	mov	r8, r2
 8008424:	680b      	ldr	r3, [r1, #0]
 8008426:	d82c      	bhi.n	8008482 <__ssputs_r+0x6e>
 8008428:	898a      	ldrh	r2, [r1, #12]
 800842a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800842e:	d026      	beq.n	800847e <__ssputs_r+0x6a>
 8008430:	6965      	ldr	r5, [r4, #20]
 8008432:	6909      	ldr	r1, [r1, #16]
 8008434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008438:	eba3 0901 	sub.w	r9, r3, r1
 800843c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008440:	1c7b      	adds	r3, r7, #1
 8008442:	444b      	add	r3, r9
 8008444:	106d      	asrs	r5, r5, #1
 8008446:	429d      	cmp	r5, r3
 8008448:	bf38      	it	cc
 800844a:	461d      	movcc	r5, r3
 800844c:	0553      	lsls	r3, r2, #21
 800844e:	d527      	bpl.n	80084a0 <__ssputs_r+0x8c>
 8008450:	4629      	mov	r1, r5
 8008452:	f7fe fc19 	bl	8006c88 <_malloc_r>
 8008456:	4606      	mov	r6, r0
 8008458:	b360      	cbz	r0, 80084b4 <__ssputs_r+0xa0>
 800845a:	464a      	mov	r2, r9
 800845c:	6921      	ldr	r1, [r4, #16]
 800845e:	f000 fa17 	bl	8008890 <memcpy>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	6126      	str	r6, [r4, #16]
 8008470:	444e      	add	r6, r9
 8008472:	6026      	str	r6, [r4, #0]
 8008474:	463e      	mov	r6, r7
 8008476:	6165      	str	r5, [r4, #20]
 8008478:	eba5 0509 	sub.w	r5, r5, r9
 800847c:	60a5      	str	r5, [r4, #8]
 800847e:	42be      	cmp	r6, r7
 8008480:	d900      	bls.n	8008484 <__ssputs_r+0x70>
 8008482:	463e      	mov	r6, r7
 8008484:	4632      	mov	r2, r6
 8008486:	4641      	mov	r1, r8
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	f000 f9c5 	bl	8008818 <memmove>
 800848e:	2000      	movs	r0, #0
 8008490:	68a3      	ldr	r3, [r4, #8]
 8008492:	1b9b      	subs	r3, r3, r6
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	4433      	add	r3, r6
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a0:	462a      	mov	r2, r5
 80084a2:	f000 fda6 	bl	8008ff2 <_realloc_r>
 80084a6:	4606      	mov	r6, r0
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d1e0      	bne.n	800846e <__ssputs_r+0x5a>
 80084ac:	4650      	mov	r0, sl
 80084ae:	6921      	ldr	r1, [r4, #16]
 80084b0:	f7fe fb7a 	bl	8006ba8 <_free_r>
 80084b4:	230c      	movs	r3, #12
 80084b6:	f8ca 3000 	str.w	r3, [sl]
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7e9      	b.n	800849c <__ssputs_r+0x88>

080084c8 <_svfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4698      	mov	r8, r3
 80084ce:	898b      	ldrh	r3, [r1, #12]
 80084d0:	4607      	mov	r7, r0
 80084d2:	061b      	lsls	r3, r3, #24
 80084d4:	460d      	mov	r5, r1
 80084d6:	4614      	mov	r4, r2
 80084d8:	b09d      	sub	sp, #116	; 0x74
 80084da:	d50e      	bpl.n	80084fa <_svfiprintf_r+0x32>
 80084dc:	690b      	ldr	r3, [r1, #16]
 80084de:	b963      	cbnz	r3, 80084fa <_svfiprintf_r+0x32>
 80084e0:	2140      	movs	r1, #64	; 0x40
 80084e2:	f7fe fbd1 	bl	8006c88 <_malloc_r>
 80084e6:	6028      	str	r0, [r5, #0]
 80084e8:	6128      	str	r0, [r5, #16]
 80084ea:	b920      	cbnz	r0, 80084f6 <_svfiprintf_r+0x2e>
 80084ec:	230c      	movs	r3, #12
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	e0d0      	b.n	8008698 <_svfiprintf_r+0x1d0>
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	616b      	str	r3, [r5, #20]
 80084fa:	2300      	movs	r3, #0
 80084fc:	9309      	str	r3, [sp, #36]	; 0x24
 80084fe:	2320      	movs	r3, #32
 8008500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008504:	2330      	movs	r3, #48	; 0x30
 8008506:	f04f 0901 	mov.w	r9, #1
 800850a:	f8cd 800c 	str.w	r8, [sp, #12]
 800850e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80086b0 <_svfiprintf_r+0x1e8>
 8008512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008516:	4623      	mov	r3, r4
 8008518:	469a      	mov	sl, r3
 800851a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851e:	b10a      	cbz	r2, 8008524 <_svfiprintf_r+0x5c>
 8008520:	2a25      	cmp	r2, #37	; 0x25
 8008522:	d1f9      	bne.n	8008518 <_svfiprintf_r+0x50>
 8008524:	ebba 0b04 	subs.w	fp, sl, r4
 8008528:	d00b      	beq.n	8008542 <_svfiprintf_r+0x7a>
 800852a:	465b      	mov	r3, fp
 800852c:	4622      	mov	r2, r4
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ff6f 	bl	8008414 <__ssputs_r>
 8008536:	3001      	adds	r0, #1
 8008538:	f000 80a9 	beq.w	800868e <_svfiprintf_r+0x1c6>
 800853c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853e:	445a      	add	r2, fp
 8008540:	9209      	str	r2, [sp, #36]	; 0x24
 8008542:	f89a 3000 	ldrb.w	r3, [sl]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a1 	beq.w	800868e <_svfiprintf_r+0x1c6>
 800854c:	2300      	movs	r3, #0
 800854e:	f04f 32ff 	mov.w	r2, #4294967295
 8008552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008556:	f10a 0a01 	add.w	sl, sl, #1
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	9307      	str	r3, [sp, #28]
 800855e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008562:	931a      	str	r3, [sp, #104]	; 0x68
 8008564:	4654      	mov	r4, sl
 8008566:	2205      	movs	r2, #5
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	4850      	ldr	r0, [pc, #320]	; (80086b0 <_svfiprintf_r+0x1e8>)
 800856e:	f7fd fc9a 	bl	8005ea6 <memchr>
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	b9d8      	cbnz	r0, 80085ae <_svfiprintf_r+0xe6>
 8008576:	06d0      	lsls	r0, r2, #27
 8008578:	bf44      	itt	mi
 800857a:	2320      	movmi	r3, #32
 800857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008580:	0711      	lsls	r1, r2, #28
 8008582:	bf44      	itt	mi
 8008584:	232b      	movmi	r3, #43	; 0x2b
 8008586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858a:	f89a 3000 	ldrb.w	r3, [sl]
 800858e:	2b2a      	cmp	r3, #42	; 0x2a
 8008590:	d015      	beq.n	80085be <_svfiprintf_r+0xf6>
 8008592:	4654      	mov	r4, sl
 8008594:	2000      	movs	r0, #0
 8008596:	f04f 0c0a 	mov.w	ip, #10
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	4621      	mov	r1, r4
 800859e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a2:	3b30      	subs	r3, #48	; 0x30
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d94d      	bls.n	8008644 <_svfiprintf_r+0x17c>
 80085a8:	b1b0      	cbz	r0, 80085d8 <_svfiprintf_r+0x110>
 80085aa:	9207      	str	r2, [sp, #28]
 80085ac:	e014      	b.n	80085d8 <_svfiprintf_r+0x110>
 80085ae:	eba0 0308 	sub.w	r3, r0, r8
 80085b2:	fa09 f303 	lsl.w	r3, r9, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	46a2      	mov	sl, r4
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	e7d2      	b.n	8008564 <_svfiprintf_r+0x9c>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	1d19      	adds	r1, r3, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	9103      	str	r1, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfbb      	ittet	lt
 80085ca:	425b      	neglt	r3, r3
 80085cc:	f042 0202 	orrlt.w	r2, r2, #2
 80085d0:	9307      	strge	r3, [sp, #28]
 80085d2:	9307      	strlt	r3, [sp, #28]
 80085d4:	bfb8      	it	lt
 80085d6:	9204      	strlt	r2, [sp, #16]
 80085d8:	7823      	ldrb	r3, [r4, #0]
 80085da:	2b2e      	cmp	r3, #46	; 0x2e
 80085dc:	d10c      	bne.n	80085f8 <_svfiprintf_r+0x130>
 80085de:	7863      	ldrb	r3, [r4, #1]
 80085e0:	2b2a      	cmp	r3, #42	; 0x2a
 80085e2:	d134      	bne.n	800864e <_svfiprintf_r+0x186>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	3402      	adds	r4, #2
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	9203      	str	r2, [sp, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfb8      	it	lt
 80085f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80086b4 <_svfiprintf_r+0x1ec>
 80085fc:	2203      	movs	r2, #3
 80085fe:	4650      	mov	r0, sl
 8008600:	7821      	ldrb	r1, [r4, #0]
 8008602:	f7fd fc50 	bl	8005ea6 <memchr>
 8008606:	b138      	cbz	r0, 8008618 <_svfiprintf_r+0x150>
 8008608:	2240      	movs	r2, #64	; 0x40
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	eba0 000a 	sub.w	r0, r0, sl
 8008610:	4082      	lsls	r2, r0
 8008612:	4313      	orrs	r3, r2
 8008614:	3401      	adds	r4, #1
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	2206      	movs	r2, #6
 800861e:	4826      	ldr	r0, [pc, #152]	; (80086b8 <_svfiprintf_r+0x1f0>)
 8008620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008624:	f7fd fc3f 	bl	8005ea6 <memchr>
 8008628:	2800      	cmp	r0, #0
 800862a:	d038      	beq.n	800869e <_svfiprintf_r+0x1d6>
 800862c:	4b23      	ldr	r3, [pc, #140]	; (80086bc <_svfiprintf_r+0x1f4>)
 800862e:	bb1b      	cbnz	r3, 8008678 <_svfiprintf_r+0x1b0>
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	3307      	adds	r3, #7
 8008634:	f023 0307 	bic.w	r3, r3, #7
 8008638:	3308      	adds	r3, #8
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863e:	4433      	add	r3, r6
 8008640:	9309      	str	r3, [sp, #36]	; 0x24
 8008642:	e768      	b.n	8008516 <_svfiprintf_r+0x4e>
 8008644:	460c      	mov	r4, r1
 8008646:	2001      	movs	r0, #1
 8008648:	fb0c 3202 	mla	r2, ip, r2, r3
 800864c:	e7a6      	b.n	800859c <_svfiprintf_r+0xd4>
 800864e:	2300      	movs	r3, #0
 8008650:	f04f 0c0a 	mov.w	ip, #10
 8008654:	4619      	mov	r1, r3
 8008656:	3401      	adds	r4, #1
 8008658:	9305      	str	r3, [sp, #20]
 800865a:	4620      	mov	r0, r4
 800865c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008660:	3a30      	subs	r2, #48	; 0x30
 8008662:	2a09      	cmp	r2, #9
 8008664:	d903      	bls.n	800866e <_svfiprintf_r+0x1a6>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0c6      	beq.n	80085f8 <_svfiprintf_r+0x130>
 800866a:	9105      	str	r1, [sp, #20]
 800866c:	e7c4      	b.n	80085f8 <_svfiprintf_r+0x130>
 800866e:	4604      	mov	r4, r0
 8008670:	2301      	movs	r3, #1
 8008672:	fb0c 2101 	mla	r1, ip, r1, r2
 8008676:	e7f0      	b.n	800865a <_svfiprintf_r+0x192>
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	462a      	mov	r2, r5
 800867e:	4638      	mov	r0, r7
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <_svfiprintf_r+0x1f8>)
 8008682:	a904      	add	r1, sp, #16
 8008684:	f7fc fc7a 	bl	8004f7c <_printf_float>
 8008688:	1c42      	adds	r2, r0, #1
 800868a:	4606      	mov	r6, r0
 800868c:	d1d6      	bne.n	800863c <_svfiprintf_r+0x174>
 800868e:	89ab      	ldrh	r3, [r5, #12]
 8008690:	065b      	lsls	r3, r3, #25
 8008692:	f53f af2d 	bmi.w	80084f0 <_svfiprintf_r+0x28>
 8008696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008698:	b01d      	add	sp, #116	; 0x74
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	ab03      	add	r3, sp, #12
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	462a      	mov	r2, r5
 80086a4:	4638      	mov	r0, r7
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <_svfiprintf_r+0x1f8>)
 80086a8:	a904      	add	r1, sp, #16
 80086aa:	f7fc ff07 	bl	80054bc <_printf_i>
 80086ae:	e7eb      	b.n	8008688 <_svfiprintf_r+0x1c0>
 80086b0:	080099e1 	.word	0x080099e1
 80086b4:	080099e7 	.word	0x080099e7
 80086b8:	080099eb 	.word	0x080099eb
 80086bc:	08004f7d 	.word	0x08004f7d
 80086c0:	08008415 	.word	0x08008415

080086c4 <__sflush_r>:
 80086c4:	898a      	ldrh	r2, [r1, #12]
 80086c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c8:	4605      	mov	r5, r0
 80086ca:	0710      	lsls	r0, r2, #28
 80086cc:	460c      	mov	r4, r1
 80086ce:	d457      	bmi.n	8008780 <__sflush_r+0xbc>
 80086d0:	684b      	ldr	r3, [r1, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dc04      	bgt.n	80086e0 <__sflush_r+0x1c>
 80086d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	dc01      	bgt.n	80086e0 <__sflush_r+0x1c>
 80086dc:	2000      	movs	r0, #0
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	d0fa      	beq.n	80086dc <__sflush_r+0x18>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086ec:	682f      	ldr	r7, [r5, #0]
 80086ee:	6a21      	ldr	r1, [r4, #32]
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	d032      	beq.n	800875a <__sflush_r+0x96>
 80086f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	075a      	lsls	r2, r3, #29
 80086fa:	d505      	bpl.n	8008708 <__sflush_r+0x44>
 80086fc:	6863      	ldr	r3, [r4, #4]
 80086fe:	1ac0      	subs	r0, r0, r3
 8008700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008702:	b10b      	cbz	r3, 8008708 <__sflush_r+0x44>
 8008704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008706:	1ac0      	subs	r0, r0, r3
 8008708:	2300      	movs	r3, #0
 800870a:	4602      	mov	r2, r0
 800870c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800870e:	4628      	mov	r0, r5
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	47b0      	blx	r6
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	d106      	bne.n	8008728 <__sflush_r+0x64>
 800871a:	6829      	ldr	r1, [r5, #0]
 800871c:	291d      	cmp	r1, #29
 800871e:	d82b      	bhi.n	8008778 <__sflush_r+0xb4>
 8008720:	4a28      	ldr	r2, [pc, #160]	; (80087c4 <__sflush_r+0x100>)
 8008722:	410a      	asrs	r2, r1
 8008724:	07d6      	lsls	r6, r2, #31
 8008726:	d427      	bmi.n	8008778 <__sflush_r+0xb4>
 8008728:	2200      	movs	r2, #0
 800872a:	6062      	str	r2, [r4, #4]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	04d9      	lsls	r1, r3, #19
 8008730:	6022      	str	r2, [r4, #0]
 8008732:	d504      	bpl.n	800873e <__sflush_r+0x7a>
 8008734:	1c42      	adds	r2, r0, #1
 8008736:	d101      	bne.n	800873c <__sflush_r+0x78>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b903      	cbnz	r3, 800873e <__sflush_r+0x7a>
 800873c:	6560      	str	r0, [r4, #84]	; 0x54
 800873e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008740:	602f      	str	r7, [r5, #0]
 8008742:	2900      	cmp	r1, #0
 8008744:	d0ca      	beq.n	80086dc <__sflush_r+0x18>
 8008746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800874a:	4299      	cmp	r1, r3
 800874c:	d002      	beq.n	8008754 <__sflush_r+0x90>
 800874e:	4628      	mov	r0, r5
 8008750:	f7fe fa2a 	bl	8006ba8 <_free_r>
 8008754:	2000      	movs	r0, #0
 8008756:	6360      	str	r0, [r4, #52]	; 0x34
 8008758:	e7c1      	b.n	80086de <__sflush_r+0x1a>
 800875a:	2301      	movs	r3, #1
 800875c:	4628      	mov	r0, r5
 800875e:	47b0      	blx	r6
 8008760:	1c41      	adds	r1, r0, #1
 8008762:	d1c8      	bne.n	80086f6 <__sflush_r+0x32>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0c5      	beq.n	80086f6 <__sflush_r+0x32>
 800876a:	2b1d      	cmp	r3, #29
 800876c:	d001      	beq.n	8008772 <__sflush_r+0xae>
 800876e:	2b16      	cmp	r3, #22
 8008770:	d101      	bne.n	8008776 <__sflush_r+0xb2>
 8008772:	602f      	str	r7, [r5, #0]
 8008774:	e7b2      	b.n	80086dc <__sflush_r+0x18>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	e7ae      	b.n	80086de <__sflush_r+0x1a>
 8008780:	690f      	ldr	r7, [r1, #16]
 8008782:	2f00      	cmp	r7, #0
 8008784:	d0aa      	beq.n	80086dc <__sflush_r+0x18>
 8008786:	0793      	lsls	r3, r2, #30
 8008788:	bf18      	it	ne
 800878a:	2300      	movne	r3, #0
 800878c:	680e      	ldr	r6, [r1, #0]
 800878e:	bf08      	it	eq
 8008790:	694b      	ldreq	r3, [r1, #20]
 8008792:	1bf6      	subs	r6, r6, r7
 8008794:	600f      	str	r7, [r1, #0]
 8008796:	608b      	str	r3, [r1, #8]
 8008798:	2e00      	cmp	r6, #0
 800879a:	dd9f      	ble.n	80086dc <__sflush_r+0x18>
 800879c:	4633      	mov	r3, r6
 800879e:	463a      	mov	r2, r7
 80087a0:	4628      	mov	r0, r5
 80087a2:	6a21      	ldr	r1, [r4, #32]
 80087a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80087a8:	47e0      	blx	ip
 80087aa:	2800      	cmp	r0, #0
 80087ac:	dc06      	bgt.n	80087bc <__sflush_r+0xf8>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	e790      	b.n	80086de <__sflush_r+0x1a>
 80087bc:	4407      	add	r7, r0
 80087be:	1a36      	subs	r6, r6, r0
 80087c0:	e7ea      	b.n	8008798 <__sflush_r+0xd4>
 80087c2:	bf00      	nop
 80087c4:	dfbffffe 	.word	0xdfbffffe

080087c8 <_fflush_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b913      	cbnz	r3, 80087d8 <_fflush_r+0x10>
 80087d2:	2500      	movs	r5, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	b118      	cbz	r0, 80087e2 <_fflush_r+0x1a>
 80087da:	6a03      	ldr	r3, [r0, #32]
 80087dc:	b90b      	cbnz	r3, 80087e2 <_fflush_r+0x1a>
 80087de:	f7fd fa29 	bl	8005c34 <__sinit>
 80087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f3      	beq.n	80087d2 <_fflush_r+0xa>
 80087ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087ec:	07d0      	lsls	r0, r2, #31
 80087ee:	d404      	bmi.n	80087fa <_fflush_r+0x32>
 80087f0:	0599      	lsls	r1, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_fflush_r+0x32>
 80087f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087f6:	f7fd fb54 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 80087fa:	4628      	mov	r0, r5
 80087fc:	4621      	mov	r1, r4
 80087fe:	f7ff ff61 	bl	80086c4 <__sflush_r>
 8008802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008804:	4605      	mov	r5, r0
 8008806:	07da      	lsls	r2, r3, #31
 8008808:	d4e4      	bmi.n	80087d4 <_fflush_r+0xc>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	059b      	lsls	r3, r3, #22
 800880e:	d4e1      	bmi.n	80087d4 <_fflush_r+0xc>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f7fd fb47 	bl	8005ea4 <__retarget_lock_release_recursive>
 8008816:	e7dd      	b.n	80087d4 <_fflush_r+0xc>

08008818 <memmove>:
 8008818:	4288      	cmp	r0, r1
 800881a:	b510      	push	{r4, lr}
 800881c:	eb01 0402 	add.w	r4, r1, r2
 8008820:	d902      	bls.n	8008828 <memmove+0x10>
 8008822:	4284      	cmp	r4, r0
 8008824:	4623      	mov	r3, r4
 8008826:	d807      	bhi.n	8008838 <memmove+0x20>
 8008828:	1e43      	subs	r3, r0, #1
 800882a:	42a1      	cmp	r1, r4
 800882c:	d008      	beq.n	8008840 <memmove+0x28>
 800882e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008836:	e7f8      	b.n	800882a <memmove+0x12>
 8008838:	4601      	mov	r1, r0
 800883a:	4402      	add	r2, r0
 800883c:	428a      	cmp	r2, r1
 800883e:	d100      	bne.n	8008842 <memmove+0x2a>
 8008840:	bd10      	pop	{r4, pc}
 8008842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800884a:	e7f7      	b.n	800883c <memmove+0x24>

0800884c <strncmp>:
 800884c:	b510      	push	{r4, lr}
 800884e:	b16a      	cbz	r2, 800886c <strncmp+0x20>
 8008850:	3901      	subs	r1, #1
 8008852:	1884      	adds	r4, r0, r2
 8008854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008858:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800885c:	429a      	cmp	r2, r3
 800885e:	d103      	bne.n	8008868 <strncmp+0x1c>
 8008860:	42a0      	cmp	r0, r4
 8008862:	d001      	beq.n	8008868 <strncmp+0x1c>
 8008864:	2a00      	cmp	r2, #0
 8008866:	d1f5      	bne.n	8008854 <strncmp+0x8>
 8008868:	1ad0      	subs	r0, r2, r3
 800886a:	bd10      	pop	{r4, pc}
 800886c:	4610      	mov	r0, r2
 800886e:	e7fc      	b.n	800886a <strncmp+0x1e>

08008870 <_sbrk_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	2300      	movs	r3, #0
 8008874:	4d05      	ldr	r5, [pc, #20]	; (800888c <_sbrk_r+0x1c>)
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7f9 f9ac 	bl	8001bd8 <_sbrk>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_sbrk_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_sbrk_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	20000498 	.word	0x20000498

08008890 <memcpy>:
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	f100 33ff 	add.w	r3, r0, #4294967295
 8008898:	d100      	bne.n	800889c <memcpy+0xc>
 800889a:	4770      	bx	lr
 800889c:	b510      	push	{r4, lr}
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	4291      	cmp	r1, r2
 80088a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a8:	d1f9      	bne.n	800889e <memcpy+0xe>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <nan>:
 80088ac:	2000      	movs	r0, #0
 80088ae:	4901      	ldr	r1, [pc, #4]	; (80088b4 <nan+0x8>)
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	7ff80000 	.word	0x7ff80000

080088b8 <__assert_func>:
 80088b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088ba:	4614      	mov	r4, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <__assert_func+0x2c>)
 80088c0:	4605      	mov	r5, r0
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68d8      	ldr	r0, [r3, #12]
 80088c6:	b14c      	cbz	r4, 80088dc <__assert_func+0x24>
 80088c8:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <__assert_func+0x30>)
 80088ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088ce:	9100      	str	r1, [sp, #0]
 80088d0:	462b      	mov	r3, r5
 80088d2:	4906      	ldr	r1, [pc, #24]	; (80088ec <__assert_func+0x34>)
 80088d4:	f000 fbca 	bl	800906c <fiprintf>
 80088d8:	f000 fbda 	bl	8009090 <abort>
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <__assert_func+0x38>)
 80088de:	461c      	mov	r4, r3
 80088e0:	e7f3      	b.n	80088ca <__assert_func+0x12>
 80088e2:	bf00      	nop
 80088e4:	20000064 	.word	0x20000064
 80088e8:	080099fa 	.word	0x080099fa
 80088ec:	08009a07 	.word	0x08009a07
 80088f0:	08009a35 	.word	0x08009a35

080088f4 <_calloc_r>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	fba1 5402 	umull	r5, r4, r1, r2
 80088fa:	b934      	cbnz	r4, 800890a <_calloc_r+0x16>
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7fe f9c3 	bl	8006c88 <_malloc_r>
 8008902:	4606      	mov	r6, r0
 8008904:	b928      	cbnz	r0, 8008912 <_calloc_r+0x1e>
 8008906:	4630      	mov	r0, r6
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	220c      	movs	r2, #12
 800890c:	2600      	movs	r6, #0
 800890e:	6002      	str	r2, [r0, #0]
 8008910:	e7f9      	b.n	8008906 <_calloc_r+0x12>
 8008912:	462a      	mov	r2, r5
 8008914:	4621      	mov	r1, r4
 8008916:	f7fd fa47 	bl	8005da8 <memset>
 800891a:	e7f4      	b.n	8008906 <_calloc_r+0x12>

0800891c <rshift>:
 800891c:	6903      	ldr	r3, [r0, #16]
 800891e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008922:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008926:	f100 0414 	add.w	r4, r0, #20
 800892a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800892e:	dd46      	ble.n	80089be <rshift+0xa2>
 8008930:	f011 011f 	ands.w	r1, r1, #31
 8008934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800893c:	d10c      	bne.n	8008958 <rshift+0x3c>
 800893e:	4629      	mov	r1, r5
 8008940:	f100 0710 	add.w	r7, r0, #16
 8008944:	42b1      	cmp	r1, r6
 8008946:	d335      	bcc.n	80089b4 <rshift+0x98>
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	1eea      	subs	r2, r5, #3
 800894e:	4296      	cmp	r6, r2
 8008950:	bf38      	it	cc
 8008952:	2300      	movcc	r3, #0
 8008954:	4423      	add	r3, r4
 8008956:	e015      	b.n	8008984 <rshift+0x68>
 8008958:	46a1      	mov	r9, r4
 800895a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800895e:	f1c1 0820 	rsb	r8, r1, #32
 8008962:	40cf      	lsrs	r7, r1
 8008964:	f105 0e04 	add.w	lr, r5, #4
 8008968:	4576      	cmp	r6, lr
 800896a:	46f4      	mov	ip, lr
 800896c:	d816      	bhi.n	800899c <rshift+0x80>
 800896e:	1a9a      	subs	r2, r3, r2
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	3a04      	subs	r2, #4
 8008974:	3501      	adds	r5, #1
 8008976:	42ae      	cmp	r6, r5
 8008978:	bf38      	it	cc
 800897a:	2200      	movcc	r2, #0
 800897c:	18a3      	adds	r3, r4, r2
 800897e:	50a7      	str	r7, [r4, r2]
 8008980:	b107      	cbz	r7, 8008984 <rshift+0x68>
 8008982:	3304      	adds	r3, #4
 8008984:	42a3      	cmp	r3, r4
 8008986:	eba3 0204 	sub.w	r2, r3, r4
 800898a:	bf08      	it	eq
 800898c:	2300      	moveq	r3, #0
 800898e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008992:	6102      	str	r2, [r0, #16]
 8008994:	bf08      	it	eq
 8008996:	6143      	streq	r3, [r0, #20]
 8008998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800899c:	f8dc c000 	ldr.w	ip, [ip]
 80089a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80089a4:	ea4c 0707 	orr.w	r7, ip, r7
 80089a8:	f849 7b04 	str.w	r7, [r9], #4
 80089ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089b0:	40cf      	lsrs	r7, r1
 80089b2:	e7d9      	b.n	8008968 <rshift+0x4c>
 80089b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80089b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80089bc:	e7c2      	b.n	8008944 <rshift+0x28>
 80089be:	4623      	mov	r3, r4
 80089c0:	e7e0      	b.n	8008984 <rshift+0x68>

080089c2 <__hexdig_fun>:
 80089c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	d802      	bhi.n	80089d0 <__hexdig_fun+0xe>
 80089ca:	3820      	subs	r0, #32
 80089cc:	b2c0      	uxtb	r0, r0
 80089ce:	4770      	bx	lr
 80089d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089d4:	2b05      	cmp	r3, #5
 80089d6:	d801      	bhi.n	80089dc <__hexdig_fun+0x1a>
 80089d8:	3847      	subs	r0, #71	; 0x47
 80089da:	e7f7      	b.n	80089cc <__hexdig_fun+0xa>
 80089dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d801      	bhi.n	80089e8 <__hexdig_fun+0x26>
 80089e4:	3827      	subs	r0, #39	; 0x27
 80089e6:	e7f1      	b.n	80089cc <__hexdig_fun+0xa>
 80089e8:	2000      	movs	r0, #0
 80089ea:	4770      	bx	lr

080089ec <__gethex>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	4681      	mov	r9, r0
 80089f2:	468a      	mov	sl, r1
 80089f4:	4617      	mov	r7, r2
 80089f6:	680a      	ldr	r2, [r1, #0]
 80089f8:	b085      	sub	sp, #20
 80089fa:	f102 0b02 	add.w	fp, r2, #2
 80089fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a06:	9302      	str	r3, [sp, #8]
 8008a08:	32fe      	adds	r2, #254	; 0xfe
 8008a0a:	eb02 030b 	add.w	r3, r2, fp
 8008a0e:	46d8      	mov	r8, fp
 8008a10:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	2830      	cmp	r0, #48	; 0x30
 8008a18:	d0f7      	beq.n	8008a0a <__gethex+0x1e>
 8008a1a:	f7ff ffd2 	bl	80089c2 <__hexdig_fun>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d138      	bne.n	8008a96 <__gethex+0xaa>
 8008a24:	2201      	movs	r2, #1
 8008a26:	4640      	mov	r0, r8
 8008a28:	49a7      	ldr	r1, [pc, #668]	; (8008cc8 <__gethex+0x2dc>)
 8008a2a:	f7ff ff0f 	bl	800884c <strncmp>
 8008a2e:	4606      	mov	r6, r0
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d169      	bne.n	8008b08 <__gethex+0x11c>
 8008a34:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008a38:	465d      	mov	r5, fp
 8008a3a:	f7ff ffc2 	bl	80089c2 <__hexdig_fun>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d064      	beq.n	8008b0c <__gethex+0x120>
 8008a42:	465a      	mov	r2, fp
 8008a44:	7810      	ldrb	r0, [r2, #0]
 8008a46:	4690      	mov	r8, r2
 8008a48:	2830      	cmp	r0, #48	; 0x30
 8008a4a:	f102 0201 	add.w	r2, r2, #1
 8008a4e:	d0f9      	beq.n	8008a44 <__gethex+0x58>
 8008a50:	f7ff ffb7 	bl	80089c2 <__hexdig_fun>
 8008a54:	2301      	movs	r3, #1
 8008a56:	fab0 f480 	clz	r4, r0
 8008a5a:	465e      	mov	r6, fp
 8008a5c:	0964      	lsrs	r4, r4, #5
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	4642      	mov	r2, r8
 8008a62:	4615      	mov	r5, r2
 8008a64:	7828      	ldrb	r0, [r5, #0]
 8008a66:	3201      	adds	r2, #1
 8008a68:	f7ff ffab 	bl	80089c2 <__hexdig_fun>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1f8      	bne.n	8008a62 <__gethex+0x76>
 8008a70:	2201      	movs	r2, #1
 8008a72:	4628      	mov	r0, r5
 8008a74:	4994      	ldr	r1, [pc, #592]	; (8008cc8 <__gethex+0x2dc>)
 8008a76:	f7ff fee9 	bl	800884c <strncmp>
 8008a7a:	b978      	cbnz	r0, 8008a9c <__gethex+0xb0>
 8008a7c:	b946      	cbnz	r6, 8008a90 <__gethex+0xa4>
 8008a7e:	1c6e      	adds	r6, r5, #1
 8008a80:	4632      	mov	r2, r6
 8008a82:	4615      	mov	r5, r2
 8008a84:	7828      	ldrb	r0, [r5, #0]
 8008a86:	3201      	adds	r2, #1
 8008a88:	f7ff ff9b 	bl	80089c2 <__hexdig_fun>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d1f8      	bne.n	8008a82 <__gethex+0x96>
 8008a90:	1b73      	subs	r3, r6, r5
 8008a92:	009e      	lsls	r6, r3, #2
 8008a94:	e004      	b.n	8008aa0 <__gethex+0xb4>
 8008a96:	2400      	movs	r4, #0
 8008a98:	4626      	mov	r6, r4
 8008a9a:	e7e1      	b.n	8008a60 <__gethex+0x74>
 8008a9c:	2e00      	cmp	r6, #0
 8008a9e:	d1f7      	bne.n	8008a90 <__gethex+0xa4>
 8008aa0:	782b      	ldrb	r3, [r5, #0]
 8008aa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008aa6:	2b50      	cmp	r3, #80	; 0x50
 8008aa8:	d13d      	bne.n	8008b26 <__gethex+0x13a>
 8008aaa:	786b      	ldrb	r3, [r5, #1]
 8008aac:	2b2b      	cmp	r3, #43	; 0x2b
 8008aae:	d02f      	beq.n	8008b10 <__gethex+0x124>
 8008ab0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ab2:	d031      	beq.n	8008b18 <__gethex+0x12c>
 8008ab4:	f04f 0b00 	mov.w	fp, #0
 8008ab8:	1c69      	adds	r1, r5, #1
 8008aba:	7808      	ldrb	r0, [r1, #0]
 8008abc:	f7ff ff81 	bl	80089c2 <__hexdig_fun>
 8008ac0:	1e42      	subs	r2, r0, #1
 8008ac2:	b2d2      	uxtb	r2, r2
 8008ac4:	2a18      	cmp	r2, #24
 8008ac6:	d82e      	bhi.n	8008b26 <__gethex+0x13a>
 8008ac8:	f1a0 0210 	sub.w	r2, r0, #16
 8008acc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ad0:	f7ff ff77 	bl	80089c2 <__hexdig_fun>
 8008ad4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ad8:	fa5f fc8c 	uxtb.w	ip, ip
 8008adc:	f1bc 0f18 	cmp.w	ip, #24
 8008ae0:	d91d      	bls.n	8008b1e <__gethex+0x132>
 8008ae2:	f1bb 0f00 	cmp.w	fp, #0
 8008ae6:	d000      	beq.n	8008aea <__gethex+0xfe>
 8008ae8:	4252      	negs	r2, r2
 8008aea:	4416      	add	r6, r2
 8008aec:	f8ca 1000 	str.w	r1, [sl]
 8008af0:	b1dc      	cbz	r4, 8008b2a <__gethex+0x13e>
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bf14      	ite	ne
 8008af8:	f04f 0800 	movne.w	r8, #0
 8008afc:	f04f 0806 	moveq.w	r8, #6
 8008b00:	4640      	mov	r0, r8
 8008b02:	b005      	add	sp, #20
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b08:	4645      	mov	r5, r8
 8008b0a:	4626      	mov	r6, r4
 8008b0c:	2401      	movs	r4, #1
 8008b0e:	e7c7      	b.n	8008aa0 <__gethex+0xb4>
 8008b10:	f04f 0b00 	mov.w	fp, #0
 8008b14:	1ca9      	adds	r1, r5, #2
 8008b16:	e7d0      	b.n	8008aba <__gethex+0xce>
 8008b18:	f04f 0b01 	mov.w	fp, #1
 8008b1c:	e7fa      	b.n	8008b14 <__gethex+0x128>
 8008b1e:	230a      	movs	r3, #10
 8008b20:	fb03 0002 	mla	r0, r3, r2, r0
 8008b24:	e7d0      	b.n	8008ac8 <__gethex+0xdc>
 8008b26:	4629      	mov	r1, r5
 8008b28:	e7e0      	b.n	8008aec <__gethex+0x100>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	eba5 0308 	sub.w	r3, r5, r8
 8008b30:	3b01      	subs	r3, #1
 8008b32:	2b07      	cmp	r3, #7
 8008b34:	dc0a      	bgt.n	8008b4c <__gethex+0x160>
 8008b36:	4648      	mov	r0, r9
 8008b38:	f7fe f932 	bl	8006da0 <_Balloc>
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	b940      	cbnz	r0, 8008b52 <__gethex+0x166>
 8008b40:	4602      	mov	r2, r0
 8008b42:	21e4      	movs	r1, #228	; 0xe4
 8008b44:	4b61      	ldr	r3, [pc, #388]	; (8008ccc <__gethex+0x2e0>)
 8008b46:	4862      	ldr	r0, [pc, #392]	; (8008cd0 <__gethex+0x2e4>)
 8008b48:	f7ff feb6 	bl	80088b8 <__assert_func>
 8008b4c:	3101      	adds	r1, #1
 8008b4e:	105b      	asrs	r3, r3, #1
 8008b50:	e7ef      	b.n	8008b32 <__gethex+0x146>
 8008b52:	2300      	movs	r3, #0
 8008b54:	469b      	mov	fp, r3
 8008b56:	f100 0a14 	add.w	sl, r0, #20
 8008b5a:	f8cd a004 	str.w	sl, [sp, #4]
 8008b5e:	45a8      	cmp	r8, r5
 8008b60:	d344      	bcc.n	8008bec <__gethex+0x200>
 8008b62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b66:	4658      	mov	r0, fp
 8008b68:	f848 bb04 	str.w	fp, [r8], #4
 8008b6c:	eba8 080a 	sub.w	r8, r8, sl
 8008b70:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008b74:	6122      	str	r2, [r4, #16]
 8008b76:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008b7a:	f7fe fa03 	bl	8006f84 <__hi0bits>
 8008b7e:	683d      	ldr	r5, [r7, #0]
 8008b80:	eba8 0800 	sub.w	r8, r8, r0
 8008b84:	45a8      	cmp	r8, r5
 8008b86:	dd59      	ble.n	8008c3c <__gethex+0x250>
 8008b88:	eba8 0805 	sub.w	r8, r8, r5
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f7fe fd81 	bl	8007696 <__any_on>
 8008b94:	4683      	mov	fp, r0
 8008b96:	b1b8      	cbz	r0, 8008bc8 <__gethex+0x1dc>
 8008b98:	f04f 0b01 	mov.w	fp, #1
 8008b9c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008ba0:	1159      	asrs	r1, r3, #5
 8008ba2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ba6:	f003 021f 	and.w	r2, r3, #31
 8008baa:	fa0b f202 	lsl.w	r2, fp, r2
 8008bae:	420a      	tst	r2, r1
 8008bb0:	d00a      	beq.n	8008bc8 <__gethex+0x1dc>
 8008bb2:	455b      	cmp	r3, fp
 8008bb4:	dd06      	ble.n	8008bc4 <__gethex+0x1d8>
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f1a8 0102 	sub.w	r1, r8, #2
 8008bbc:	f7fe fd6b 	bl	8007696 <__any_on>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d138      	bne.n	8008c36 <__gethex+0x24a>
 8008bc4:	f04f 0b02 	mov.w	fp, #2
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff fea6 	bl	800891c <rshift>
 8008bd0:	4446      	add	r6, r8
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	42b3      	cmp	r3, r6
 8008bd6:	da41      	bge.n	8008c5c <__gethex+0x270>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4648      	mov	r0, r9
 8008bdc:	f7fe f920 	bl	8006e20 <_Bfree>
 8008be0:	2300      	movs	r3, #0
 8008be2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008be4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e789      	b.n	8008b00 <__gethex+0x114>
 8008bec:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008bf0:	2a2e      	cmp	r2, #46	; 0x2e
 8008bf2:	d014      	beq.n	8008c1e <__gethex+0x232>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d106      	bne.n	8008c06 <__gethex+0x21a>
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	f843 bb04 	str.w	fp, [r3], #4
 8008bfe:	f04f 0b00 	mov.w	fp, #0
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	465b      	mov	r3, fp
 8008c06:	7828      	ldrb	r0, [r5, #0]
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	f7ff feda 	bl	80089c2 <__hexdig_fun>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	f000 000f 	and.w	r0, r0, #15
 8008c14:	4098      	lsls	r0, r3
 8008c16:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	e79f      	b.n	8008b5e <__gethex+0x172>
 8008c1e:	45a8      	cmp	r8, r5
 8008c20:	d8e8      	bhi.n	8008bf4 <__gethex+0x208>
 8008c22:	2201      	movs	r2, #1
 8008c24:	4628      	mov	r0, r5
 8008c26:	4928      	ldr	r1, [pc, #160]	; (8008cc8 <__gethex+0x2dc>)
 8008c28:	9303      	str	r3, [sp, #12]
 8008c2a:	f7ff fe0f 	bl	800884c <strncmp>
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1df      	bne.n	8008bf4 <__gethex+0x208>
 8008c34:	e793      	b.n	8008b5e <__gethex+0x172>
 8008c36:	f04f 0b03 	mov.w	fp, #3
 8008c3a:	e7c5      	b.n	8008bc8 <__gethex+0x1dc>
 8008c3c:	da0b      	bge.n	8008c56 <__gethex+0x26a>
 8008c3e:	eba5 0808 	sub.w	r8, r5, r8
 8008c42:	4621      	mov	r1, r4
 8008c44:	4642      	mov	r2, r8
 8008c46:	4648      	mov	r0, r9
 8008c48:	f7fe fb02 	bl	8007250 <__lshift>
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	eba6 0608 	sub.w	r6, r6, r8
 8008c52:	f100 0a14 	add.w	sl, r0, #20
 8008c56:	f04f 0b00 	mov.w	fp, #0
 8008c5a:	e7ba      	b.n	8008bd2 <__gethex+0x1e6>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	42b3      	cmp	r3, r6
 8008c60:	dd74      	ble.n	8008d4c <__gethex+0x360>
 8008c62:	1b9e      	subs	r6, r3, r6
 8008c64:	42b5      	cmp	r5, r6
 8008c66:	dc35      	bgt.n	8008cd4 <__gethex+0x2e8>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d023      	beq.n	8008cb6 <__gethex+0x2ca>
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d025      	beq.n	8008cbe <__gethex+0x2d2>
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d115      	bne.n	8008ca2 <__gethex+0x2b6>
 8008c76:	42b5      	cmp	r5, r6
 8008c78:	d113      	bne.n	8008ca2 <__gethex+0x2b6>
 8008c7a:	2d01      	cmp	r5, #1
 8008c7c:	d10b      	bne.n	8008c96 <__gethex+0x2aa>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	9a02      	ldr	r2, [sp, #8]
 8008c82:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	f8ca 3000 	str.w	r3, [sl]
 8008c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c92:	601c      	str	r4, [r3, #0]
 8008c94:	e734      	b.n	8008b00 <__gethex+0x114>
 8008c96:	4620      	mov	r0, r4
 8008c98:	1e69      	subs	r1, r5, #1
 8008c9a:	f7fe fcfc 	bl	8007696 <__any_on>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d1ed      	bne.n	8008c7e <__gethex+0x292>
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f7fe f8bb 	bl	8006e20 <_Bfree>
 8008caa:	2300      	movs	r3, #0
 8008cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cae:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	e724      	b.n	8008b00 <__gethex+0x114>
 8008cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1f2      	bne.n	8008ca2 <__gethex+0x2b6>
 8008cbc:	e7df      	b.n	8008c7e <__gethex+0x292>
 8008cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1dc      	bne.n	8008c7e <__gethex+0x292>
 8008cc4:	e7ed      	b.n	8008ca2 <__gethex+0x2b6>
 8008cc6:	bf00      	nop
 8008cc8:	0800988c 	.word	0x0800988c
 8008ccc:	08009723 	.word	0x08009723
 8008cd0:	08009a36 	.word	0x08009a36
 8008cd4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008cd8:	f1bb 0f00 	cmp.w	fp, #0
 8008cdc:	d133      	bne.n	8008d46 <__gethex+0x35a>
 8008cde:	f1b8 0f00 	cmp.w	r8, #0
 8008ce2:	d004      	beq.n	8008cee <__gethex+0x302>
 8008ce4:	4641      	mov	r1, r8
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7fe fcd5 	bl	8007696 <__any_on>
 8008cec:	4683      	mov	fp, r0
 8008cee:	2301      	movs	r3, #1
 8008cf0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008cf4:	f008 081f 	and.w	r8, r8, #31
 8008cf8:	fa03 f308 	lsl.w	r3, r3, r8
 8008cfc:	f04f 0802 	mov.w	r8, #2
 8008d00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d04:	4631      	mov	r1, r6
 8008d06:	4213      	tst	r3, r2
 8008d08:	4620      	mov	r0, r4
 8008d0a:	bf18      	it	ne
 8008d0c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008d10:	1bad      	subs	r5, r5, r6
 8008d12:	f7ff fe03 	bl	800891c <rshift>
 8008d16:	687e      	ldr	r6, [r7, #4]
 8008d18:	f1bb 0f00 	cmp.w	fp, #0
 8008d1c:	d04a      	beq.n	8008db4 <__gethex+0x3c8>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d016      	beq.n	8008d52 <__gethex+0x366>
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d018      	beq.n	8008d5a <__gethex+0x36e>
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d109      	bne.n	8008d40 <__gethex+0x354>
 8008d2c:	f01b 0f02 	tst.w	fp, #2
 8008d30:	d006      	beq.n	8008d40 <__gethex+0x354>
 8008d32:	f8da 3000 	ldr.w	r3, [sl]
 8008d36:	ea4b 0b03 	orr.w	fp, fp, r3
 8008d3a:	f01b 0f01 	tst.w	fp, #1
 8008d3e:	d10f      	bne.n	8008d60 <__gethex+0x374>
 8008d40:	f048 0810 	orr.w	r8, r8, #16
 8008d44:	e036      	b.n	8008db4 <__gethex+0x3c8>
 8008d46:	f04f 0b01 	mov.w	fp, #1
 8008d4a:	e7d0      	b.n	8008cee <__gethex+0x302>
 8008d4c:	f04f 0801 	mov.w	r8, #1
 8008d50:	e7e2      	b.n	8008d18 <__gethex+0x32c>
 8008d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d54:	f1c3 0301 	rsb	r3, r3, #1
 8008d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ef      	beq.n	8008d40 <__gethex+0x354>
 8008d60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d64:	f104 0214 	add.w	r2, r4, #20
 8008d68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008d74:	4694      	mov	ip, r2
 8008d76:	f852 1b04 	ldr.w	r1, [r2], #4
 8008d7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008d7e:	d01e      	beq.n	8008dbe <__gethex+0x3d2>
 8008d80:	3101      	adds	r1, #1
 8008d82:	f8cc 1000 	str.w	r1, [ip]
 8008d86:	f1b8 0f02 	cmp.w	r8, #2
 8008d8a:	f104 0214 	add.w	r2, r4, #20
 8008d8e:	d13d      	bne.n	8008e0c <__gethex+0x420>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	d10b      	bne.n	8008db0 <__gethex+0x3c4>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	1169      	asrs	r1, r5, #5
 8008d9c:	f005 051f 	and.w	r5, r5, #31
 8008da0:	fa03 f505 	lsl.w	r5, r3, r5
 8008da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008da8:	421d      	tst	r5, r3
 8008daa:	bf18      	it	ne
 8008dac:	f04f 0801 	movne.w	r8, #1
 8008db0:	f048 0820 	orr.w	r8, r8, #32
 8008db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db6:	601c      	str	r4, [r3, #0]
 8008db8:	9b02      	ldr	r3, [sp, #8]
 8008dba:	601e      	str	r6, [r3, #0]
 8008dbc:	e6a0      	b.n	8008b00 <__gethex+0x114>
 8008dbe:	4290      	cmp	r0, r2
 8008dc0:	f842 3c04 	str.w	r3, [r2, #-4]
 8008dc4:	d8d6      	bhi.n	8008d74 <__gethex+0x388>
 8008dc6:	68a2      	ldr	r2, [r4, #8]
 8008dc8:	4593      	cmp	fp, r2
 8008dca:	db17      	blt.n	8008dfc <__gethex+0x410>
 8008dcc:	6861      	ldr	r1, [r4, #4]
 8008dce:	4648      	mov	r0, r9
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	f7fd ffe5 	bl	8006da0 <_Balloc>
 8008dd6:	4682      	mov	sl, r0
 8008dd8:	b918      	cbnz	r0, 8008de2 <__gethex+0x3f6>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	2184      	movs	r1, #132	; 0x84
 8008dde:	4b1a      	ldr	r3, [pc, #104]	; (8008e48 <__gethex+0x45c>)
 8008de0:	e6b1      	b.n	8008b46 <__gethex+0x15a>
 8008de2:	6922      	ldr	r2, [r4, #16]
 8008de4:	f104 010c 	add.w	r1, r4, #12
 8008de8:	3202      	adds	r2, #2
 8008dea:	0092      	lsls	r2, r2, #2
 8008dec:	300c      	adds	r0, #12
 8008dee:	f7ff fd4f 	bl	8008890 <memcpy>
 8008df2:	4621      	mov	r1, r4
 8008df4:	4648      	mov	r0, r9
 8008df6:	f7fe f813 	bl	8006e20 <_Bfree>
 8008dfa:	4654      	mov	r4, sl
 8008dfc:	6922      	ldr	r2, [r4, #16]
 8008dfe:	1c51      	adds	r1, r2, #1
 8008e00:	6121      	str	r1, [r4, #16]
 8008e02:	2101      	movs	r1, #1
 8008e04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e08:	6151      	str	r1, [r2, #20]
 8008e0a:	e7bc      	b.n	8008d86 <__gethex+0x39a>
 8008e0c:	6921      	ldr	r1, [r4, #16]
 8008e0e:	4559      	cmp	r1, fp
 8008e10:	dd0b      	ble.n	8008e2a <__gethex+0x43e>
 8008e12:	2101      	movs	r1, #1
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7ff fd81 	bl	800891c <rshift>
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	42b3      	cmp	r3, r6
 8008e20:	f6ff aeda 	blt.w	8008bd8 <__gethex+0x1ec>
 8008e24:	f04f 0801 	mov.w	r8, #1
 8008e28:	e7c2      	b.n	8008db0 <__gethex+0x3c4>
 8008e2a:	f015 051f 	ands.w	r5, r5, #31
 8008e2e:	d0f9      	beq.n	8008e24 <__gethex+0x438>
 8008e30:	9b01      	ldr	r3, [sp, #4]
 8008e32:	f1c5 0520 	rsb	r5, r5, #32
 8008e36:	441a      	add	r2, r3
 8008e38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008e3c:	f7fe f8a2 	bl	8006f84 <__hi0bits>
 8008e40:	42a8      	cmp	r0, r5
 8008e42:	dbe6      	blt.n	8008e12 <__gethex+0x426>
 8008e44:	e7ee      	b.n	8008e24 <__gethex+0x438>
 8008e46:	bf00      	nop
 8008e48:	08009723 	.word	0x08009723

08008e4c <L_shift>:
 8008e4c:	f1c2 0208 	rsb	r2, r2, #8
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	b570      	push	{r4, r5, r6, lr}
 8008e54:	f1c2 0620 	rsb	r6, r2, #32
 8008e58:	6843      	ldr	r3, [r0, #4]
 8008e5a:	6804      	ldr	r4, [r0, #0]
 8008e5c:	fa03 f506 	lsl.w	r5, r3, r6
 8008e60:	432c      	orrs	r4, r5
 8008e62:	40d3      	lsrs	r3, r2
 8008e64:	6004      	str	r4, [r0, #0]
 8008e66:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e6a:	4288      	cmp	r0, r1
 8008e6c:	d3f4      	bcc.n	8008e58 <L_shift+0xc>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}

08008e70 <__match>:
 8008e70:	b530      	push	{r4, r5, lr}
 8008e72:	6803      	ldr	r3, [r0, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7a:	b914      	cbnz	r4, 8008e82 <__match+0x12>
 8008e7c:	6003      	str	r3, [r0, #0]
 8008e7e:	2001      	movs	r0, #1
 8008e80:	bd30      	pop	{r4, r5, pc}
 8008e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e8a:	2d19      	cmp	r5, #25
 8008e8c:	bf98      	it	ls
 8008e8e:	3220      	addls	r2, #32
 8008e90:	42a2      	cmp	r2, r4
 8008e92:	d0f0      	beq.n	8008e76 <__match+0x6>
 8008e94:	2000      	movs	r0, #0
 8008e96:	e7f3      	b.n	8008e80 <__match+0x10>

08008e98 <__hexnan>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	2500      	movs	r5, #0
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	115e      	asrs	r6, r3, #5
 8008ea4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ea8:	f013 031f 	ands.w	r3, r3, #31
 8008eac:	bf18      	it	ne
 8008eae:	3604      	addne	r6, #4
 8008eb0:	1f37      	subs	r7, r6, #4
 8008eb2:	4690      	mov	r8, r2
 8008eb4:	46b9      	mov	r9, r7
 8008eb6:	463c      	mov	r4, r7
 8008eb8:	46ab      	mov	fp, r5
 8008eba:	b087      	sub	sp, #28
 8008ebc:	6801      	ldr	r1, [r0, #0]
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ec4:	9502      	str	r5, [sp, #8]
 8008ec6:	784a      	ldrb	r2, [r1, #1]
 8008ec8:	1c4b      	adds	r3, r1, #1
 8008eca:	9303      	str	r3, [sp, #12]
 8008ecc:	b342      	cbz	r2, 8008f20 <__hexnan+0x88>
 8008ece:	4610      	mov	r0, r2
 8008ed0:	9105      	str	r1, [sp, #20]
 8008ed2:	9204      	str	r2, [sp, #16]
 8008ed4:	f7ff fd75 	bl	80089c2 <__hexdig_fun>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d14f      	bne.n	8008f7c <__hexnan+0xe4>
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	9905      	ldr	r1, [sp, #20]
 8008ee0:	2a20      	cmp	r2, #32
 8008ee2:	d818      	bhi.n	8008f16 <__hexnan+0x7e>
 8008ee4:	9b02      	ldr	r3, [sp, #8]
 8008ee6:	459b      	cmp	fp, r3
 8008ee8:	dd13      	ble.n	8008f12 <__hexnan+0x7a>
 8008eea:	454c      	cmp	r4, r9
 8008eec:	d206      	bcs.n	8008efc <__hexnan+0x64>
 8008eee:	2d07      	cmp	r5, #7
 8008ef0:	dc04      	bgt.n	8008efc <__hexnan+0x64>
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7ff ffa8 	bl	8008e4c <L_shift>
 8008efc:	4544      	cmp	r4, r8
 8008efe:	d950      	bls.n	8008fa2 <__hexnan+0x10a>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f1a4 0904 	sub.w	r9, r4, #4
 8008f06:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f0a:	461d      	mov	r5, r3
 8008f0c:	464c      	mov	r4, r9
 8008f0e:	f8cd b008 	str.w	fp, [sp, #8]
 8008f12:	9903      	ldr	r1, [sp, #12]
 8008f14:	e7d7      	b.n	8008ec6 <__hexnan+0x2e>
 8008f16:	2a29      	cmp	r2, #41	; 0x29
 8008f18:	d155      	bne.n	8008fc6 <__hexnan+0x12e>
 8008f1a:	3102      	adds	r1, #2
 8008f1c:	f8ca 1000 	str.w	r1, [sl]
 8008f20:	f1bb 0f00 	cmp.w	fp, #0
 8008f24:	d04f      	beq.n	8008fc6 <__hexnan+0x12e>
 8008f26:	454c      	cmp	r4, r9
 8008f28:	d206      	bcs.n	8008f38 <__hexnan+0xa0>
 8008f2a:	2d07      	cmp	r5, #7
 8008f2c:	dc04      	bgt.n	8008f38 <__hexnan+0xa0>
 8008f2e:	462a      	mov	r2, r5
 8008f30:	4649      	mov	r1, r9
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff ff8a 	bl	8008e4c <L_shift>
 8008f38:	4544      	cmp	r4, r8
 8008f3a:	d934      	bls.n	8008fa6 <__hexnan+0x10e>
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	f1a8 0204 	sub.w	r2, r8, #4
 8008f42:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f46:	429f      	cmp	r7, r3
 8008f48:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f4c:	d2f9      	bcs.n	8008f42 <__hexnan+0xaa>
 8008f4e:	1b3b      	subs	r3, r7, r4
 8008f50:	f023 0303 	bic.w	r3, r3, #3
 8008f54:	3304      	adds	r3, #4
 8008f56:	3e03      	subs	r6, #3
 8008f58:	3401      	adds	r4, #1
 8008f5a:	42a6      	cmp	r6, r4
 8008f5c:	bf38      	it	cc
 8008f5e:	2304      	movcc	r3, #4
 8008f60:	2200      	movs	r2, #0
 8008f62:	4443      	add	r3, r8
 8008f64:	f843 2b04 	str.w	r2, [r3], #4
 8008f68:	429f      	cmp	r7, r3
 8008f6a:	d2fb      	bcs.n	8008f64 <__hexnan+0xcc>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	b91b      	cbnz	r3, 8008f78 <__hexnan+0xe0>
 8008f70:	4547      	cmp	r7, r8
 8008f72:	d126      	bne.n	8008fc2 <__hexnan+0x12a>
 8008f74:	2301      	movs	r3, #1
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	2005      	movs	r0, #5
 8008f7a:	e025      	b.n	8008fc8 <__hexnan+0x130>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	2d08      	cmp	r5, #8
 8008f80:	f10b 0b01 	add.w	fp, fp, #1
 8008f84:	dd06      	ble.n	8008f94 <__hexnan+0xfc>
 8008f86:	4544      	cmp	r4, r8
 8008f88:	d9c3      	bls.n	8008f12 <__hexnan+0x7a>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2501      	movs	r5, #1
 8008f8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f92:	3c04      	subs	r4, #4
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	f000 000f 	and.w	r0, r0, #15
 8008f9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f9e:	6020      	str	r0, [r4, #0]
 8008fa0:	e7b7      	b.n	8008f12 <__hexnan+0x7a>
 8008fa2:	2508      	movs	r5, #8
 8008fa4:	e7b5      	b.n	8008f12 <__hexnan+0x7a>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0df      	beq.n	8008f6c <__hexnan+0xd4>
 8008fac:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb0:	f1c3 0320 	rsb	r3, r3, #32
 8008fb4:	40da      	lsrs	r2, r3
 8008fb6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008fc0:	e7d4      	b.n	8008f6c <__hexnan+0xd4>
 8008fc2:	3f04      	subs	r7, #4
 8008fc4:	e7d2      	b.n	8008f6c <__hexnan+0xd4>
 8008fc6:	2004      	movs	r0, #4
 8008fc8:	b007      	add	sp, #28
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fce <__ascii_mbtowc>:
 8008fce:	b082      	sub	sp, #8
 8008fd0:	b901      	cbnz	r1, 8008fd4 <__ascii_mbtowc+0x6>
 8008fd2:	a901      	add	r1, sp, #4
 8008fd4:	b142      	cbz	r2, 8008fe8 <__ascii_mbtowc+0x1a>
 8008fd6:	b14b      	cbz	r3, 8008fec <__ascii_mbtowc+0x1e>
 8008fd8:	7813      	ldrb	r3, [r2, #0]
 8008fda:	600b      	str	r3, [r1, #0]
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	1e10      	subs	r0, r2, #0
 8008fe0:	bf18      	it	ne
 8008fe2:	2001      	movne	r0, #1
 8008fe4:	b002      	add	sp, #8
 8008fe6:	4770      	bx	lr
 8008fe8:	4610      	mov	r0, r2
 8008fea:	e7fb      	b.n	8008fe4 <__ascii_mbtowc+0x16>
 8008fec:	f06f 0001 	mvn.w	r0, #1
 8008ff0:	e7f8      	b.n	8008fe4 <__ascii_mbtowc+0x16>

08008ff2 <_realloc_r>:
 8008ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	460e      	mov	r6, r1
 8008ffc:	b921      	cbnz	r1, 8009008 <_realloc_r+0x16>
 8008ffe:	4611      	mov	r1, r2
 8009000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009004:	f7fd be40 	b.w	8006c88 <_malloc_r>
 8009008:	b92a      	cbnz	r2, 8009016 <_realloc_r+0x24>
 800900a:	f7fd fdcd 	bl	8006ba8 <_free_r>
 800900e:	4625      	mov	r5, r4
 8009010:	4628      	mov	r0, r5
 8009012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009016:	f000 f842 	bl	800909e <_malloc_usable_size_r>
 800901a:	4284      	cmp	r4, r0
 800901c:	4607      	mov	r7, r0
 800901e:	d802      	bhi.n	8009026 <_realloc_r+0x34>
 8009020:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009024:	d812      	bhi.n	800904c <_realloc_r+0x5a>
 8009026:	4621      	mov	r1, r4
 8009028:	4640      	mov	r0, r8
 800902a:	f7fd fe2d 	bl	8006c88 <_malloc_r>
 800902e:	4605      	mov	r5, r0
 8009030:	2800      	cmp	r0, #0
 8009032:	d0ed      	beq.n	8009010 <_realloc_r+0x1e>
 8009034:	42bc      	cmp	r4, r7
 8009036:	4622      	mov	r2, r4
 8009038:	4631      	mov	r1, r6
 800903a:	bf28      	it	cs
 800903c:	463a      	movcs	r2, r7
 800903e:	f7ff fc27 	bl	8008890 <memcpy>
 8009042:	4631      	mov	r1, r6
 8009044:	4640      	mov	r0, r8
 8009046:	f7fd fdaf 	bl	8006ba8 <_free_r>
 800904a:	e7e1      	b.n	8009010 <_realloc_r+0x1e>
 800904c:	4635      	mov	r5, r6
 800904e:	e7df      	b.n	8009010 <_realloc_r+0x1e>

08009050 <__ascii_wctomb>:
 8009050:	4603      	mov	r3, r0
 8009052:	4608      	mov	r0, r1
 8009054:	b141      	cbz	r1, 8009068 <__ascii_wctomb+0x18>
 8009056:	2aff      	cmp	r2, #255	; 0xff
 8009058:	d904      	bls.n	8009064 <__ascii_wctomb+0x14>
 800905a:	228a      	movs	r2, #138	; 0x8a
 800905c:	f04f 30ff 	mov.w	r0, #4294967295
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	4770      	bx	lr
 8009064:	2001      	movs	r0, #1
 8009066:	700a      	strb	r2, [r1, #0]
 8009068:	4770      	bx	lr
	...

0800906c <fiprintf>:
 800906c:	b40e      	push	{r1, r2, r3}
 800906e:	b503      	push	{r0, r1, lr}
 8009070:	4601      	mov	r1, r0
 8009072:	ab03      	add	r3, sp, #12
 8009074:	4805      	ldr	r0, [pc, #20]	; (800908c <fiprintf+0x20>)
 8009076:	f853 2b04 	ldr.w	r2, [r3], #4
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	f000 f83d 	bl	80090fc <_vfiprintf_r>
 8009082:	b002      	add	sp, #8
 8009084:	f85d eb04 	ldr.w	lr, [sp], #4
 8009088:	b003      	add	sp, #12
 800908a:	4770      	bx	lr
 800908c:	20000064 	.word	0x20000064

08009090 <abort>:
 8009090:	2006      	movs	r0, #6
 8009092:	b508      	push	{r3, lr}
 8009094:	f000 fa0a 	bl	80094ac <raise>
 8009098:	2001      	movs	r0, #1
 800909a:	f7f8 fd2a 	bl	8001af2 <_exit>

0800909e <_malloc_usable_size_r>:
 800909e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a2:	1f18      	subs	r0, r3, #4
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfbc      	itt	lt
 80090a8:	580b      	ldrlt	r3, [r1, r0]
 80090aa:	18c0      	addlt	r0, r0, r3
 80090ac:	4770      	bx	lr

080090ae <__sfputc_r>:
 80090ae:	6893      	ldr	r3, [r2, #8]
 80090b0:	b410      	push	{r4}
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	6093      	str	r3, [r2, #8]
 80090b8:	da07      	bge.n	80090ca <__sfputc_r+0x1c>
 80090ba:	6994      	ldr	r4, [r2, #24]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	db01      	blt.n	80090c4 <__sfputc_r+0x16>
 80090c0:	290a      	cmp	r1, #10
 80090c2:	d102      	bne.n	80090ca <__sfputc_r+0x1c>
 80090c4:	bc10      	pop	{r4}
 80090c6:	f000 b933 	b.w	8009330 <__swbuf_r>
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	1c58      	adds	r0, r3, #1
 80090ce:	6010      	str	r0, [r2, #0]
 80090d0:	7019      	strb	r1, [r3, #0]
 80090d2:	4608      	mov	r0, r1
 80090d4:	bc10      	pop	{r4}
 80090d6:	4770      	bx	lr

080090d8 <__sfputs_r>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4606      	mov	r6, r0
 80090dc:	460f      	mov	r7, r1
 80090de:	4614      	mov	r4, r2
 80090e0:	18d5      	adds	r5, r2, r3
 80090e2:	42ac      	cmp	r4, r5
 80090e4:	d101      	bne.n	80090ea <__sfputs_r+0x12>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e007      	b.n	80090fa <__sfputs_r+0x22>
 80090ea:	463a      	mov	r2, r7
 80090ec:	4630      	mov	r0, r6
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	f7ff ffdc 	bl	80090ae <__sfputc_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d1f3      	bne.n	80090e2 <__sfputs_r+0xa>
 80090fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090fc <_vfiprintf_r>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	460d      	mov	r5, r1
 8009102:	4614      	mov	r4, r2
 8009104:	4698      	mov	r8, r3
 8009106:	4606      	mov	r6, r0
 8009108:	b09d      	sub	sp, #116	; 0x74
 800910a:	b118      	cbz	r0, 8009114 <_vfiprintf_r+0x18>
 800910c:	6a03      	ldr	r3, [r0, #32]
 800910e:	b90b      	cbnz	r3, 8009114 <_vfiprintf_r+0x18>
 8009110:	f7fc fd90 	bl	8005c34 <__sinit>
 8009114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009116:	07d9      	lsls	r1, r3, #31
 8009118:	d405      	bmi.n	8009126 <_vfiprintf_r+0x2a>
 800911a:	89ab      	ldrh	r3, [r5, #12]
 800911c:	059a      	lsls	r2, r3, #22
 800911e:	d402      	bmi.n	8009126 <_vfiprintf_r+0x2a>
 8009120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009122:	f7fc febe 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	071b      	lsls	r3, r3, #28
 800912a:	d501      	bpl.n	8009130 <_vfiprintf_r+0x34>
 800912c:	692b      	ldr	r3, [r5, #16]
 800912e:	b99b      	cbnz	r3, 8009158 <_vfiprintf_r+0x5c>
 8009130:	4629      	mov	r1, r5
 8009132:	4630      	mov	r0, r6
 8009134:	f000 f93a 	bl	80093ac <__swsetup_r>
 8009138:	b170      	cbz	r0, 8009158 <_vfiprintf_r+0x5c>
 800913a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800913c:	07dc      	lsls	r4, r3, #31
 800913e:	d504      	bpl.n	800914a <_vfiprintf_r+0x4e>
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	b01d      	add	sp, #116	; 0x74
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	0598      	lsls	r0, r3, #22
 800914e:	d4f7      	bmi.n	8009140 <_vfiprintf_r+0x44>
 8009150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009152:	f7fc fea7 	bl	8005ea4 <__retarget_lock_release_recursive>
 8009156:	e7f3      	b.n	8009140 <_vfiprintf_r+0x44>
 8009158:	2300      	movs	r3, #0
 800915a:	9309      	str	r3, [sp, #36]	; 0x24
 800915c:	2320      	movs	r3, #32
 800915e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009162:	2330      	movs	r3, #48	; 0x30
 8009164:	f04f 0901 	mov.w	r9, #1
 8009168:	f8cd 800c 	str.w	r8, [sp, #12]
 800916c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800931c <_vfiprintf_r+0x220>
 8009170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009174:	4623      	mov	r3, r4
 8009176:	469a      	mov	sl, r3
 8009178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917c:	b10a      	cbz	r2, 8009182 <_vfiprintf_r+0x86>
 800917e:	2a25      	cmp	r2, #37	; 0x25
 8009180:	d1f9      	bne.n	8009176 <_vfiprintf_r+0x7a>
 8009182:	ebba 0b04 	subs.w	fp, sl, r4
 8009186:	d00b      	beq.n	80091a0 <_vfiprintf_r+0xa4>
 8009188:	465b      	mov	r3, fp
 800918a:	4622      	mov	r2, r4
 800918c:	4629      	mov	r1, r5
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff ffa2 	bl	80090d8 <__sfputs_r>
 8009194:	3001      	adds	r0, #1
 8009196:	f000 80a9 	beq.w	80092ec <_vfiprintf_r+0x1f0>
 800919a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800919c:	445a      	add	r2, fp
 800919e:	9209      	str	r2, [sp, #36]	; 0x24
 80091a0:	f89a 3000 	ldrb.w	r3, [sl]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80a1 	beq.w	80092ec <_vfiprintf_r+0x1f0>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f04f 32ff 	mov.w	r2, #4294967295
 80091b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b4:	f10a 0a01 	add.w	sl, sl, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c0:	931a      	str	r3, [sp, #104]	; 0x68
 80091c2:	4654      	mov	r4, sl
 80091c4:	2205      	movs	r2, #5
 80091c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ca:	4854      	ldr	r0, [pc, #336]	; (800931c <_vfiprintf_r+0x220>)
 80091cc:	f7fc fe6b 	bl	8005ea6 <memchr>
 80091d0:	9a04      	ldr	r2, [sp, #16]
 80091d2:	b9d8      	cbnz	r0, 800920c <_vfiprintf_r+0x110>
 80091d4:	06d1      	lsls	r1, r2, #27
 80091d6:	bf44      	itt	mi
 80091d8:	2320      	movmi	r3, #32
 80091da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091de:	0713      	lsls	r3, r2, #28
 80091e0:	bf44      	itt	mi
 80091e2:	232b      	movmi	r3, #43	; 0x2b
 80091e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ec:	2b2a      	cmp	r3, #42	; 0x2a
 80091ee:	d015      	beq.n	800921c <_vfiprintf_r+0x120>
 80091f0:	4654      	mov	r4, sl
 80091f2:	2000      	movs	r0, #0
 80091f4:	f04f 0c0a 	mov.w	ip, #10
 80091f8:	9a07      	ldr	r2, [sp, #28]
 80091fa:	4621      	mov	r1, r4
 80091fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009200:	3b30      	subs	r3, #48	; 0x30
 8009202:	2b09      	cmp	r3, #9
 8009204:	d94d      	bls.n	80092a2 <_vfiprintf_r+0x1a6>
 8009206:	b1b0      	cbz	r0, 8009236 <_vfiprintf_r+0x13a>
 8009208:	9207      	str	r2, [sp, #28]
 800920a:	e014      	b.n	8009236 <_vfiprintf_r+0x13a>
 800920c:	eba0 0308 	sub.w	r3, r0, r8
 8009210:	fa09 f303 	lsl.w	r3, r9, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	46a2      	mov	sl, r4
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	e7d2      	b.n	80091c2 <_vfiprintf_r+0xc6>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1d19      	adds	r1, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	9103      	str	r1, [sp, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbb      	ittet	lt
 8009228:	425b      	neglt	r3, r3
 800922a:	f042 0202 	orrlt.w	r2, r2, #2
 800922e:	9307      	strge	r3, [sp, #28]
 8009230:	9307      	strlt	r3, [sp, #28]
 8009232:	bfb8      	it	lt
 8009234:	9204      	strlt	r2, [sp, #16]
 8009236:	7823      	ldrb	r3, [r4, #0]
 8009238:	2b2e      	cmp	r3, #46	; 0x2e
 800923a:	d10c      	bne.n	8009256 <_vfiprintf_r+0x15a>
 800923c:	7863      	ldrb	r3, [r4, #1]
 800923e:	2b2a      	cmp	r3, #42	; 0x2a
 8009240:	d134      	bne.n	80092ac <_vfiprintf_r+0x1b0>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	3402      	adds	r4, #2
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	9203      	str	r2, [sp, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfb8      	it	lt
 8009250:	f04f 33ff 	movlt.w	r3, #4294967295
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009320 <_vfiprintf_r+0x224>
 800925a:	2203      	movs	r2, #3
 800925c:	4650      	mov	r0, sl
 800925e:	7821      	ldrb	r1, [r4, #0]
 8009260:	f7fc fe21 	bl	8005ea6 <memchr>
 8009264:	b138      	cbz	r0, 8009276 <_vfiprintf_r+0x17a>
 8009266:	2240      	movs	r2, #64	; 0x40
 8009268:	9b04      	ldr	r3, [sp, #16]
 800926a:	eba0 000a 	sub.w	r0, r0, sl
 800926e:	4082      	lsls	r2, r0
 8009270:	4313      	orrs	r3, r2
 8009272:	3401      	adds	r4, #1
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927a:	2206      	movs	r2, #6
 800927c:	4829      	ldr	r0, [pc, #164]	; (8009324 <_vfiprintf_r+0x228>)
 800927e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009282:	f7fc fe10 	bl	8005ea6 <memchr>
 8009286:	2800      	cmp	r0, #0
 8009288:	d03f      	beq.n	800930a <_vfiprintf_r+0x20e>
 800928a:	4b27      	ldr	r3, [pc, #156]	; (8009328 <_vfiprintf_r+0x22c>)
 800928c:	bb1b      	cbnz	r3, 80092d6 <_vfiprintf_r+0x1da>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	3307      	adds	r3, #7
 8009292:	f023 0307 	bic.w	r3, r3, #7
 8009296:	3308      	adds	r3, #8
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929c:	443b      	add	r3, r7
 800929e:	9309      	str	r3, [sp, #36]	; 0x24
 80092a0:	e768      	b.n	8009174 <_vfiprintf_r+0x78>
 80092a2:	460c      	mov	r4, r1
 80092a4:	2001      	movs	r0, #1
 80092a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80092aa:	e7a6      	b.n	80091fa <_vfiprintf_r+0xfe>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f04f 0c0a 	mov.w	ip, #10
 80092b2:	4619      	mov	r1, r3
 80092b4:	3401      	adds	r4, #1
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092be:	3a30      	subs	r2, #48	; 0x30
 80092c0:	2a09      	cmp	r2, #9
 80092c2:	d903      	bls.n	80092cc <_vfiprintf_r+0x1d0>
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0c6      	beq.n	8009256 <_vfiprintf_r+0x15a>
 80092c8:	9105      	str	r1, [sp, #20]
 80092ca:	e7c4      	b.n	8009256 <_vfiprintf_r+0x15a>
 80092cc:	4604      	mov	r4, r0
 80092ce:	2301      	movs	r3, #1
 80092d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d4:	e7f0      	b.n	80092b8 <_vfiprintf_r+0x1bc>
 80092d6:	ab03      	add	r3, sp, #12
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	462a      	mov	r2, r5
 80092dc:	4630      	mov	r0, r6
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <_vfiprintf_r+0x230>)
 80092e0:	a904      	add	r1, sp, #16
 80092e2:	f7fb fe4b 	bl	8004f7c <_printf_float>
 80092e6:	4607      	mov	r7, r0
 80092e8:	1c78      	adds	r0, r7, #1
 80092ea:	d1d6      	bne.n	800929a <_vfiprintf_r+0x19e>
 80092ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ee:	07d9      	lsls	r1, r3, #31
 80092f0:	d405      	bmi.n	80092fe <_vfiprintf_r+0x202>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	059a      	lsls	r2, r3, #22
 80092f6:	d402      	bmi.n	80092fe <_vfiprintf_r+0x202>
 80092f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fa:	f7fc fdd3 	bl	8005ea4 <__retarget_lock_release_recursive>
 80092fe:	89ab      	ldrh	r3, [r5, #12]
 8009300:	065b      	lsls	r3, r3, #25
 8009302:	f53f af1d 	bmi.w	8009140 <_vfiprintf_r+0x44>
 8009306:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009308:	e71c      	b.n	8009144 <_vfiprintf_r+0x48>
 800930a:	ab03      	add	r3, sp, #12
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	462a      	mov	r2, r5
 8009310:	4630      	mov	r0, r6
 8009312:	4b06      	ldr	r3, [pc, #24]	; (800932c <_vfiprintf_r+0x230>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	f7fc f8d1 	bl	80054bc <_printf_i>
 800931a:	e7e4      	b.n	80092e6 <_vfiprintf_r+0x1ea>
 800931c:	080099e1 	.word	0x080099e1
 8009320:	080099e7 	.word	0x080099e7
 8009324:	080099eb 	.word	0x080099eb
 8009328:	08004f7d 	.word	0x08004f7d
 800932c:	080090d9 	.word	0x080090d9

08009330 <__swbuf_r>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	460e      	mov	r6, r1
 8009334:	4614      	mov	r4, r2
 8009336:	4605      	mov	r5, r0
 8009338:	b118      	cbz	r0, 8009342 <__swbuf_r+0x12>
 800933a:	6a03      	ldr	r3, [r0, #32]
 800933c:	b90b      	cbnz	r3, 8009342 <__swbuf_r+0x12>
 800933e:	f7fc fc79 	bl	8005c34 <__sinit>
 8009342:	69a3      	ldr	r3, [r4, #24]
 8009344:	60a3      	str	r3, [r4, #8]
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	071a      	lsls	r2, r3, #28
 800934a:	d525      	bpl.n	8009398 <__swbuf_r+0x68>
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	b31b      	cbz	r3, 8009398 <__swbuf_r+0x68>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	6922      	ldr	r2, [r4, #16]
 8009354:	b2f6      	uxtb	r6, r6
 8009356:	1a98      	subs	r0, r3, r2
 8009358:	6963      	ldr	r3, [r4, #20]
 800935a:	4637      	mov	r7, r6
 800935c:	4283      	cmp	r3, r0
 800935e:	dc04      	bgt.n	800936a <__swbuf_r+0x3a>
 8009360:	4621      	mov	r1, r4
 8009362:	4628      	mov	r0, r5
 8009364:	f7ff fa30 	bl	80087c8 <_fflush_r>
 8009368:	b9e0      	cbnz	r0, 80093a4 <__swbuf_r+0x74>
 800936a:	68a3      	ldr	r3, [r4, #8]
 800936c:	3b01      	subs	r3, #1
 800936e:	60a3      	str	r3, [r4, #8]
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	6022      	str	r2, [r4, #0]
 8009376:	701e      	strb	r6, [r3, #0]
 8009378:	6962      	ldr	r2, [r4, #20]
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	429a      	cmp	r2, r3
 800937e:	d004      	beq.n	800938a <__swbuf_r+0x5a>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	07db      	lsls	r3, r3, #31
 8009384:	d506      	bpl.n	8009394 <__swbuf_r+0x64>
 8009386:	2e0a      	cmp	r6, #10
 8009388:	d104      	bne.n	8009394 <__swbuf_r+0x64>
 800938a:	4621      	mov	r1, r4
 800938c:	4628      	mov	r0, r5
 800938e:	f7ff fa1b 	bl	80087c8 <_fflush_r>
 8009392:	b938      	cbnz	r0, 80093a4 <__swbuf_r+0x74>
 8009394:	4638      	mov	r0, r7
 8009396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009398:	4621      	mov	r1, r4
 800939a:	4628      	mov	r0, r5
 800939c:	f000 f806 	bl	80093ac <__swsetup_r>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d0d5      	beq.n	8009350 <__swbuf_r+0x20>
 80093a4:	f04f 37ff 	mov.w	r7, #4294967295
 80093a8:	e7f4      	b.n	8009394 <__swbuf_r+0x64>
	...

080093ac <__swsetup_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4b2a      	ldr	r3, [pc, #168]	; (8009458 <__swsetup_r+0xac>)
 80093b0:	4605      	mov	r5, r0
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	460c      	mov	r4, r1
 80093b6:	b118      	cbz	r0, 80093c0 <__swsetup_r+0x14>
 80093b8:	6a03      	ldr	r3, [r0, #32]
 80093ba:	b90b      	cbnz	r3, 80093c0 <__swsetup_r+0x14>
 80093bc:	f7fc fc3a 	bl	8005c34 <__sinit>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093c6:	0718      	lsls	r0, r3, #28
 80093c8:	d422      	bmi.n	8009410 <__swsetup_r+0x64>
 80093ca:	06d9      	lsls	r1, r3, #27
 80093cc:	d407      	bmi.n	80093de <__swsetup_r+0x32>
 80093ce:	2309      	movs	r3, #9
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	e034      	b.n	8009448 <__swsetup_r+0x9c>
 80093de:	0758      	lsls	r0, r3, #29
 80093e0:	d512      	bpl.n	8009408 <__swsetup_r+0x5c>
 80093e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e4:	b141      	cbz	r1, 80093f8 <__swsetup_r+0x4c>
 80093e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ea:	4299      	cmp	r1, r3
 80093ec:	d002      	beq.n	80093f4 <__swsetup_r+0x48>
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7fd fbda 	bl	8006ba8 <_free_r>
 80093f4:	2300      	movs	r3, #0
 80093f6:	6363      	str	r3, [r4, #52]	; 0x34
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093fe:	81a3      	strh	r3, [r4, #12]
 8009400:	2300      	movs	r3, #0
 8009402:	6063      	str	r3, [r4, #4]
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0308 	orr.w	r3, r3, #8
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	b94b      	cbnz	r3, 8009428 <__swsetup_r+0x7c>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800941a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800941e:	d003      	beq.n	8009428 <__swsetup_r+0x7c>
 8009420:	4621      	mov	r1, r4
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f883 	bl	800952e <__smakebuf_r>
 8009428:	89a0      	ldrh	r0, [r4, #12]
 800942a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800942e:	f010 0301 	ands.w	r3, r0, #1
 8009432:	d00a      	beq.n	800944a <__swsetup_r+0x9e>
 8009434:	2300      	movs	r3, #0
 8009436:	60a3      	str	r3, [r4, #8]
 8009438:	6963      	ldr	r3, [r4, #20]
 800943a:	425b      	negs	r3, r3
 800943c:	61a3      	str	r3, [r4, #24]
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	b943      	cbnz	r3, 8009454 <__swsetup_r+0xa8>
 8009442:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009446:	d1c4      	bne.n	80093d2 <__swsetup_r+0x26>
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	0781      	lsls	r1, r0, #30
 800944c:	bf58      	it	pl
 800944e:	6963      	ldrpl	r3, [r4, #20]
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	e7f4      	b.n	800943e <__swsetup_r+0x92>
 8009454:	2000      	movs	r0, #0
 8009456:	e7f7      	b.n	8009448 <__swsetup_r+0x9c>
 8009458:	20000064 	.word	0x20000064

0800945c <_raise_r>:
 800945c:	291f      	cmp	r1, #31
 800945e:	b538      	push	{r3, r4, r5, lr}
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	d904      	bls.n	8009470 <_raise_r+0x14>
 8009466:	2316      	movs	r3, #22
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009472:	b112      	cbz	r2, 800947a <_raise_r+0x1e>
 8009474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009478:	b94b      	cbnz	r3, 800948e <_raise_r+0x32>
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f830 	bl	80094e0 <_getpid_r>
 8009480:	462a      	mov	r2, r5
 8009482:	4601      	mov	r1, r0
 8009484:	4620      	mov	r0, r4
 8009486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800948a:	f000 b817 	b.w	80094bc <_kill_r>
 800948e:	2b01      	cmp	r3, #1
 8009490:	d00a      	beq.n	80094a8 <_raise_r+0x4c>
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	d103      	bne.n	800949e <_raise_r+0x42>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	2001      	movs	r0, #1
 800949c:	e7e7      	b.n	800946e <_raise_r+0x12>
 800949e:	2400      	movs	r4, #0
 80094a0:	4628      	mov	r0, r5
 80094a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094a6:	4798      	blx	r3
 80094a8:	2000      	movs	r0, #0
 80094aa:	e7e0      	b.n	800946e <_raise_r+0x12>

080094ac <raise>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <raise+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bfd3 	b.w	800945c <_raise_r>
 80094b6:	bf00      	nop
 80094b8:	20000064 	.word	0x20000064

080094bc <_kill_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	2300      	movs	r3, #0
 80094c0:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_kill_r+0x20>)
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f7f8 fb02 	bl	8001ad2 <_kill>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d102      	bne.n	80094d8 <_kill_r+0x1c>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b103      	cbz	r3, 80094d8 <_kill_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	20000498 	.word	0x20000498

080094e0 <_getpid_r>:
 80094e0:	f7f8 baf0 	b.w	8001ac4 <_getpid>

080094e4 <__swhatbuf_r>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ec:	4615      	mov	r5, r2
 80094ee:	2900      	cmp	r1, #0
 80094f0:	461e      	mov	r6, r3
 80094f2:	b096      	sub	sp, #88	; 0x58
 80094f4:	da0c      	bge.n	8009510 <__swhatbuf_r+0x2c>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	2100      	movs	r1, #0
 80094fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094fe:	bf0c      	ite	eq
 8009500:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009504:	2340      	movne	r3, #64	; 0x40
 8009506:	2000      	movs	r0, #0
 8009508:	6031      	str	r1, [r6, #0]
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	b016      	add	sp, #88	; 0x58
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	466a      	mov	r2, sp
 8009512:	f000 f849 	bl	80095a8 <_fstat_r>
 8009516:	2800      	cmp	r0, #0
 8009518:	dbed      	blt.n	80094f6 <__swhatbuf_r+0x12>
 800951a:	9901      	ldr	r1, [sp, #4]
 800951c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009520:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009524:	4259      	negs	r1, r3
 8009526:	4159      	adcs	r1, r3
 8009528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952c:	e7eb      	b.n	8009506 <__swhatbuf_r+0x22>

0800952e <__smakebuf_r>:
 800952e:	898b      	ldrh	r3, [r1, #12]
 8009530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009532:	079d      	lsls	r5, r3, #30
 8009534:	4606      	mov	r6, r0
 8009536:	460c      	mov	r4, r1
 8009538:	d507      	bpl.n	800954a <__smakebuf_r+0x1c>
 800953a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	2301      	movs	r3, #1
 8009544:	6163      	str	r3, [r4, #20]
 8009546:	b002      	add	sp, #8
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	466a      	mov	r2, sp
 800954c:	ab01      	add	r3, sp, #4
 800954e:	f7ff ffc9 	bl	80094e4 <__swhatbuf_r>
 8009552:	9900      	ldr	r1, [sp, #0]
 8009554:	4605      	mov	r5, r0
 8009556:	4630      	mov	r0, r6
 8009558:	f7fd fb96 	bl	8006c88 <_malloc_r>
 800955c:	b948      	cbnz	r0, 8009572 <__smakebuf_r+0x44>
 800955e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009562:	059a      	lsls	r2, r3, #22
 8009564:	d4ef      	bmi.n	8009546 <__smakebuf_r+0x18>
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	f043 0302 	orr.w	r3, r3, #2
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	e7e3      	b.n	800953a <__smakebuf_r+0xc>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	6020      	str	r0, [r4, #0]
 8009576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	6120      	str	r0, [r4, #16]
 8009580:	6163      	str	r3, [r4, #20]
 8009582:	9b01      	ldr	r3, [sp, #4]
 8009584:	b15b      	cbz	r3, 800959e <__smakebuf_r+0x70>
 8009586:	4630      	mov	r0, r6
 8009588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800958c:	f000 f81e 	bl	80095cc <_isatty_r>
 8009590:	b128      	cbz	r0, 800959e <__smakebuf_r+0x70>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f023 0303 	bic.w	r3, r3, #3
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	431d      	orrs	r5, r3
 80095a2:	81a5      	strh	r5, [r4, #12]
 80095a4:	e7cf      	b.n	8009546 <__smakebuf_r+0x18>
	...

080095a8 <_fstat_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	2300      	movs	r3, #0
 80095ac:	4d06      	ldr	r5, [pc, #24]	; (80095c8 <_fstat_r+0x20>)
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	f7f8 faea 	bl	8001b8e <_fstat>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d102      	bne.n	80095c4 <_fstat_r+0x1c>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b103      	cbz	r3, 80095c4 <_fstat_r+0x1c>
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	20000498 	.word	0x20000498

080095cc <_isatty_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	2300      	movs	r3, #0
 80095d0:	4d05      	ldr	r5, [pc, #20]	; (80095e8 <_isatty_r+0x1c>)
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f8 fae8 	bl	8001bac <_isatty>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_isatty_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_isatty_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000498 	.word	0x20000498

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
